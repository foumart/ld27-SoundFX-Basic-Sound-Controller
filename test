package dungeonScreener {//2493
	
	import flash.events.Event;
	import flash.events.TextEvent;
	import flash.events.MouseEvent;
	import flash.events.FullScreenEvent;
	import flash.display.SimpleButton;
	import flash.display.StageDisplayState;
	import flash.display.StageQuality;
	import flash.display.DisplayObject;
	import flash.display.MovieClip;
	import flash.display.Sprite;
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.Shape;
	import flash.filters.GlowFilter;
	import flash.text.TextField;
	import flash.text.TextFieldAutoSize;
	import flash.text.TextFieldType;
	import flash.text.TextFormat;
	import flash.text.TextFormatAlign;
	import flash.text.GridFitType;
	import flash.text.StyleSheet;
	import flash.text.AntiAliasType;
	
	import flash.utils.getDefinitionByName;
	import flash.utils.setTimeout;
	import flash.utils.clearTimeout;
	import flash.utils.getTimer;
	
	import dungeonScreener._options;
	import dungeonScreener._global;
	import dungeonScreener.item.Item;
	import dungeonScreener.item.ItemType;
	
	import com.foumartgames.system.Base;
	import com.foumartgames.system.BaseSetting;
	import com.foumartgames.sound.SoundFX;
	import com.foumartgames.system.Local;
	import com.foumartgames.tween.Tween;
	import com.foumartgames.keyboard.KeyListener;
	import com.foumartgames.system.tracker.Tracker;
	import dungeonScreener.unit.UnitGroup;
	import dungeonScreener.unit.UnitStat;
	import dungeonScreener.unit.UnitType;
	import dungeonScreener.unit.Action;
	import dungeonScreener.unit.Slot;
	import dungeonScreener.dungeon.Dungeon;
	import dungeonScreener.Shell;
	
	import flash.geom.Matrix;
	import flash.geom.Rectangle;
	
	import fl.containers.ScrollPane;
	import fl.events.ScrollEvent;
	import fl.controls.ScrollBarDirection;
	
	public class RightPanel extends Sprite {
		
		public var panel:Panel;
		
		public var topKey:Item;
		public var leftKey:Item;
		public var rightKey:Item;
		public var bottomKey:Item;
		public var infoBars:Boolean;
		private var keyArray:Array = [[4,10,25,26], [9,12,30,27], [8,15,11,31], [20,21,22,23], [47,3,39,48]];
		
		public var keyListener:KeyListener;
		private var tooltiptimeout:uint;
		
		private var infoScrollPane:ScrollPane;
		private var infoContent:InfoContent;
		private var infoUnit:InfoUnit;
		
		public var consoleText:LineTxt;
		public var texts:Array = [];
		public var questionText:Sprite;
		public var questionTxt:TextField;
		
		public var knightAction:String = Action.ATTACK;
		public var shieldOff:Boolean;
		
		public var wizardAction:String = Action.ATTACK;
		
		public var rangerAction:String = Action.ATTACK;
		
		public var clericAction:String = Action.ATTACK;
		
		public var resurrects:int = 0;
		public var reloads:int = 0;
		
		public var musicMuted:Boolean;
		
		public var soundMuted:Boolean;
		public var cureReally:Boolean;
		private var thumbBorders:Array = [0x666666, 0x886644, 0x997733, 0xbb5522, 0xcc1100];
		private var tempAttack:int = 0;
		private var scan:Boolean;
		public var questions:Array = [
			{question:"<font size='+1'>        <b>Quit Game? (You can reload later)</b>          </font>", question2:"<font size='+1'>                   <b>Abandon Game?</b>                      </font>", yes:quitPressed, no:cancel},
			{question:"<font size='+1'>           <b>Descend to the Dark Cave?</b>              </font>", yes:descendPressed, no:cancel},
			{question:"<font size='+1'>           <b>Descend into Deep Chasm?</b>               </font>", yes:descendPressed, no:cancel},
			{question:"<font size='+1'>    <b>Descend into the Underground World?</b>          </font>", yes:descendPressed, no:cancel},
			{question:"<font size='+1'>     <b>Descend into the Dungeon Lord's Lair?</b>          </font>", yes:descendPressed, no:cancel},
			{question:"", yes:blankPressed, no:blankPressed},
			{question:"<font size='+1'>       <b>Do you want to play the Tutorial ?</b>        </font>", yes:tutorialPressed, no:cancelTutorial},//<a href='event:tutorialPressed'><font color='#cccccc'><b>Y</b></font>es</a>/<a href='event:cancel'><font color='#cccccc'><b>N</b></font>o</a> ?
			{question:"<font size='+1'>   <b>Continue playing Tutorial battles (2/4) ?</b>      </font>", yes:freeFragsPressed, no:cancelTutorial},
			{question:"<font size='+1'>   <b>Continue playing Tutorial battles (3/4) ?</b>      </font>", yes:moreFragsPressed, no:cancelTutorial},
			{question:"<font size='+1'>        <b>Play the last Tutorial battle ?</b>            </font>", yes:evenFragsPressed, no:cancelTutorial},
			{question:"", yes:lastFragsPressed, no:lastFragsPressed},
			{question:"<font size='+1'>               <b>Quit to Main Menu ?</b>                 </font>", yes:startNewGame, no:dontStartNewGame},
			{question:"<font size='+1'>               <b>Complete the game ?</b>                 </font>", yes:finishGamePressed, no:cancel},
		];
		private var currentThumb:String;
		private var currentCard:String;
		public var activeQuestion:Object;
		public var tutorialState:int;
		private var questionDown:int = -26 - ((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?18:0);
		private var questionUp:int = _global._stage.stageHeight - 80 - ((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?6:0);
		//private var commandsText:String = "<font color='#aaaaaa'>[<font color='#cccccc'><b>I</b></font>]Info [<font color='#cccccc'><b>K</b></font>]Defend</font>";//"<font color='#aaaaaa'><font color='#cccccc'><b>I</b></font>nfo: <font color='#cccccc'><b>D</b></font>efend <font color='#cccccc'><b>A</b></font>im <font color='#cccccc'><b>C</b></font>ast <font color='#cccccc'><b>H</b></font>eal,<font color='#cccccc'><b>S</b></font>ound <font color='#cccccc'>M</font>usic <font color='#cccccc'><b>Q</b></font>uit,←↑→↓ <font color='#cccccc'><b>Space</b></font> <font color='#cccccc'><b>Esc</b></font> <font color='#cccccc'><b>Y</b></font>es <font color='#cccccc'><b>N</b></font>o</font>"
		private var tierColors:Array = [0x008800, 0xaa6600, 0xcc3300, 0xee1100];
		public var gameOverlay:GameOverlay;
		public var treasureWon:Boolean;
		public var dragonsTreasureWon:Boolean;
		public var cataclysmWon:Boolean;
		public var armageddonWon:Boolean;
		public var polymorphWon:Boolean;
		private var _rand:int;
		public var prices:Array = [
			{name:"Battle Gloves",		price:250,	prev:500,	level:-1, have:false, slot:Slot.TOP},
			{name:"Rogue Cloak",		price:400,	prev:750,	level:-1, have:false, slot:Slot.RIGHT},
			{name:"Magic Wand",			price:500,	prev:1000,	level:-1, have:false, slot:Slot.BOTTOM},
			{name:"Holy Necklace",		price:600,	prev:1200,	level:-1, have:false, slot:Slot.LEFT},
			{name:"Titan Sling",		price:750,	prev:1500,	level:-1, have:false, slot:Slot.LEFT},
			{name:"Shadow Blade",		price:1250,	prev:2000,	level:-1, have:false, slot:Slot.RIGHT},
			{name:"Crystal Sword",		price:1500, prev:2500,	level:-1, have:false, slot:Slot.TOP},
			{name:"Diamond Shield",		price:2000,	prev:3000,	level:-1, have:false, slot:Slot.TOP},
			{name:"Dragoon Ring",		price:5000, prev:7500,	level:-1, have:false, slot:Slot.BOTTOM},
			{name:"Divine Crown",		price:2500,	prev:4000,	level:-1, have:false, slot:Slot.LEFT}
		];
		public var shop:MovieClip;
		public var shopShown:Boolean;
		
		private var discard:TextField;
		//public var oldShop:MovieClip;
		//public var shopShown:Boolean;
		
		public function describeShop():Array{
			var arr:Array = [];
			_global.shell.track("describeShop:");
			for(var ii:int = 0; ii < prices.length; ii ++){
				arr.push({level:prices[ii].level, have:prices[ii].have});
				_global.shell.track(ii, prices[ii].level, prices[ii].have);
			}
			_global.shell.track("----");
			return arr;
		}
		
		public function loadShop(_shop:Array):void{
			for(var ii:int = 0; ii < prices.length; ii ++){
				prices[ii].level = _shop[ii].level;
				prices[ii].have = _shop[ii].have;
			}
		}
		
		public function RightPanel() {
			addEventListener(Event.ADDED_TO_STAGE, added);
		}
		public function achievementsClick(evt:MouseEvent):void{
			//trace(evt.target.name)
			action(evt.target.name);
		}
		public function cardsCloseClick(evt:MouseEvent = null):void{
			currentCard = null;
			SoundEffect.uiClick(1,.5);//
			panel.cards.visible = false;
			for(var i:uint = 0; i < Shell.CARDS.length-5; i++){
				var unitThumb:Sprite = panel.cards.getChildByName(_global.shell.cards[i]) as Sprite;
				unitThumb.removeEventListener(MouseEvent.CLICK, clicked);
				unitThumb.buttonMode = false;
			}
			removeCard();
		}
		private function infoCloseClick(evt:MouseEvent = null):void{
			SoundEffect.uiClick(1,.5);//
			_global.game.hideEnemiesHealthBar();
			panel.info.visible = false;
			if(panel.overlay.currentFrame > 1) showOrder();
		}
		private function txtClick(evt:TextEvent):void{
			this[evt.text]();
		}
		
		function updateThumbs():void{
			//var _cardArr:Array = (panel.overlay.currentFrame>1) ? _global.shell.gameMedals : Local.vars.cards;
			for(var _i:int = 0; _i < 36; _i+=6){
				for(var _j:int = 0; _j < 6; _j++){
					var unitThumb:Sprite = panel.cards.getChildByName(Shell.CARDS[_i+_j]) as Sprite;//trace(unitThumb.name)
					var label:TextField = unitThumb.getChildAt(1) as TextField;
					if(_i < Shell.CARDS.length-5 && Local.vars.cards[unitThumb.name]) label.htmlText = "<p align='center'><"+((Local.vars.cards[unitThumb.name])?"b":"i")+">"+_global.game.getName(unitThumb.name,0,true).replace(" ","<br>")+"</"+((Local.vars.cards[unitThumb.name])?"b":"i")+"></p>";
						else label.htmlText = "";
				}
			}
			for(_i = 0; _i < 16; _i+=4){
				for(_j = 0; _j < 4; _j++){
					if(36+_i+_j <= 52){
						unitThumb = panel.cards.getChildByName(Shell.CARDS[36+_i+_j]) as Sprite;//trace(unitThumb.name)
						label = unitThumb.getChildAt(1) as TextField;
						if(_i < Shell.CARDS.length-5 && Local.vars.cards[unitThumb.name]) label.htmlText = "<p align='center'><"+((Local.vars.cards[unitThumb.name])?"b":"i")+">"+_global.game.getName(unitThumb.name,0,true).replace(" ","<br>")+"</"+((Local.vars.cards[unitThumb.name])?"b":"i")+"></p>";
							else label.htmlText = "";
					}
				}
			}
		}
		
		public function earnCard(_which:String):void{//_global.shell.track("earnCard:"+_which)
			var mX:int = mouseX;
			var mY:int = mouseY;
			var nm:String = _which;
			
			var cardMessege:CardMessege = new CardMessege();
			panel.addChild(cardMessege);
			var thumb:Sprite = new Sprite();
			thumb.name = nm;//_global.shell.cards[i];
			var def:Class = getDefinitionByName("Card_"+nm) as Class;
			thumb.name = nm;
			var bmp:BitmapData = new def() as BitmapData;
			var bitmap:Bitmap = new Bitmap(bmp);
			thumb.addChild(bitmap);
			cardMessege.card.addChild(thumb);
			cardMessege.gotoAndPlay("show");
			cardMessege.x = mX;
			cardMessege.y = mY;
			Tween.delay(55, updateMiniCard);
			Tween.to(cardMessege, {x:-32,y:12}, 60, null, panel.removeChild, cardMessege);
		}
		private function updateInfo():void{
			var unitThumb:Sprite;
			try{
				for(var _i:uint = 0; _i < infoContent.numChildren; _i++){
					if(infoContent.getChildAt(_i).name.substr(0,5)=="thumb"){
						unitThumb = infoContent.getChildAt(_i) as Sprite;
						for(var _j:uint = 0; _j < unitThumb.numChildren; _j++){
							if(unitThumb.getChildAt(_j).name == "title"){
								if((unitThumb.getChildAt(_j) as TextField).text == "Unknown" && (Local.vars.cards[unitThumb.name.substr(6)] || _global.shell.units[unitThumb.name.substr(6)])) {
									(unitThumb.getChildAt(_j) as TextField).htmlText = _global.game.getName(unitThumb.name.substr(6),0,true);
									//updateThumbGraphic(unitThumb, UnitStat.characters.indexOf(unitThumb.name.substr(6)));
								}
							} else if(unitThumb.getChildAt(_j).name == "fade"){
								if (Local.vars.cards[unitThumb.name.substr(6)] || _global.shell.units[unitThumb.name.substr(6)]) {
									unitThumb.removeChild(unitThumb.getChildAt(_j));
									updateThumbGraphic(unitThumb, UnitStat.characters.indexOf(unitThumb.name.substr(6)));
								}
							}
						}
					}// else {trace("object is not a thumb");}
				}
			} catch(err:Error){_global.shell.track("Error in 'updateInfo();' !", _i, err);}
		}
		/*private function infoThumbClick(evt:MouseEvent):void{//trace("infoThumbClick:"+evt.currentTarget.name, evt.target.name);
			infoThumbDetails(evt.currentTarget.name);
		}
		private function infoThumbDetails(which:String):void{
			trace("infoThumbDetails:"+which);
			if(currentThumb == which){
				thumbDefault();
				currentThumb = null;
			} else {
				thumbShow(which.substr(6));
				currentThumb = which;
			}
		}
		private function thumbDefault():void{
			trace("thumbDefault");
			//infoUnit
		}
		private function thumbShow(which:String):void{
			trace("show thumb:"+which);
			//infoUnit
		}*/
		private function updateThumbGraphic(thumb:Sprite, i:int):void{
			var a:Sword;
			var h:WhiteHeart;
			var hb:BlueHeart;
			var hy:YellowHeart;
			var hp:PurpleHeart;
			var hg:GreenHeart;
			var hr:GreyHeart;
			var b:Bow;
			var b2:Bow;
			var s:Shield;
			var m:Spell;
			var c:Cure;
			var j:uint;
			for(j = 0; j < UnitStat[UnitStat.characters[i]].health; j++){
				if(UnitStat.characters[i] == UnitType.WITCH || UnitStat.characters[i] == UnitType.GARGOYLE || UnitStat.characters[i] == UnitType.DRAGON){
					hp = new PurpleHeart();
					hp.scaleX = 0.85; hp.scaleY = 0.75; hp.x=42+j*14; hp.y=9;
					thumb.addChild(hp);
				} else if(UnitStat.characters[i] == UnitType.VALKARIE || UnitStat.characters[i] == UnitType.WARLORD || UnitStat.characters[i] == UnitType.DREAD_KNIGHT
						   || UnitStat.characters[i] == UnitType.BLOOD_WARRIOR || UnitStat.characters[i] == UnitType.BLOB || UnitStat.characters[i] == UnitType.MAGE){
					hy = new YellowHeart();
					hy.scaleX = 0.85; hy.scaleY = 0.75; hy.x=42+j*14; hy.y=9;
					thumb.addChild(hy);
					/*hp = new PurpleHeart();
					hp.scaleX = 0.85; hp.scaleY = 0.75; hp.x=42+j*14; hp.y=9;
					hp.alpha=(UnitStat.characters[i] == UnitType.VALKARIE)?0.5:((UnitStat.characters[i] == UnitType.BLOB || UnitStat.characters[i] == UnitType.WARLORD)?0.25:0);
					thumb.addChild(hp);*/
				} else if(UnitStat.characters[i] == UnitType.OGRE || UnitStat.characters[i] == UnitType.ARCHER || UnitStat.characters[i] == UnitType.DUNGEON_LORD){
					hg = new GreenHeart();
					hg.scaleX = 0.85; hg.scaleY = 0.75; hg.x=42+j*14; hg.y=9;
					thumb.addChild(hg);
				} else if(UnitStat.characters[i] == UnitType.TROLL || UnitStat.characters[i] == UnitType.SLIME){
					hb = new BlueHeart();
					hb.scaleX = 0.85; hb.scaleY = 0.75; hb.x=42+j*14; hb.y=9;
					thumb.addChild(hb);//|| UnitStat.characters[i] == UnitType.SKELETON || UnitStat.characters[i] == UnitType.ZOMBIE || UnitStat.characters[i] == UnitType.GHOST || UnitStat.characters[i] == UnitType.WRAITH
				} else if(UnitStat.characters[i] == UnitType.LICH || UnitStat.characters[i] == UnitType.BLOOD_ACOLYTE || UnitStat.characters[i] == UnitType.PHANTOM || UnitStat.characters[i] == UnitType.DEATH_KNIGHT){
					hr = new GreyHeart();
					hr.scaleX = 0.85; hr.scaleY = 0.75; hr.x=42+j*14; hr.y=9;
					thumb.addChild(hr);
				} else {
					h = new WhiteHeart();
					h.scaleX = 0.85; h.scaleY = 0.75; h.x=42+j*14; h.y=9;
					thumb.addChild(h);
				}
			}
			for(j = 0; j < UnitStat[UnitStat.characters[i]].attack; j++){
				a = new Sword();
				a.scaleX = 0.8; a.scaleY = 0.8; a.x=44+j*13; a.y = 22;
				thumb.addChild(a);a.gotoAndStop((UnitStat.characters[i]==UnitType.GNOLL)?12:((UnitStat.characters[i]==UnitType.BANSHEE)?11:((UnitStat.characters[i]==UnitType.DUNGEON_LORD)?13:UnitStat[UnitStat.characters[i]].attack)));
			}
			if(UnitStat[UnitStat.characters[i]].slot == Slot.TOP){
				for(j = 0; j < UnitStat[UnitStat.characters[i]].action; j++){
					s = new Shield();
					s.scaleX = 0.8; s.scaleY = 0.8; s.x=148-j*13; s.y = 22;
					thumb.addChild(s);s.gotoAndStop(UnitStat[UnitStat.characters[i]].defense);
				}
			} else if(UnitStat[UnitStat.characters[i]].slot == Slot.RIGHT){
				for(j = 0; j < UnitStat[UnitStat.characters[i]].action; j++){
					b = new Bow();
					b.gotoAndStop(UnitStat[UnitStat.characters[i]].attack);
					b.scaleX = 0.8; b.scaleY = 0.8; b.x=148-j*16; b.y = 22;
					thumb.addChild(b);//b.gotoAndStop(2);
					b2 = new Bow();
					b2.gotoAndStop(UnitStat[UnitStat.characters[i]].attack);
					b2.scaleX = 0.8; b2.scaleY = 0.8; b2.x=147.5-j*16; b2.y = 22.5;
					thumb.addChild(b2);
				}
			} else if(UnitStat[UnitStat.characters[i]].slot == Slot.LEFT){
				for(j = 0; j < UnitStat[UnitStat.characters[i]].action; j++){
					c = new Cure();
					c.scaleX = 0.8; c.scaleY = 0.8; c.y = 22; c.x=148-j*14;
					thumb.addChild(c);c.gotoAndStop(UnitStat[UnitStat.characters[i]].strength);
				}
			} else {
				for(j = 0; j < ((UnitStat[UnitStat.characters[i]].action<4)?UnitStat[UnitStat.characters[i]].action:4); j++){
					m = new Spell();
					m.gotoAndStop(UnitStat[UnitStat.characters[i]].attack);
					m.scaleX = 0.8; m.scaleY = 0.8; m.x=148-j*14; m.y = 22;
					thumb.addChild(m);
				}
			}
		}
		
		private function consoleLogoClick(evt:MouseEvent):void{
			Base.linkHandler(null);
		}
		private function fullScreenDumbHandler(evt:MouseEvent):void{
			panel.fullscreenDumb_mc.visible = false;
		}
		private function fullScreenChange(evt:FullScreenEvent):void{
			if(_global._stage.displayState == StageDisplayState.NORMAL) panel.fullscreenDumb_mc.visible = false
			else if(_global._stage.displayState == StageDisplayState.FULL_SCREEN_INTERACTIVE && !Base.local && !Base.localWithNetwork) panel.fullscreenDumb_mc.visible = true;
		}
		private function added(evt:Event):void{
			removeEventListener(Event.ADDED_TO_STAGE, added);
			panel = new Panel();
			addChild(panel);
			
			panel.info.graphics.beginFill(0x333333,1);
			panel.info.graphics.drawRect(0,24,198,260);
			panel.info.graphics.endFill();
			panel.info.graphics.beginFill(0x333333,1);
			panel.info.graphics.drawRect(0,292,198,164);
			panel.info.graphics.drawRect(60,456,82,9);
			panel.info.graphics.endFill();
			panel.info.graphics.beginFill(0x282828,1);
			panel.info.graphics.drawRect(0,455,87,1);
			panel.info.graphics.drawRect(88,456,1,8);
			panel.info.graphics.endFill();
			panel.info.graphics.beginFill(0x222222,1);
			panel.info.graphics.drawRect(0,456,86,9);
			panel.info.graphics.endFill();
			
			panel.info.graphics.beginFill(0x111111,1);
			panel.info.graphics.drawRect(4,290,190,162);
			panel.info.graphics.drawRect(94,452,44,9);
			
			panel.info.close_btn.addEventListener(MouseEvent.CLICK, closeInfoPanelClick);
			panel.fullscreen_btn.addEventListener(MouseEvent.CLICK, fullScreenHandler);
			panel.fullscreenDumb_mc.btn.addEventListener(MouseEvent.CLICK, fullScreenDumbHandler);
			panel.fullscreenDumb_mc.visible = false;
			_global._stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenChange);
			
			panel.dusc_mc.score_mc.visible = false;
			panel.dusc_mc.gold_txt.visible = false;
			
			var char:UnitGraphics;
			var msk:Sprite;
			var msk2:Sprite;
			var unitThumb:Sprite;
			var thumb:Sprite;
			var _j:int;
			var cr:int;
			
			infoContent = new InfoContent();
			panel.info.addChild(infoContent);
			
			try{
				for(var _i:uint = 0; _i < UnitStat.characters.length; _i++){
					unitThumb = getThumb(_i);
					//unitThumb.name = "thumb"+_i;
					infoContent.addChild(unitThumb);
					//unitThumb.buttonMode = true;
					//unitThumb.addEventListener(MouseEvent.CLICK, infoThumbClick);
					unitThumb.x = 9;
					unitThumb.y = 8+_i*50;
				}
			} catch(err:Error){_global.shell.track("Error in 'added();' !", _i, err);}
			
			function getThumb(i:uint):Sprite {
				thumb = new Sprite();
				char = new UnitGraphics();
				char.name = "char";
				char.gotoAndStop(UnitStat.characters[i]);
				thumb.addChild(char);
				char.scaleX = 3.5;
				char.scaleY = 3.5;
				char.x=-13;
				char.y=-7;
				var nm:String = _global.game.getName((_global.game.getUnitExp(UnitStat.characters[i])>1000)?((Local.vars.cards[UnitStat.characters[i]])?UnitStat.characters[i]:"Unknown"):UnitStat.characters[i],0,true);
				var thumbText:TextField = getTextField(nm, 0, 12, 0x999999);
				thumbText.name = "title";
				thumb.name = "thumb_"+UnitStat.characters[i];
				thumbText.x = 41;
				thumbText.y = -6;
				thumb.addChild(thumbText);
				var expText:TextField = getTextField(( ((_global.game.getUnitExp(UnitStat.characters[i]))<1000) ? (((_global.game.getUnitExp(UnitStat.characters[i]))<100)?"  ":" ") : "") + ((_global.game.getUnitExp(UnitStat.characters[i])>2000)?(((int(_global.game.getUnitExp(UnitStat.characters[i])/1000)<10)?"  ":" ")+int(_global.game.getUnitExp(UnitStat.characters[i])/1000)+"K"):_global.game.getUnitExp(UnitStat.characters[i])), 0, 10, 0x999999, false);
				expText.name = "exp";
				expText.x = 135;
				expText.y = -5;
				thumb.addChild(expText);
				msk = new Sprite()
				msk.graphics.beginFill(0x66ff66, 0.5);
				msk.graphics.drawRect(char.x+6, char.y+3, 42, 40);
				msk.graphics.endFill();
				thumb.addChild(msk);
				char.mask = msk;
				msk2 = new Sprite();
				msk2.graphics.beginFill(tierColors[UnitStat[UnitStat.characters[i]].strength],1);
				msk2.graphics.drawRect(char.x+2, char.y, 175, 46);
				msk2.graphics.endFill();
				msk2.graphics.beginFill(0x111111,1);
				msk2.graphics.lineStyle(1, thumbBorders[UnitStat[UnitStat.characters[i]].strength]);
				msk2.graphics.drawRect(char.x+5, char.y+1, 43, 43);
				msk2.graphics.endFill();
				msk2.graphics.beginFill(0x222222,1);
				msk2.graphics.lineStyle();
				msk2.graphics.drawRect(char.x+51, char.y+2, 124, 42);
				msk2.graphics.beginFill(0,.5);
				msk2.graphics.drawRect(char.x+51, char.y+2, 124, 13);
				msk2.graphics.endFill();
				thumb.addChildAt(msk2,0);//2000, 32
				if((_global.game.getUnitExp(UnitStat.characters[i])<=100&&i<=13)||_global.shell.units[UnitStat.characters[i]]||Local.vars.cards[UnitStat.characters[i]]){
					updateThumbGraphic(thumb, i);
					cr = ((UnitStat.characters[i]==UnitType.ARCHER||UnitStat.characters[i]==UnitType.GOBLIN||UnitStat.characters[i]==UnitType.BLOOD_WARRIOR||UnitStat.characters[i]==UnitType.WRAITH||UnitStat.characters[i]==UnitType.ORC_SOLDIER||UnitStat.characters[i]==UnitType.BARBARIAN||UnitStat.characters[i]==UnitType.GHOUL||UnitStat.characters[i]==UnitType.DARK_KNIGHT||UnitStat.characters[i]==UnitType.DREAD_KNIGHT)?(1+UnitStat[UnitStat.characters[i]].strength)*5:((UnitStat.characters[i]==UnitType.VALKARIE||UnitStat.characters[i]==UnitType.WARLORD||UnitStat.characters[i]==UnitType.DEATH_KNIGHT)?(UnitStat[UnitStat.characters[i]].strength-2)*25:0));
					if(cr){
						var critText:TextField = getTextField(cr+"%", 0, 12, 0x999999, false);
						critText.name = "crit";
						if(UnitStat.characters[i]==UnitType.BARBARIAN||UnitStat.characters[i]==UnitType.WARLORD||UnitStat.characters[i]==UnitType.VALKARIE||UnitStat.characters[i]==UnitType.ARCHER){
							critText.x = 44 + 5*13;
							critText.y = -6;
						} else {
							critText.x = 44 + UnitStat[UnitStat.characters[i]].attack*13;
							critText.y = 22;
						}
						thumb.addChild(critText);
					}
				} else {
					msk = new Sprite()
					msk.graphics.beginFill(0x111111, 1);
					msk.graphics.drawRect(char.x+6, char.y+3, 42, 40);
					msk.graphics.endFill();
					msk.graphics.beginFill(0x666666, 1);
					msk.graphics.drawRect(8+char.x+16, 8+char.y+12, 2, 2);
					msk.graphics.drawRect(8+char.x+18, 8+char.y+10, 4, 2);
					msk.graphics.drawRect(8+char.x+22, 8+char.y+12, 2, 2);
					msk.graphics.drawRect(8+char.x+24, 8+char.y+14, 2, 4);
					msk.graphics.drawRect(8+char.x+20, 8+char.y+18, 4, 2);
					msk.graphics.drawRect(8+char.x+18, 8+char.y+20, 2, 4);
					msk.graphics.drawRect(8+char.x+18, 8+char.y+26, 2, 2);
					msk.graphics.endFill();
					thumb.addChild(msk);
					msk.name = "fade";
				}
				return thumb;
			}
			
			infoScrollPane = new ScrollPane();
			infoScrollPane.scrollDrag = false;
			infoScrollPane.source = infoContent;
			//infoScrollPane.setSize(192, 400);
			infoScrollPane.move(5, 28);
			infoScrollPane.width = 190;
			infoScrollPane.height = 268;
			//infoScrollPane.x
			//infoScrollPane.y = 28;
			//infoScrollPane.addEventListener(ScrollEvent.SCROLL, scrollHandler);
			panel.info.addChild(infoScrollPane);
			
			var scrollPaneMask:Sprite = new Sprite();
			scrollPaneMask.graphics.beginFill(0,1);
			scrollPaneMask.graphics.drawRect(0, 0, infoScrollPane.width+5, infoScrollPane.height+13);
			scrollPaneMask.graphics.endFill();
			panel.info.addChild(scrollPaneMask);
			infoScrollPane.mask = scrollPaneMask;
			
			infoUnit = new InfoUnit();
			panel.info.addChild(infoUnit);
			infoUnit.y = 292;
			
			var txt:Txt = new Txt();
			panel.info.addChild(txt);
			txt.x = 5;
			txt.y = 450;
			txt.txt.htmlText = "<a href='event:closeInfoPanelClick'>Display Only Stats</a>";
			txt.txt.addEventListener(TextEvent.LINK, txtClick);
			txt.addEventListener(MouseEvent.CLICK, closeInfoPanelClick);
			var style:StyleSheet = new StyleSheet();
			var hover:Object = new Object();
			hover.color = "#00c000";
			hover.textDecoration= "underline";
			var link:Object = new Object();
			//link.fontWeight = "bold";
			link.color = "#889088"; //green
			style.setStyle("a:link", link);
			style.setStyle("a:hover", hover);
			txt.txt.styleSheet = style;
			panel.info.visible = false;
			panel.info.items_mc.visible = false;
			
			panel.overlay.visible = false;
			
			var bmp:BitmapData;
			var bitmap:Bitmap;
			var def:Class;
			function getCard(i:uint):Sprite {
				thumb = new Sprite();
				thumb.name = _global.shell.cards[i];
				def = getDefinitionByName("Card_"+_global.shell.cards[i]) as Class;
				thumb.name = _global.shell.cards[i];
				bmp = new def() as BitmapData;
				bitmap = new Bitmap(bmp);
				thumb.addChild(bitmap);
				return thumb;
			}
			//if(!_global.gamersafe) panel.cards.achievements_btn.visible = false
				//else panel.cards.achievements_btn.addEventListener(MouseEvent.CLICK, achievementsClick);
			panel.cards.close_btn.addEventListener(MouseEvent.CLICK, cardsCloseClick);
			panel.cards.visible = false;
			panel.card.visible = false;
			panel.quit_btn.visible = false;
			panel.card_btn.visible = false;
			panel.tavern_btn.visible = false;
			panel.tavern_btn.beer.stop();
			panel.hiscores_btn.visible = false;
			panel.settings_btn.visible = false;
			panel.profile.visible = false;
			panel.profile.close_btn.addEventListener(MouseEvent.CLICK, profileCloseClick);
			panel.settings.visible = false;
			panel.settings.close_btn.addEventListener(MouseEvent.CLICK, settingsCloseClick);
			var label:TextField;
			for(_i = 0; _i < 36; _i+=6){
				for(_j = 0; _j < 6; _j++){
					//try{
						unitThumb = getCard(_i+_j);
						panel.cards.addChild(unitThumb)
						unitThumb.x = 8 + _j*(62+((_i>=24)?6:((_i>=18)?3:0)));
						unitThumb.y = 32 + int(_i/6)*72;
						label = getTextField("", 80, 9, ((Local.vars.cards[unitThumb.name])?0x999999:0x666666));
						unitThumb.addChild(label);
						label.autoSize = TextFieldAutoSize.CENTER;
						label.multiline = true;
						label.wordWrap = true;
						label.x =  - 12;
						label.y = unitThumb.height;
						//if(_i < _global.shell.cards.length-1 && Local.vars[unitThumb.name]) label.htmlText = "<p align='center'><"+((Local.vars[unitThumb.name])?"b":"i")+">"+_global.game.getName(unitThumb.name,0,true).replace(" ","<br>")+"</"+((Local.vars[unitThumb.name])?"b":"i")+"></p>";
					//} catch(err:Error){trace(err)}
				}
			}
			for(_i = 36; _i < Shell.CARDS.length-5; _i+=4){
				for(_j = 0; _j < 4; _j++){
					//try{
						unitThumb = getCard(_i+_j);
						panel.cards.addChild(unitThumb)
						unitThumb.x = (_i>=48) ? 388 + _j*60 : 382 + _j*62;//trace(_i, _j, int((_i-30)/3), (_i-30)/3)
						unitThumb.y = int((_i-30)/3)*63 - ((_i>=48)?158:94);
						label = getTextField("", 80, 9, ((Local.vars.cards[unitThumb.name])?0x999999:0x666666));
						unitThumb.addChild(label);
						label.autoSize = TextFieldAutoSize.CENTER;
						label.multiline = true;
						label.wordWrap = true;
						label.x =  - 12;
						label.y = unitThumb.height;
						//if(_i < _global.shell.cards.length-1 && Local.vars[unitThumb.name]) label.htmlText = "<p align='center'><"+((Local.vars[unitThumb.name])?"b":"i")+">"+_global.game.getName(unitThumb.name,0,true).replace(" ","<br>")+"</"+((Local.vars[unitThumb.name])?"b":"i")+"></p>";
					//} catch(err:Error){trace(err)}
				}
			}
			updateThumbs();
			
			SoundFX.onInit = function():void {
				//Local.
				soundMuted = Local.vars.sound;
				SoundFX.soundMute = soundMuted;
				panel.sound.alpha = (soundMuted||!_options.soundVolume)?0.5:1;
				panel.sound.gotoAndStop((soundMuted||!_options.soundVolume)?2:1);
				musicMuted = Local.vars.music;
				SoundFX.musicMute = musicMuted;
				panel.music.alpha = (musicMuted||!_options.musicVolume)?0.5:1;
				panel.music.gotoAndStop((musicMuted||!_options.musicVolume)?2:1);
				
				_options.musicVolume = Local.vars.musicVolume;
				_options.soundVolume = Local.vars.soundVolume;
				panel.settings.mutedMusic = _options.musicVolume;
				panel.settings.mutedSound = _options.soundVolume;
				SoundFX.musicVolume = _options.musicVolume;
				SoundFX.soundVolume = _options.soundVolume;
				_options.skipFrames = Local.vars.skipFrames;
				_options.scanLines = Local.vars.scanLines;
				_options.tutorial = Local.vars.tutorial;
				_options.intro = Local.vars.intro;
				_options.revive = Local.vars.revive;
				_options.bonus = Local.vars.bonus;
				_options.difficulty = Local.vars.difficulty;
				panel.settings.intr.bonus = _options.bonus;
				_global.game.superInsane = _options.difficulty;
				//if(panel.settings.intr.bonus_mc) panel.settings.intr.bonus_mc.gotoAndStop(panel.settings.intr.bonus);
				if(_options.scanLines) _global.game.drawScanLines();
				//if(!soundMuted) SoundEffect.init();
				//if(!musicMuted)
				SoundFX.playMusic("FX_intro", 1, SoundFX.REPLAY);
				
				_global.game.createDungeon();
				
				/*panel.dusc_mc.gotoAndStop(1);
				panel.dusc_mc.gold_txt.text="";
				panel.dusc_mc.gold_txt.visible = false;
				panel.dusc_mc.score_mc.visible = false;
				panel.overlay.globalScoreBrowser.visible = false;
				panel.overlay.globalScoreBrowser.enter.visible = false;
				panel.overlay.globalScoreBrowser.enter.loading_bar.visible = false;
				panel.overlay.globalScoreBrowser.enter.retry_btn.visible = false;
				panel.overlay.globalScoreBrowser.entry.visible = false;
				mainMenu();
				_global.game.locked = true;*/
				
				_global.shell.gameReady();
				_global.shell.requestGlobalScores();
			}
			
			panel.shield.visible = false;
			panel.shield.mouseEnabled = false;
			panel.shield.mouseChildren = false;
			panel.heal.visible = false;
			panel.heal.mouseEnabled = false;
			panel.heal.mouseChildren = false;
			panel.spell.visible = false;
			panel.spell.mouseEnabled = false;
			panel.spell.mouseChildren = false;
			panel.bow.visible = false;
			panel.bow.mouseEnabled = false;
			panel.bow.mouseChildren = false;
			
			topKey = new Item(keyArray[3][0], 0, 0);
			panel.addChildAt(topKey,1);
			var tmpMask:Sprite = new Sprite();
			tmpMask.graphics.beginFill(0,1);tmpMask.graphics.drawRect(0,0,32,32);tmpMask.graphics.endFill();
			panel.addChild(tmpMask);
			topKey.mask = tmpMask;
			topKey.x = 16;
			topKey.y = 326;
			tmpMask.x = topKey.x-16; tmpMask.y = topKey.y-16;
			
			rightKey = new Item(keyArray[3][1], 0, 0);
			panel.addChildAt(rightKey,1);
			tmpMask = new Sprite();
			tmpMask.graphics.beginFill(0,1);tmpMask.graphics.drawRect(0,0,32,32);tmpMask.graphics.endFill();
			panel.addChild(tmpMask);
			rightKey.mask = tmpMask;
			rightKey.x = 16;
			rightKey.y = 365;
			tmpMask.x = rightKey.x-16; tmpMask.y = rightKey.y-16;
			
			leftKey = new Item(keyArray[3][2], 0, 0);
			panel.addChildAt(leftKey,1);
			tmpMask = new Sprite();
			tmpMask.graphics.beginFill(0,1);tmpMask.graphics.drawRect(0,0,32,32);tmpMask.graphics.endFill();
			panel.addChild(tmpMask);
			leftKey.mask = tmpMask;
			leftKey.x = 16;
			leftKey.y = 404;
			tmpMask.x = leftKey.x-16; tmpMask.y = leftKey.y-16;
			
			bottomKey = new Item(keyArray[3][3], 0, 0);
			panel.addChildAt(bottomKey,1);
			tmpMask = new Sprite();
			tmpMask.graphics.beginFill(0,1);tmpMask.graphics.drawRect(0,0,32,32);tmpMask.graphics.endFill();
			panel.addChild(tmpMask);
			bottomKey.mask = tmpMask;
			bottomKey.x = 16;
			bottomKey.y = 443;
			tmpMask.x = bottomKey.x-16; tmpMask.y = bottomKey.y-16;
			
			//panel.dusc_mc.playMoreGames_btn.addEventListener(MouseEvent.CLICK, playMoreGamesClicked);
			//panel.dusc_mc.foumartGames_btn.addEventListener(MouseEvent.CLICK, foumartGamesClicked);
			
			panel.music.buttonMode = true;
			panel.sound.buttonMode = true;
			
			panel.topFade.visible = false;
			panel.leftFade.visible = false;
			panel.rightFade.visible = false;
			panel.bottomFade.visible = false;
			panel.topFade.mouseEnabled = false;
			panel.leftFade.mouseEnabled = false;
			panel.rightFade.mouseEnabled = false;
			panel.bottomFade.mouseEnabled = false;
			
			panel.knight.addEventListener(MouseEvent.CLICK, clicked);
			panel.knight.buttonMode = true;
			
			panel.ranger.addEventListener(MouseEvent.CLICK, clicked);
			panel.ranger.buttonMode = true;
			
			panel.cleric.addEventListener(MouseEvent.CLICK, clicked);
			panel.cleric.buttonMode = true;
			
			panel.wizard.addEventListener(MouseEvent.CLICK, clicked);
			panel.wizard.buttonMode = true;
			
			panel.sound.addEventListener(MouseEvent.CLICK, clicked);
			panel.music.addEventListener(MouseEvent.CLICK, clicked);
			
			panel.info_btn.addEventListener(MouseEvent.CLICK, clicked);
			panel.info_btn.buttonMode = true;
			
			panel.card_btn.addEventListener(MouseEvent.CLICK, clicked);
			panel.card_btn.buttonMode = true;
			
			panel.tavern_btn.addEventListener(MouseEvent.CLICK, clicked);
			panel.tavern_btn.buttonMode = true;
			
			panel.quit_btn.addEventListener(MouseEvent.CLICK, clicked);
			panel.quit_btn.buttonMode = true;
			
			panel.settings_btn.addEventListener(MouseEvent.CLICK, clicked);
			panel.settings_btn.buttonMode = true;
			
			panel.hiscores_btn.addEventListener(MouseEvent.CLICK, clicked);
			panel.hiscores_btn.buttonMode = true;
			
			panel.top_btn.addEventListener(MouseEvent.CLICK, clicked);
			panel.left_btn.addEventListener(MouseEvent.CLICK, clicked);
			panel.right_btn.addEventListener(MouseEvent.CLICK, clicked);
			panel.bottom_btn.addEventListener(MouseEvent.CLICK, clicked);
			
			consoleText = getLineField();
			//consoleText.addEventListener(TextEvent.LINK, txtClick);
			consoleText.line_txt.mouseEnabled = false;
			consoleText.mouseEnabled = false;
			
			if(Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75) {
				panel.console.y = _global._stage.stageHeight - 58 - ((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?-20:0);
				panel.console.bgr.height = 47 - ((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?20:0);
			}
			
			panel.console.addChildAt(consoleText, panel.console.numChildren-2);
			panel.console.bgr.addEventListener(MouseEvent.CLICK, consoleClick);
			panel.console.bgr.buttonMode = true;
			panel.console.bar_mc.mouseEnabled = false;
			panel.console.scroller_mc.buttonMode = true;
			panel.console.bar_mc.visible = false;
			panel.console.scroller_mc.visible = false;
			if(Base.armorgames || BaseSetting.adType == "armorgames" && Base.location != "foumartgames" && !Base.local){
				panel.console.ag_logo.addEventListener(MouseEvent.CLICK, consoleLogoClick);
				panel.ag_logo_big.ag_logo_big_btn.addEventListener(MouseEvent.CLICK, consoleLogoClick);
			}
			panel.console.ag_logo.visible = false;
			panel.ag_logo_big.visible = false;
			
			consoleText.y=-2;
			
			questionTxt = getTextField("", 0, 13, 0xcccccc);
			questionTxt.background = true;
			questionTxt.backgroundColor = 0x222222;
			questionTxt.y = 4;
			questionText = new Sprite();
			questionText.graphics.beginFill(0, .5);
			questionText.graphics.drawRect(0,-1,420,1);
			questionText.graphics.endFill();
			questionText.graphics.beginFill(0);
			questionText.graphics.drawRect(0,0,420,3);
			questionText.graphics.endFill();
			questionText.graphics.beginFill(0x333333);
			questionText.graphics.drawRect(0,3,420,1);
			questionText.graphics.endFill();
			questionText.addChild(questionTxt);
			questionText.y = questionDown;
			questionText.visible = false;
			questionText.mouseEnabled = false;
			questionText.mouseChildren = false;
			questionText.addEventListener(MouseEvent.CLICK, consoleClick);
			panel.console.addChild(questionText);
			panel.console.yes_btn.visible = false;
			panel.console.yes_btn.addEventListener(MouseEvent.CLICK, yes);
			panel.console.no_btn.visible = false;
			panel.console.no_btn.addEventListener(MouseEvent.CLICK, no);
			panel.dusc_mc.score_mc.man.mouseEnabled = false;
			panel.dusc_mc.score_mc.green_flag.buttonMode = true;
			panel.dusc_mc.score_mc.blue_flag.buttonMode = true;
			panel.dusc_mc.score_mc.yellow_flag.buttonMode = true;
			panel.dusc_mc.score_mc.red_flag.buttonMode = true;
			panel.dusc_mc.score_mc.dark_flag.buttonMode = true;
			panel.dusc_mc.score_mc.black_flag.buttonMode = true;
			panel.dusc_mc.score_mc.green_flag.addEventListener(MouseEvent.ROLL_OVER, flagRoll);
			panel.dusc_mc.score_mc.blue_flag.addEventListener(MouseEvent.ROLL_OVER, flagRoll);
			panel.dusc_mc.score_mc.yellow_flag.addEventListener(MouseEvent.ROLL_OVER, flagRoll);
			panel.dusc_mc.score_mc.red_flag.addEventListener(MouseEvent.ROLL_OVER, flagRoll);
			panel.dusc_mc.score_mc.dark_flag.addEventListener(MouseEvent.ROLL_OVER, flagRoll);
			panel.dusc_mc.score_mc.black_flag.addEventListener(MouseEvent.ROLL_OVER, flagRoll);
			panel.dusc_mc.score_mc.green_flag.addEventListener(MouseEvent.ROLL_OUT, flagOut);
			panel.dusc_mc.score_mc.blue_flag.addEventListener(MouseEvent.ROLL_OUT, flagOut);
			panel.dusc_mc.score_mc.yellow_flag.addEventListener(MouseEvent.ROLL_OUT, flagOut);
			panel.dusc_mc.score_mc.red_flag.addEventListener(MouseEvent.ROLL_OUT, flagOut);
			panel.dusc_mc.score_mc.dark_flag.addEventListener(MouseEvent.ROLL_OUT, flagOut);
			panel.dusc_mc.score_mc.black_flag.addEventListener(MouseEvent.ROLL_OUT, flagOut);
			panel.dusc_mc.score_mc.score_txt.mouseEnabled = false;
			panel.dusc_mc.score_mc.hiscore_txt.mouseEnabled = false;
			
			//addText("<font color='#cccccc'><b>D</b></font>efend/knight, <font color='#cccccc'><b>R</b></font>anged attack/ranger, <font color='#cccccc'><b>C</b></font>ast spell/wizard, <font color='#cccccc'><b>H</b></font>eal/Cleric");
			keyListener = new KeyListener(stage);
			keyListener.f = function(){
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(keyListener.ctrl&&keyListener.shift){
					if(_global.filters) {addText("<font color='#00ff00'>*filters off</font>");_global.filters = false} else {addText("<font color='#00ff00'>*filters on</font>");_global.filters = true;}
				} else {
					fullScreenHandler();
				}
			}
    		keyListener.v = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(panel.info.visible){
					infoCloseClick();
				} else action("info_btn");
			}
			keyListener.tilde = function():void {
				if(panel.overlay.currentFrame == 1 || _global.game.schedule == "endgame") return;
				action("quit_btn");
			}
			keyListener.backspace = function():void {
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(panel.overlay.currentFrame == 1) return;
				action("quit_btn");
			}
			keyListener.leftbracket = keyListener.five = keyListener.minus = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				action("sound");
			}
			keyListener.rightbracket = keyListener.six = keyListener.equal = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				action("music");
			}
			
			
			keyListener.one = keyListener.seven = keyListener.k = keyListener.s = keyListener.numfive = function():void{
				if(panel.overlay.currentFrame == 1 || (panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame")) return;
				if((gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown)){
					if(gameOverlay.currentLabel == "shown_0"){
						/*if(gameOverlay.shop0.ask.enabled&&gameOverlay.shop0.ask.visible)*/ gameOverlay.shop0.askClick(null);
					} else {
						if(gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].drink.enabled&&gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].drink.visible) gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].drinkClick(null);
					}
				} else if(!_global.game.paused && !panel.cards.visible && !panel.info.visible && !panel.settings.visible) action(UnitType.KNIGHT, (((gameOverlay.currentLabel!="show_2"&&gameOverlay.currentLabel!="prep_2") || !tutorialState) && !SoundFX.isNowPlaying("FX_boss")));//@@
			}
			keyListener.two = keyListener.eight = keyListener.y = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if((gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown)){//forceShop(gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].buy2);
					if(gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].rest.enabled&&gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].rest.visible) gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].restClick(null);
				} else {
					if(activeQuestion) {
						yes();
						return;
					}
					if(panel.overlay.currentFrame == 1 || _global.game.paused || panel.cards.visible || panel.info.visible || panel.settings.visible) return;
					
					if(keyListener.ctrl&&keyListener.shift && _options.debug.cheat){
						if(panel.overlay.currentFrame == 1) return;
						
						addText("<font color='#00ff00'>*spawn items: Sword3, Shield3, Scroll3, Spell3</font>");
						var it1:Item;
						var it2:Item;
						var it3:Item;
						var it4:Item;
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 1) < 1){
							var _item1:int = 14;
							it1 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 1, _item1, true);
						}
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 3) < 1){
							var _item2:int = 13;
							it2 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 3, _item2, true);
						}
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 5) < 1){
							var _item3:int = 16;
							it3 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 5, _item3, true);
						}
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 7) < 1){
							var _item4:int = 17;
							it4 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 7, _item4, true);
						}
						_global.game.tweenFinished();
						if(it1){
							Tween.to(it1, {scaleX:1,scaleY:1,y:it1.y+6}, 15 * _options.skipFrames);
						}
						if(it2){
							Tween.to(it2, {scaleX:1,scaleY:1,y:it2.y+6}, 15 * _options.skipFrames);
						}
						if(it3){
							Tween.to(it3, {scaleX:1,scaleY:1,y:it3.y+6}, 15 * _options.skipFrames);
						}
						if(it4){
							Tween.to(it4, {scaleX:1,scaleY:1,y:it4.y+6}, 15 * _options.skipFrames);
						}
						setScore(_global.playerGroup);
						_global.game.setHealth();
					} else 
					action(UnitType.RANGER);
				}
			}
			keyListener.four = keyListener.zero = keyListener.numzero = keyListener.h = function():void{
				if(panel.overlay.currentFrame == 1 || (panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame")) return;
				if((gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown)){
					if(gameOverlay.currentLabel == "shown_0" && (_global.playerGroup.topHealth<_global.playerGroup.topHealthMax||_global.playerGroup.leftHealth<_global.playerGroup.leftHealthMax||_global.playerGroup.rightHealth<_global.playerGroup.rightHealthMax||_global.playerGroup.bottomHealth<_global.playerGroup.bottomHealthMax)){
						if(gameOverlay.shop0.drink.enabled&&gameOverlay.shop0.drink.visible) gameOverlay.shop0.drinkClick(null);
					} else {
						if(gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].buy2.enabled&&gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].buy2.visible) forceShop(gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].buy2);
					}
				} else if(!_global.game.paused && !panel.cards.visible && !panel.info.visible && !panel.settings.visible) {
					if(keyListener.ctrl&&keyListener.shift && _options.debug.cheat){
						if(panel.overlay.currentFrame == 1) return;
						
						addText("<font color='#00ff00'>*spawn items: Sword4, Shield4, Rod, Wand</font>");
						var it1:Item;
						var it2:Item;
						var it3:Item;
						var it4:Item;
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 1) < 1){
							var _item1:int = 18;
							it1 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 1, _item1, true);
						}
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 3) < 1){
							var _item2:int = 19;
							it2 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 3, _item2, true);
						}
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 5) < 1){
							var _item3:int = 29;
							it3 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 5, _item3, true);
						}
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 7) < 1){
							var _item4:int = 31;
							it4 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 7, _item4, true);
						}
						_global.game.tweenFinished();
						if(it1){
							Tween.to(it1, {scaleX:1,scaleY:1,y:it1.y+6}, 15 * _options.skipFrames);
						}
						if(it2){
							Tween.to(it2, {scaleX:1,scaleY:1,y:it2.y+6}, 15 * _options.skipFrames);
						}
						if(it3){
							Tween.to(it3, {scaleX:1,scaleY:1,y:it3.y+6}, 15 * _options.skipFrames);
						}
						if(it4){
							Tween.to(it4, {scaleX:1,scaleY:1,y:it4.y+6}, 15 * _options.skipFrames);
						}
						setScore(_global.playerGroup);
						_global.game.setHealth();
					} else 
					action(UnitType.CLERIC);
				}
			}
			keyListener.three = keyListener.nine = keyListener.n = function():void{
				if(panel.overlay.currentFrame == 1 || (panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame")) return;
				if((gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown)){
					if(gameOverlay.currentLabel == "shown_0"){
						/*if(gameOverlay.shop0.learn.enabled&&gameOverlay.shop0.learn.visible)*/ gameOverlay.shop0.learnClick(null);
					} else {
						if(gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].buy1.enabled&&gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].buy1.visible) forceShop(gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].buy1);
					}
				} else {
					if(activeQuestion) {
						no();
						return;
					}
					if(panel.overlay.currentFrame == 1 || _global.game.paused || panel.cards.visible || panel.info.visible || panel.settings.visible) return;
					
					if(keyListener.ctrl&&keyListener.shift && _options.debug.cheat){
						if(panel.overlay.currentFrame == 1) return;
						
						addText("<font color='#00ff00'>*spawn items: Crook, Bow4, Sling, Ring</font>");
						var it1:Item;
						var it2:Item;
						var it3:Item;
						var it4:Item;
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 1) < 1){
							var _item1:int = 30;
							it1 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 1, _item1, true);
						}
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 3) < 1){
							var _item2:int = 39;
							it2 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 3, _item2, true);
						}
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 5) < 1){
							var _item3:int = 40;
							it3 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 5, _item3, true);
						}
						if(_global.game.checkItem(_global.game.unitX, _global.game.unitY, 7) < 1){
							var _item4:int = 42;
							it4 = _global.game.placeItem(_global.game.unitX, _global.game.unitY, 7, _item4, true);
						}
						_global.game.tweenFinished();
						if(it1){
							Tween.to(it1, {scaleX:1,scaleY:1,y:it1.y+6}, 15 * _options.skipFrames);
						}
						if(it2){
							Tween.to(it2, {scaleX:1,scaleY:1,y:it2.y+6}, 15 * _options.skipFrames);
						}
						if(it3){
							Tween.to(it3, {scaleX:1,scaleY:1,y:it3.y+6}, 15 * _options.skipFrames);
						}
						if(it4){
							Tween.to(it4, {scaleX:1,scaleY:1,y:it4.y+6}, 15 * _options.skipFrames);
						}
						setScore(_global.playerGroup);
						_global.game.setHealth();
					} else 
					
					action(UnitType.WIZARD);
				}
			}
			
			
			keyListener.r = function():void{
				if(keyListener.ctrl&&keyListener.shift && _options.debug.cheat && _global.game.level<4){
					addText("<font color='#00ff00'>*summon the tavern</font>");
					descendPressed();
					return;
				}
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(panel.cards.visible){
					cardsCloseClick(null);
				} else action("card_btn");
			}
			keyListener.g = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(keyListener.ctrl&&keyListener.shift && _options.debug.cheat){
					if(panel.overlay.currentFrame == 1) return;
					addText("<font color='#00ff00'>*gain 1000 gold and 10000 exp to each unit.</font>");
					_global.game.score+=1000;
					_global.game.topExp+=10000;_global.playerGroup.topUnit.gainExperience(10000);
					_global.game.leftExp+=10000;_global.playerGroup.leftUnit.gainExperience(10000);
					_global.game.rightExp+=10000;_global.playerGroup.rightUnit.gainExperience(10000);
					_global.game.bottomExp+=10000;_global.playerGroup.bottomUnit.gainExperience(10000);
					setScore(_global.playerGroup);
					_global.game.setHealth();
				} else if(panel.settings.visible) {
					settingsCloseClick(null);
				} else action("settings_btn");
			}
			/*keyListener.o = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(_global.shell.scoreOverlay){
					if(!_global.shell.scoreOverlay.contains(_global.shell.loadingMc) || _options.offline) _global.shell.scoreCloseClick();
				} else action("hiscores_btn");
			}*/
			keyListener.t = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(panel.overlay.currentFrame == 1 || !gameOverlay.idle || _global.game.paused || panel.cards.visible || panel.info.visible || panel.settings.visible) return;// 
				
				if(panel.tavern_btn.x == -50){
					action("tavern_btn");
				} else {
					SoundEffect.negative();
				}
			}
			
			keyListener.p = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(panel.overlay.currentFrame == 1 || !gameOverlay.idle) return;
				if(!_global.game.paused) {addText("<font color='#00ff00'>*game paused.</font>");_global.game.paused = true} else {addText("<font color='#00ff00'>*unpaused.</font>");_global.game.paused = false;}
			}
			
			keyListener.esc = function():void{
				if(_global._stage.displayState==StageDisplayState.FULL_SCREEN_INTERACTIVE||_global._stage.displayState==StageDisplayState.FULL_SCREEN) return;
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") {
					if(panel.overlay.globalScoreBrowser.cancelFunction != null) panel.overlay.globalScoreBrowser.cancelFunction(null);
					return;
				}
				if(panel.settings.visible) {
					settingsCloseClick(null);
					return;
				}
				if(gameOverlay.currentLabel == "king") gameOverlay.intro.doneClick(null);
				if((gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown)) {gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].doneClick(null);return;}
				else if(gameOverlay.currentLabel.substr(0,9)=="show_shop") {gameOverlay["shop"+gameOverlay.currentLabel.substr(10)].doneClick(null);return;}
				if(_global.shell.closeBtn){
					if(_global.shell.closeBtn.hasEventListener(MouseEvent.CLICK)) {
						_global.shell.removeScoreBoards();
						return;
					}
				}
				if(panel.cards.visible) {
					cardsCloseClick(null);
					return;
				}
				if(panel.overlay.currentFrame == 1){
					panel.overlay.exec(panel.overlay.index);
					return;
				}
				if(activeQuestion == questions[0] || tutorialState) {
					tutorialState = 0;
					removeQuestion();
					_global.game.resetSectors();
					if(knightAction == Action.ATTACK && _global.game.playerGroup.shield.visible) Tween.delay(10*_options.skipFrames, action, UnitType.KNIGHT);
					cancel();
					return;
				}
				if(!panel.cards.visible && !activeQuestion) {
					if(_global.game.schedule == "endgame") consoleReset(new MouseEvent(MouseEvent.CLICK)) else consoleClick(new MouseEvent(MouseEvent.CLICK));
				}
				//consoleClick(null);
			}
			keyListener.up = keyListener.w = keyListener.i = keyListener.numeight = function():void{//trace("keyListener.up", panel.settings.visible, panel.settings.position,resurrects,_options.revive )
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(_global.shell.scoreOverlay){_global.shell.removeScoreBoards();return;}
				if(panel.settings.visible){//panel.settings.keyInUse = true;
					panel.settings.position -= 1; if(panel.settings.position<0) panel.settings.position=panel.settings.positions;//-((resurrects||_options.revive)?1:0);
					panel.settings.update();
					return;
				}
				if(gameOverlay.currentLabel == "king") {
					gameOverlay.intro.upClick();
					return;
				}
				if((gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown)||gameOverlay.currentLabel.substr(0,9)=="show_shop") return;
				if(panel.overlay.currentFrame == 1){
					panel.overlay.index-=1;
					if(panel.overlay.index==1&&Local.vars.slot0) panel.overlay.index-=1;
					if(panel.overlay.index<((Local.vars.slot0)?0:1)) panel.overlay.index = panel.overlay.mcs.length-1;
					panel.overlay.hideMcs();
					panel.overlay.mcs[panel.overlay.index].visible = true;
					if(_global.panel.panel.cards.visible) {//_global.panel.cardsCloseClick();
						_global.shell.track("CARDS up");
					} else if(panel.info.visible) keyListener.pageup();
					return;
				}
				if(panel.cards.visible) {
					//cardsCloseClick(null);
					return;
				}
				_global.game.forceMove(_global.game.tweenObj.x,_global.game.tweenObj.y+4, true);
			}
			keyListener.down = keyListener.x = keyListener.less = keyListener.numtwo = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(_global.shell.scoreOverlay){_global.shell.removeScoreBoards();return;}
				if(panel.settings.visible){//panel.settings.keyInUse = true;
					panel.settings.position += 1; if(panel.settings.position>panel.settings.positions/*(panel.settings.positions-((resurrects||_options.revive)?1:0))*/) panel.settings.position=0;
					panel.settings.update();
					return;
				}
				if(gameOverlay.currentLabel == "king") {
					gameOverlay.intro.askClick(null);
					return;
				}
				if((gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown) || gameOverlay.currentLabel.substr(0,9)=="show_shop") return;
				if(panel.overlay.currentFrame == 1){
					panel.overlay.index+=1;
					if(panel.overlay.index==1&&Local.vars.slot0) panel.overlay.index +=1;
					if(panel.overlay.index>panel.overlay.mcs.length-1) panel.overlay.index = (Local.vars.slot0)?0:1;
					panel.overlay.hideMcs();
					panel.overlay.mcs[panel.overlay.index].visible = true;
					if(_global.panel.panel.cards.visible) {
						_global.shell.track("CARDS down");
					} else if(panel.info.visible) keyListener.pagedown();
					return;
				}
				if(panel.cards.visible) {
					//cardsCloseClick(null);
					return;
				}
				/*if(gameOverlay.idle && !_global.game.paused)*/ _global.game.forceMove(_global.game.tweenObj.x,_global.game.tweenObj.y-4, true);
			}
			keyListener.left = keyListener.a = keyListener.j = keyListener.numfour = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(_global.shell.scoreOverlay){_global.shell.removeScoreBoards();return;}
				if((gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown)||gameOverlay.currentLabel.substr(0,9)=="show_shop") return;
				if(panel.settings.visible){//panel.settings.keyInUse = true;
					if(panel.settings.position == 0) panel.settings.speedClick(null, -1)
						else if(panel.settings.position == 1) panel.settings.musicClick(null, -1)
						else if(panel.settings.position == 2) panel.settings.soundClick(null, -1)
						else if(panel.settings.position == 3) panel.settings.scanClick(null)
						else if(panel.settings.position == 4) panel.settings.tutClick(null)
						else if(panel.settings.position == 5) panel.settings.introClick(null)
						else if(panel.settings.position == 6) panel.settings.difficultyClick(null);
					//panel.settings.update();
					return;
				}
				if(gameOverlay.currentLabel == "king"){
					if(panel.profile.currentLabel == Slot.LEFT) gameOverlay.intro.update("bottom");
					else if(panel.profile.currentLabel == Slot.BOTTOM) gameOverlay.intro.update("right");
					else if(panel.profile.currentLabel == Slot.RIGHT) gameOverlay.intro.update("top");
					else if(panel.profile.currentLabel == Slot.TOP) gameOverlay.intro.update("left");
					return;
				}
				if(panel.overlay.currentFrame == 1) {
					if(panel.info.visible){
						if(infoUnit.currentFrame>1){
							infoUnit.prevFrame();
						}
					} else if(_global.panel.panel.cards.visible) {
						_global.shell.track("CARDS left");
					} /*else if(panel.overlay.index<2 && (Local.vars.slot0 || (Local.vars.slot1&&_options.debug.cheat))){
						panel.overlay.hideMcs();
						panel.overlay.btns[panel.overlay.index].visible = false;
						if(panel.overlay.index==1) panel.overlay.index = 0 else panel.overlay.index = 1;
						panel.overlay.mcs[panel.overlay.index].visible = true;
						panel.overlay.btns[panel.overlay.index].visible = true;
					} */else if(panel.overlay.globalScoreBrowser.id>0 && panel.overlay.globalScoreBrowser.bgr.daily.visible){
						updateGlobalScoreBrowser(panel.overlay.globalScoreBrowser.id, -1);
					}
					return;
				}
				_global.game.forceMove(_global.game.tweenObj.x+4,_global.game.tweenObj.y, true);
			}
			keyListener.right = keyListener.l = keyListener.d = keyListener.numsix = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(_global.shell.scoreOverlay){_global.shell.removeScoreBoards();return;}//
				if((gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown)||gameOverlay.currentLabel.substr(0,9)=="show_shop") return;
				if(panel.settings.visible){//panel.settings.keyInUse = true;
					if(panel.settings.position == 0) panel.settings.speedClick(null)
						else if(panel.settings.position == 1) panel.settings.musicClick(null)
						else if(panel.settings.position == 2) panel.settings.soundClick(null)
						else if(panel.settings.position == 3) panel.settings.scanClick(null)
						else if(panel.settings.position == 4) panel.settings.tutClick(null)
						else if(panel.settings.position == 5) panel.settings.introClick(null)
						else if(panel.settings.position == 6) panel.settings.difficultyClick(null);
					//panel.settings.update();
					return;
				}
				if(gameOverlay.currentLabel == "king"){
					if(panel.profile.currentLabel == Slot.LEFT) gameOverlay.intro.update("top");
					else if(panel.profile.currentLabel == Slot.BOTTOM) gameOverlay.intro.update("left");
					else if(panel.profile.currentLabel == Slot.RIGHT) gameOverlay.intro.update("bottom");
					else if(panel.profile.currentLabel == Slot.TOP) gameOverlay.intro.update("right");
					return;
				}
				if(panel.overlay.currentFrame == 1) {
					if(panel.info.visible){
						if(infoUnit.currentFrame<3){
							infoUnit.nextFrame();
						}
					} else if(_global.panel.panel.cards.visible) {
						_global.shell.track("CARDS right");
					}/* else if(panel.overlay.index<2 && (Local.vars.slot0 || (Local.vars.slot1&&_options.debug.cheat))){
						panel.overlay.hideMcs();
						panel.overlay.btns[panel.overlay.index].visible = false;
						if(panel.overlay.index==1) panel.overlay.index = 0 else panel.overlay.index = 1;
						//panel.overlay.hideMcs();
						panel.overlay.mcs[panel.overlay.index].visible = true;
						panel.overlay.btns[panel.overlay.index].visible = true;
					}*/ else if(panel.overlay.globalScoreBrowser.id<11 && panel.overlay.globalScoreBrowser.bgr.daily.visible){
						updateGlobalScoreBrowser(panel.overlay.globalScoreBrowser.id, 1);
					}
					return;
				}
				_global.game.forceMove(_global.game.tweenObj.x-4,_global.game.tweenObj.y, true);
			}
			
			keyListener.u = keyListener.q = keyListener.numseven = function():void{//trace("GG",gameOverlay.currentLabel.substr(0,9));
				if(keyListener.ctrl&&keyListener.shift){//trace(_global._stage.quality);
					if(_global._stage.quality.toLowerCase() == StageQuality.LOW.toLowerCase()){
						addText("<font color='#00ff00'>set quality: MEDIUM</font>");
						_global._stage.quality = StageQuality.MEDIUM;
					} else if(_global._stage.quality.toLowerCase() == StageQuality.MEDIUM.toLowerCase()){
						addText("<font color='#00ff00'>set quality: HIGH</font>");
						_global._stage.quality = StageQuality.HIGH;
					} else if(_global._stage.quality.toLowerCase() == StageQuality.HIGH.toLowerCase()){
						addText("<font color='#00ff00'>set quality: BEST</font>");
						_global._stage.quality = StageQuality.BEST;
					} else /*if(_global._stage.quality == StageQuality.BEST)*/{
						addText("<font color='#00ff00'>set quality: LOW</font>");
						_global._stage.quality = StageQuality.LOW;
					}
					return;
				}
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(gameOverlay.currentLabel.substr(0,9)=="show_shop") return;
				if(!gameOverlay.idle || _global.game.paused || panel.cards.visible || panel.info.visible || panel.settings.visible) return;//panel.overlay.currentFrame == 1
				_global.game.forceMove(_global.game.tweenObj.x+4,_global.game.tweenObj.y+4, true);
			}
			keyListener.o = keyListener.e = keyListener.numnine = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(gameOverlay.currentLabel.substr(0,9)=="show_shop") return;
				if(!gameOverlay.idle || _global.game.paused || panel.cards.visible || panel.info.visible || panel.settings.visible) return;//panel.overlay.currentFrame == 1
				_global.game.forceMove(_global.game.tweenObj.x-4,_global.game.tweenObj.y+4, true);
			}
			keyListener.greater = keyListener.c = keyListener.numthree = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(gameOverlay.currentLabel.substr(0,9)=="show_shop") return;
				if(!gameOverlay.idle || _global.game.paused || panel.cards.visible || panel.info.visible || panel.settings.visible) return;//panel.overlay.currentFrame == 1
				_global.game.forceMove(_global.game.tweenObj.x-4,_global.game.tweenObj.y-4, true);
			}
			keyListener.m = keyListener.z = keyListener.numone = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(gameOverlay.currentLabel.substr(0,9)=="show_shop") return;
				if(!gameOverlay.idle || _global.game.paused || panel.cards.visible || panel.info.visible || panel.settings.visible) return;//panel.overlay.currentFrame == 1
				_global.game.forceMove(_global.game.tweenObj.x+4,_global.game.tweenObj.y-4, true);
			}
			
			keyListener.enter = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") {
					panel.overlay.globalScoreBrowser.enterFunction(null);
					return;
				}
				if(activeQuestion && !panel.overlay.visible) {
					yes();
					return;
				}
				if((gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown&&gameOverlay.idle)){
					if(gameOverlay.currentLabel == "shown_0" || gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].back_btn.x == 112){
						keyListener.space();
					} else {
						gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].doneClick();
					}
				} else if(panel.overlay.currentFrame == 1){
					if(panel.settings.visible){
						settingsCloseClick(null);
					} else if(panel.cards.visible) {
						cardsCloseClick(null);
					} else panel.overlay.exec(panel.overlay.index);
				} else keyListener.space();
			}
			
			keyListener.space = keyListener.b = function():void{//trace(panel.overlay.globalScoreBrowser.visible, panel.overlay.currentFrame)
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") {
					if(activeQuestion && !panel.overlay.visible) no();// text field focus?
					return;
				}
				if(panel.overlay.currentFrame == 1 /*|| panel.overlay.currentFrame == 9*/){
					if(panel.settings.visible){
						if(panel.settings.position == 0) panel.settings.speedClick(null)
							else if(panel.settings.position == 1) panel.settings.musicClick(null)
							else if(panel.settings.position == 2) panel.settings.soundClick(null)
							else if(panel.settings.position == 3) panel.settings.scanClick(null)
							else if(panel.settings.position == 4) panel.settings.tutClick(null)
							else if(panel.settings.position >= 5) {
								if(panel.settings.intr.currentFrame == 1) panel.settings.introClick(null)
								else if(panel.settings.intr.bonus<4) panel.settings.intr.clicked(null) else {panel.settings.intr.clicked(null); panel.settings.intr.gotoAndStop(1);}
							}
						panel.settings.update();
						return;
					}
					_global.shell.track(panel.overlay.currentFrame, panel.settings.position, panel.overlay.index)
					panel.overlay.exec(panel.overlay.index);
					return;
				}
				if(activeQuestion && !panel.overlay.visible) {_global.shell.track("??!")
					no();
					return;
				}
				if(keyListener.ctrl&&keyListener.shift && _options.debug.cheat){
					if(_global.shell._stats.visible) {addText("<font color='#00ff00'>*stats off</font>"); _global.shell.removeChild(_global.shell._stats); _global.shell._stats.visible = false; _options.debug.trace = false; BaseSetting.debug = false;}
					else {_global.shell._stats.visible = true; _global.shell.addChild(_global.shell._stats); addText("<font color='#00ff00'>*stats on</font>"); _options.debug.trace = true;BaseSetting.debug = true;}
					//addText("<font color='#00ff00'>*debugging</font>");
					return;
				}
				if(!gameOverlay.idle || _global.game.paused) return;
				if(gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown&&gameOverlay.idle) {
					if(!shop) {gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].doneClick();return;}
					gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].backClick();
					/*if(shop.prev || shop.warning_mc.visible){
						gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].backClick();
					} else {
						gameOverlay["shop"+gameOverlay.currentLabel.substr(6)].doneClick();
					}*/
					return;
				}
				if(gameOverlay.currentLabel == "king"){
					gameOverlay.intro.doneClick(null);
					return;
				}
				//if(tutorialState) return;
				if(_global.game.itemsMap[_global.game.unitY*3+_global.game.innerY+1][_global.game.unitX*3+_global.game.innerX+1].item && gameOverlay.idle)
					_global.game.forceClick(_global.game.itemsMap[_global.game.unitY*3+_global.game.innerY+1][_global.game.unitX*3+_global.game.innerX+1].item);
			}
			
			keyListener.pageup = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(panel.overlay.currentFrame == 1) {
					if(panel.info.visible){
						if(infoScrollPane.verticalScrollPosition-200 > 0){
							infoScrollPane.verticalScrollPosition-=200;
						} else {
							infoScrollPane.verticalScrollPosition=0;
						}
					}
				}
			}
			keyListener.pagedown = function():void{
				if(panel.overlay.globalScoreBrowser.visible && _global.game.schedule == "endgame") return;
				if(panel.overlay.currentFrame == 1) {
					if(panel.info.visible){
						if(infoScrollPane.verticalScrollPosition+200 < infoScrollPane.maxVerticalScrollPosition){
							infoScrollPane.verticalScrollPosition+=200;
						}
					}
				}
			}
			
			panel.overlay.globalScoreBrowser.entry.visible = false;
			panel.overlay.globalScoreBrowser.entry.enemy_top.stop();
			panel.overlay.globalScoreBrowser.entry.enemy_left.stop();
			panel.overlay.globalScoreBrowser.entry.enemy_right.stop();
			panel.overlay.globalScoreBrowser.entry.enemy_bottom.stop();
			
			welcomeText();
		}
		private function updateGlobalScoreBrowser(globalScoreId:int, offset:int):void{
			if(!_global.shell.setGlobalScoreId("score_", true)) return;
			panel.overlay.globalScoreBrowser.id = globalScoreId + offset;
			switch(panel.overlay.globalScoreBrowser.id){
				case 0:
					_global.shell.setGlobalScoreId("default_", false, false);
					_global.shell.setGlobalScoreId("score_");
					break;
				case 1:
					_global.shell.setGlobalScoreId("default_", false, false);
					_global.shell.setGlobalScoreId("frags_");
					break;
				case 2:
					_global.shell.setGlobalScoreId("default_", false, false);
					_global.shell.setGlobalScoreId("gold_");
					break;
				case 3:
					_global.shell.setGlobalScoreId("monthly_", false, false);
					_global.shell.setGlobalScoreId("score_");
					break;
				case 4:
					_global.shell.setGlobalScoreId("monthly_", false, false);
					_global.shell.setGlobalScoreId("frags_");
					break;
				case 5:
					_global.shell.setGlobalScoreId("monthly_", false, false);
					_global.shell.setGlobalScoreId("gold_");
					break;
				case 6:
					_global.shell.setGlobalScoreId("weekly_", false, false);
					_global.shell.setGlobalScoreId("score_");
					break;
				case 7:
					_global.shell.setGlobalScoreId("weekly_", false, false);
					_global.shell.setGlobalScoreId("frags_");
					break;
				case 8:
					_global.shell.setGlobalScoreId("weekly_", false, false);
					_global.shell.setGlobalScoreId("gold_");
					break;
				case 9:
					_global.shell.setGlobalScoreId("daily_", false, false);
					_global.shell.setGlobalScoreId("score_");
					break;
				case 10:
					_global.shell.setGlobalScoreId("daily_", false, false);
					_global.shell.setGlobalScoreId("frags_");
					break;
				case 11:
					_global.shell.setGlobalScoreId("daily_", false, false);
					_global.shell.setGlobalScoreId("gold_");
					break;
				case 12:
				default:
					//_global.shell.setGlobalScoreId(_global.shell.globalScoreTime+"_");
					_global.shell.setGlobalScoreId("default_", false, false);
					_global.shell.setGlobalScoreId("score_");
					break;
			}
		}
		
		private function flagRoll(evt:MouseEvent):void{
			var _name:String = evt.currentTarget.name;
			switch(_name){
				case "black_flag":
					if(evt.currentTarget.scaleX>0)
						updateTooltip("<font color='#ffffff'>First Place Record</font> is held by <font color='#ffffff'>"+_global.shell.overallHiScore1Name+"</font>.");
					else updateTooltip("The <font color='#ffffff'>First Place Record</font> is held by <font color='#ffffff'>You!</font>");
					break;
				case "dark_flag":
					if(evt.currentTarget.scaleX>0)
						updateTooltip("<font color='#eeeeee'>Second Place Record</font> is held by <font color='#cccccc'>"+_global.shell.overallHiScore2Name+"</font>");
					else updateTooltip("The <font color='#eeeeee'>Second Place Record</font> is held by <font color='#ffffff'>You!</font>");
					break;
				case "red_flag":
					if(evt.currentTarget.scaleX>0)
						updateTooltip("<font color='#dddddd'>Third Place Record</font> is held by <font color='#cccccc'>"+_global.shell.overallHiScore3Name+"</font>");
					else updateTooltip("The <font color='#dddddd'>Third Place Record</font> is held by <font color='#ffffff'>You!</font>");
					break;
				case "yellow_flag":
					if(evt.currentTarget.scaleX>0)
						updateTooltip("<font color='#ffab2c'>Monthly Hi-Score</font> is held by <font color='#cccccc'>"+_global.shell.monthlyHiScoreName+"</font>");
					else updateTooltip("The <font color='#ffab2c'>Monthly Hi-Score</font> is held by <font color='#ffffff'>You!</font>");
					break;
				case "blue_flag":
					if(evt.currentTarget.scaleX>0)
						updateTooltip("<font color='#3895e3'>Weekly Hi-Score</font> is held by <font color='#cccccc'>"+_global.shell.weeklyHiScoreName+"</font>");
					else updateTooltip("The <font color='#3895e3'>Weekly Hi-Score</font> is held by <font color='#ffffff'>You!</font>");
					break;
				case "green_flag":
				default:
					if(evt.currentTarget.scaleX>0)
						updateTooltip("<font color='#25aF2F'>Daily Hi-Score</font> is held by <font color='#cccccc'>"+_global.shell.dailyHiScoreName+"</font>");
					else updateTooltip("The <font color='#25aF2F'>Daily Hi-Score</font> is held by <font color='#ffffff'>You!</font>");
					break;
			}
		}
		private function flagOut(evt:MouseEvent):void{
			updateTooltip();
		}
		
		private function yes(evt:MouseEvent = null):void{
			if(panel.console.yes_btn.filters.length) return;
			if(activeQuestion) {
				removeQuestion("yes");
			}
		}
		private function no(evt:MouseEvent = null):void{
			if(activeQuestion) {
				removeQuestion("no");
			}
		}
		
		private function showOrder():void{
			for(var i:int = 1; i < 5; i++){
				panel["order_"+i].visible = true;
			}
		}
		private function hideOrder():void{
			for(var i:int = 1; i < 5; i++){
				panel["order_"+i].visible = false;
			}
		}
		private function closeInfoPanelClick(evt:Event = null):void{
			if(panel.info_btn.rect.currentFrame == 2) {
				//if(tutorialState != 1)
				panel.info_btn.rect.gotoAndStop(1);
				infoCloseClick();
				infoBars = false;
			}
			//trace(_global.game.schedule, panel.overlay.currentFrame)
			if(_global.game.schedule == "game" && panel.overlay.currentFrame!=1) {
				panel.info_btn.rect.visible = true;
				infoBars = true;
				panel.info.visible = false;
				showOrder();
				if(evt){action("info_btn");}
			} else {
				panel.info_btn.rect.gotoAndStop(1);
				infoCloseClick();
				infoBars = false;
			}
		}
		
		public function cancel():void{_global.shell.track("cancel")
			if(gameOverlay.currentLabel.substr(0,6)=="shown_"&&shopShown) return;//@@
			tutTooltip();
			panel.card_btn.visible = true;
			panel.hiscores_btn.visible = true;
			panel.settings_btn.visible = true;
			//panel.quit_btn.visible = true;
			_global.game.locked = false;
			hideOverlay();
			removeQuestion("no");
			SoundEffect.hide();
			activeQuestion = null;//trace(_global.playerGroup.topUnit.alpha);
			if(!_global.playerGroup.topUnit.alpha) playEntranceAnimation();
			if(_global.game.playerGroup.alpha<1) Tween.to(_global.game.playerGroup, {alpha:1}, 5*_options.skipFrames);
		}
		public function cancelTutorial():void{//trace("cancelTutorial")
			if(_options.tutorial) {
				texts.pop();
				addText("<font color='#999999'>Wizard cast a light spell and revealed the area.</font>");
			}
			cancel();
			showOrder();
			if(Base.location == "foumartgames") Tracker.trackEvent("Tutorial", "Cancel", _global.game.getTime());
			//addText("Tutorial cancelled.");
			//addText(commandsText);
			panel.dusc_mc.gotoAndStop(1);
			panel.dusc_mc.gold_txt.htmlText="<b>0</b>";
			tutorialState = 0;
			_global.game.resetSectors();
			if(knightAction == Action.ATTACK && _global.game.playerGroup.shield.visible) Tween.delay(10*_options.skipFrames, action, UnitType.KNIGHT);
			showScore(false);
			panel.tavern_btn.prev = true;
			Tween.delay(15, _global.game.showTavernButton);
			//_global.game.showTavernButton();
		}
		public function mainMenu():void{_global.shell.track("mainMenu")
			hideOrder();
			showOverlay(-1);
			if(!_global.game.panel.panel.overlay.globalScoreBrowser.visible) _global.game.panel.panel.overlay.globalScoreBrowser.visible = true;
		}
		private function tutorialQuestion():void{//trace("tutorialQuestion", 1)
			if(panel.console.height>100) consoleClick(new MouseEvent(MouseEvent.CLICK));
			//showOrder();
			tutorialState = 1;
			_global.game.locked = true;
			gameOverlay.gotoAndPlay("light");
			SoundEffect.light();
			_global.game.locked = false;
			_global.game.tweenFinished();
			_global.game.locked = true;
			Tween.delay(10, function():void{//*_options.skipFrames
						panel.quit_btn.visible = true;
				Tween.delay(15, function():void{//*_options.skipFrames
					if(!activeQuestion){
						activeQuestion = questions[6];
						addQuestion(activeQuestion.question);
						panel.info.items_mc.visible = false;
					}
				});
			});
		}
		public function freeFragsQuestion():void{_global.shell.track("freeFragsQuestion", tutorialState,_options.skipFrames )
			showOrder();
			tutorialState = 2;
			_global.game.locked = true;
			Tween.delay(15*_options.skipFrames, function():void{
				_global.game.locked = false;
				_global.game.forceMove(_global.game.tweenObj.x,_global.game.tweenObj.y+4);
				_global.game.locked = true;
			});
			Tween.delay(150*_options.skipFrames, function():void{
				Tween.to(gameOverlay, {alpha:1}, 15*_options.skipFrames);
				gameOverlay.gotoAndPlay("prep_"+tutorialState);
				_global.game.locked = true;
				//tutTooltip("<font color='#888888'>Activate Knight's newly acquired </font>Defend skill</font>");
				tutTooltip("<font color='#999999'>Draw the Knight's Shield to raise his </font><font color='#cccccc'>Guard</font><font color='#999999'>.</font>");
			});
		}
		public function moreFragsQuestion():void{_global.shell.track("moreFragsQuestion", tutorialState);
			panel.card_btn.visible = true;
			panel.hiscores_btn.visible = true;
			panel.settings_btn.visible = true;
			panel.quit_btn.visible = true;
			tutorialState = 3;
			_global.game.locked = true;
			if(knightAction == Action.ATTACK){
				Tween.delay(10*_options.skipFrames, function():void{
					_global.game.locked = false;
					action(UnitType.KNIGHT);
					_global.game.locked = true;
				});
			}
			Tween.delay(30*_options.skipFrames, function():void{
				_global.game.locked = false;
				_global.game.selectedUnit = _global.game.unitsMap[_global.game.posY][_global.game.posX + 1].group.bottomUnit;
				_global.game.forceMove(_global.game.tweenObj.x-4,_global.game.tweenObj.y);
				_global.game.locked = true;
			});
			Tween.delay(160*_options.skipFrames, function():void{
				_global.game.locked = false;
				_global.game.forceMove(_global.game.tweenObj.x-4,_global.game.tweenObj.y);
				_global.game.locked = true;
			});
			Tween.delay(280*_options.skipFrames, function():void{
				Tween.to(gameOverlay, {alpha:1}, 15*_options.skipFrames);
				gameOverlay.gotoAndPlay("prep_"+tutorialState);
				_global.game.locked = true;
				tutTooltip("<font color='#999999'>Prepare the </font><font color='#cccccc'>Ice Bolt spell</font><font color='#999999'> to strike enemies.</font>");
			});
		}
		public function evenFragsQuestion():void{
			//_global.shell.track("evenFragsQuestion", tutorialState)
			tutorialState = 4;
			_global.game.locked = true;
			if(knightAction != Action.ATTACK){
				Tween.delay(5*_options.skipFrames, function():void{
					_global.game.locked = false;
					action(UnitType.KNIGHT);
					_global.game.locked = true;
				});
			}
			if(wizardAction == Action.ATTACK){
				Tween.delay(10*_options.skipFrames, function():void{
					_global.game.locked = false;
					action(UnitType.WIZARD);
					_global.game.locked = true;
				});
			}
			Tween.delay(20*_options.skipFrames, function():void{
				_global.game.locked = false;
				_global.game.selectedUnit = _global.game.unitsMap[_global.game.posY+1][_global.game.posX].group.rightUnit;
				_global.game.forceMove(_global.game.tweenObj.x,_global.game.tweenObj.y-4);
				_global.game.locked = true;
			});
			Tween.delay(70*_options.skipFrames, function():void{
				gameOverlay.gotoAndPlay("prep_3_1");
			});
			Tween.delay(200*_options.skipFrames, function():void{
				_global.game.locked = false;
				action(UnitType.KNIGHT);
				_global.game.locked = true;
			});
			Tween.delay(225*_options.skipFrames, function():void{
				gameOverlay.gotoAndPlay("prep_"+tutorialState);
				_global.game.locked = true;
				tutTooltip("<font color='#cccccc'> Aim </font><font color='#999999'>at a certain enemy unit to wipe it out.</font>");
				//_global.game.selectedUnit.critical("<font color='#ff9999'>!!!</font>",5);
			});
		}
		public function lastFragsQuestion():void{//_global.shell.track("lastFragsQuestion")
			tutorialState = 5;
			_global.game.locked = true;
			if(knightAction == Action.ATTACK){
				Tween.delay(5*_options.skipFrames, function():void{
					_global.game.locked = false;
					action(UnitType.KNIGHT);
					_global.game.locked = true;
				});
			}
			if(rangerAction == Action.ATTACK){
				Tween.delay(10*_options.skipFrames, function():void{
					_global.game.locked = false;
					action(UnitType.RANGER);
					_global.game.locked = true;
				});
			}
			Tween.delay(25*_options.skipFrames, function():void{
				_global.game.locked = false;
				_global.game.selectedUnit = _global.game.unitsMap[_global.game.posY][_global.game.posX - 1].group.rightUnit;
				_global.game.forceMove(_global.game.tweenObj.x+4,_global.game.tweenObj.y);
				_global.game.locked = true;
			});
			Tween.delay(150*_options.skipFrames, function():void{
				_global.game.locked = false;
				_global.game.forceMove(_global.game.tweenObj.x+4,_global.game.tweenObj.y);
				_global.game.locked = true;
			});
			Tween.delay(280*_options.skipFrames, function():void{
				Tween.to(gameOverlay, {alpha:1}, 15*_options.skipFrames);
				gameOverlay.gotoAndPlay("prep_"+tutorialState);
				_global.game.locked = true;
				tutTooltip("<font color='#999999'>  Only the Cleric's skill works instantly.</font>");
			});
		}
		public function goodLuckQuestion():void{
			_global.game.resetSectors();
			_global.game.locked = false;
			Tween.delay(30*_options.skipFrames, function(){
				gameOverlay.visible = false;
				panel.overlay.visible = false;
				tutorialState = 0;
			});
		}
		public function blankQuestion(nextFunction:Function, _index:int = -1):void{_global.shell.track("blankQuestion", tutorialState, panel.overlay.currentFrame)
			keyListener.start();
			if(!activeQuestion){
				activeQuestion = questions[5];
				addQuestion(activeQuestion.question);
				activeQuestion.yes = nextFunction;
				activeQuestion.no = nextFunction;
			}
			showOverlay(_index);
			panel.overlay.visible = true;
			panel.overlay.buttonMode = true;
			if(!panel.overlay.hasEventListener(MouseEvent.CLICK)) panel.overlay.addEventListener(MouseEvent.CLICK, overlayClick);
		}
		
		private function showOverlay(_index:int = -1):void{_global.shell.track("showOverlay:"+_index, tutorialState, panel.overlay.currentFrame)
			//if(_index<1) panel.overlay.gotoAndStop(1);
			if(_index==-1) {
				panel.overlay.visible = true;
				panel.overlay.addEventListener(MouseEvent.CLICK, overlayClick);
			}
			tutorialState = _index;
			if(!gameOverlay) {
				gameOverlay = new GameOverlay();
				gameOverlay.mouseEnabled = false;
				if(!_options.tutorial) gameOverlay.mouseChildren = false;
				_global.game.overlay.addChild(gameOverlay);
				//SoundEffect.drawSpell();
			} else {
				gameOverlay.visible = true;
				if(_options.tutorial) gameOverlay.mouseChildren = true;
				Tween.to(gameOverlay, {alpha:1}, 15*_options.skipFrames);
				SoundEffect.drawSpell();
				if(tutorialState==1){
					panel.info_btn.rect.visible = true;
					panel.info_btn.rect.gotoAndStop(2);
				}
			}
			if(!tutorialState && _options.intro){
				gameOverlay.gotoAndPlay("king");
				if(!SoundFX.isNowPlaying("FX_tempt")) {
					SoundFX.skipMusic("FX_tempt", 1);
				}
			} else {
				if(!_options.intro && gameOverlay.currentLabel == "show_-1") {
					gameOverlay.gotoAndPlay("king");
					Tween.delay(1, gameOverlay.intro.update, ["","top","right","bottom","left"][panel.settings.intr.bonus]);
					Tween.delay(2, gameOverlay.gotoAndPlay, "show_"+tutorialState);
					Tween.delay(3, printWhoGotBonus);
					return;
				}
				gameOverlay.gotoAndPlay("show_"+tutorialState);
			}
		}
		private function printWhoGotBonus():void{
			Tracker.trackEvent("Event", ["","Knight","Ranger","Cleric","Wizard"][Local.vars.bonus], _global.game.getTime());
			
			if(texts[texts.length-1].indexOf("Select")>-1) texts.pop();
			if(Local.vars.bonus==1){
				addText("<font color='#ffffff'>Knight got Power Gloves! +30% to Critical Hit chance.</font>");
			} else if(Local.vars.bonus==2){
				addText("<font color='#ffffff'>Ranger got Shade Knife! +5% Dodge, +10% Critical, +1 Dmg.</font>");
			} else if(Local.vars.bonus==3){
				addText("<font color='#ffffff'>Wizard got Robe of Vitality! +1 Health, +1 Ranged Resistance.</font>");
			} else {
				addText("<font color='#ffffff'>Cleric got Greater Ankh of Healing! +2 to Power, +3 Slots.</font>");
			}
			if(_options.tutorial){//trace(gameOverlay.currentLabel);
				addText("<font color='#00ff00'>Press Wizard to cast spell and reveal the area.</font>");
			}
		}
		private function hideOverlay():void{
			if(panel.info_btn.rect.currentFrame == 2){
				panel.info_btn.rect.visible = false;
				panel.info_btn.rect.gotoAndStop(1);
			}
			Tween.to(gameOverlay, {alpha:0}, 15*_options.skipFrames);
		}
		
		private function tutorialPressed():void{
			if(panel.console.yes_btn.filters.length) return;
			panel.overlay.gotoAndStop(tutorialState+3);
			removeQuestion();
			tutTooltip();
			addText("<font color='#6699dd'>Playing Tutorial.</font>");
			//if(Base.location == "foumartgames" || Base.domain == "localhost"){
				if(texts[texts.length-1].length>1) addText("");
				addText("<font color='#808080'><b>Knight</b>:");
				addText("<font color='#808080'>   The most skillful enemy in the party above is the <b>Wraith</b>.</font>");
				addText("<font color='#808080'>   Despite having only <font color='#999999'><b>1</b> HP</font>, it repels up to 3 physical attacks.</font>");
				addText("<font color='#808080'>   I'm able to break through Wraith's guard with a strong hit.</font>");
			//}
			blankQuestion(freeFragsQuestion, tutorialState);
			//SoundEffect.drawSpell();
		}
		public function freeFragsPressed():void{
			if(panel.console.yes_btn.filters.length) return;
			gameOverlay.gotoAndStop("show_"+tutorialState);
			tutTooltip();
			if(texts[texts.length-1].indexOf("Notice the order")==-1 && texts[texts.length-2].indexOf("Notice the order")==-1/*&& (Base.location == "foumartgames" || Base.domain == "localhost")*/){
				if(texts[texts.length-1].length>1) addText("");
				addText("<font color='#808080'><b>Knight</b>:");
				addText("<font color='#808080'>   Using the shield I can block one attack every battle round.</font>");
				addText("<font color='#808080'>   When guarding there's penalty to attack speed and damage.</font>");
				addText("<font color='#808080'>   Notice my attack power and the order of action changes.</font>");
			}
			panel.overlay.gotoAndStop(tutorialState+3);
			removeQuestion();
			_global.game.locked = true;
			Tween.delay(10*_options.skipFrames, function():void{
				_global.game.locked = false;
				_global.game.locked = true;
				blankQuestion(moreFragsQuestion, tutorialState);
			});
		}
		public function moreFragsPressed():void{
			if(panel.console.yes_btn.filters.length) return;
			gameOverlay.gotoAndStop("show_"+tutorialState);
			tutTooltip();
			if(texts[texts.length-1].indexOf("can improve our")==-1 && texts[texts.length-2].indexOf("can improve our")==-1 /*&& (Base.location == "foumartgames" || Base.domain == "localhost")*/){
				if(texts[texts.length-1].length>1) addText("");
				addText("<font color='#808080'><b>Wizard</b>:");
				addText("<font color='#808080'>   The Ice Bolt spell is cast upon an entire enemy group.</font>");
				addText("<font color='#808080'>   It inflicts <b>1</b> damage to each foe. Surely there are artifacts</font>");
				addText("<font color='#808080'>   around the dungeon that can improve our skills and abilities.</font>");
			}
			panel.overlay.gotoAndStop(tutorialState+3);
			removeQuestion();
			blankQuestion(evenFragsQuestion, tutorialState);
		}
		public function evenFragsPressed():void{
			if(panel.console.yes_btn.filters.length) return;
			gameOverlay.gotoAndStop("show_"+tutorialState);
			panel.overlay.gotoAndStop(tutorialState+3);
			removeQuestion();
			blankQuestion(lastFragsQuestion, tutorialState);
			tutTooltip();
			if(texts[texts.length-1].indexOf("with heavy armor")==-1 && texts[texts.length-2].indexOf("with heavy armor")==-1 /*&& (Base.location == "foumartgames" || Base.domain == "localhost")*/){
				if(texts[texts.length-1].length>1) addText("");
				addText("<font color='#808080'><b>Ranger</b>:");
				addText("<font color='#808080'>   Some foes are resistant to ranged or magical damage.</font>");
				addText("<font color='#808080'>   The blue Slime for example has magical resistance.</font>");
				addText("<font color='#808080'>   Warriors with heavy armor can block arrows.</font>");
			}
		}
		public function lastFragsPressed():void{
			gameOverlay.gotoAndStop("show_"+tutorialState);
			panel.overlay.gotoAndStop(tutorialState+3);
			removeQuestion();
			blankQuestion(goodLuckQuestion, tutorialState);
			tutTooltip();
		}
		private function blankPressed():void{
			_global.shell.track("hm@");
		}
		private function playEntranceHelper():void{
			if(_options.tutorial){
				gameOverlay.gotoAndPlay("show_0");
				panel.overlay.gotoAndStop(3);
			} else {//trace("Case 1");
				showOrder();
				//tutorialState = 1;
				_global.game.locked = true;
				gameOverlay.gotoAndPlay("light2");
				SoundEffect.light();
				_global.game.locked = false;
				_global.game.tweenFinished();
				panel.quit_btn.visible = true;
				panel.settings_btn.visible = true;
				panel.hiscores_btn.visible = true;
				panel.card_btn.visible = true;
				
				_global.game.showTavernButton();
				
				//addText(commandsText);
				tutorialState = 0;
				_global.game.resetSectors();
				if(knightAction == Action.ATTACK && _global.game.playerGroup.shield.visible) Tween.delay(10*_options.skipFrames, action, UnitType.KNIGHT);
				cancel();
				//overlayClick();
				panel.overlay.visible = false;
				panel.overlay.buttonMode = false;
				panel.overlay.removeEventListener(MouseEvent.CLICK, overlayClick);
			}
			playEntranceAnimation();
		}
		public function playEntranceAnimation(_intro:Boolean = false, _delay:int = 0):void{//trace("playEntranceAnimation", _intro)
			if(Base.armorgames || BaseSetting.adType == "armorgames" && Base.location != "foumartgames" && !Base.local && Base.domain != "localhost"){
				panel.console.ag_logo.visible = true;
			}
			if(_intro){
				gameOverlay.gotoAndPlay("kinghide");
				if(keyListener.active) tutTooltip("<font color='#888888'>      Proceed with [</font>SPACE<font color='#888888'>]/[</font>ENTER<font color='#888888'>] keys</font>");
				Tween.delay(_delay, playEntranceHelper);
				//Tween.delay(15, panel.overlay.gotoAndStop, 3);
				if(!SoundFX.isNowPlaying("FX_main")) {
					SoundFX.skipMusic("FX_main", 0.8, 30);//65);// 29);//205);//250
				}
				Tween.delay(1, printWhoGotBonus);
				return;
			} else {
				if(!SoundFX.isNowPlaying("FX_main")) {
					SoundFX.skipMusic("FX_main", 0.8, 30, 29);
				}
			}
			gameOverlay.idle = false;
			if(!_global.playerGroup.topDeath){
				_global.playerGroup.topUnit.visible = true;
				_global.playerGroup.topUnit.x = 0;
				_global.playerGroup.topUnit.y = 0;
				Tween.to(_global.playerGroup.topUnit, {x:_global.playerGroup.topPosX, y:_global.playerGroup.topPosY, alpha:1, delay:_delay}, 10);
			}
			if(!_global.playerGroup.rightDeath){
				_global.playerGroup.rightUnit.visible = true;
				_global.playerGroup.rightUnit.x = 0;
				_global.playerGroup.rightUnit.y = 0;
				Tween.to(_global.playerGroup.rightUnit, {x:_global.playerGroup.rightPosX, y:_global.playerGroup.rightPosY, alpha:1, delay:_delay}, 10);
			}
			if(!_global.playerGroup.bottomDeath){
				_global.playerGroup.bottomUnit.visible = true;
				_global.playerGroup.bottomUnit.x = 0;
				_global.playerGroup.bottomUnit.y = 0;
				Tween.to(_global.playerGroup.bottomUnit, {x:_global.playerGroup.bottomPosX, y:_global.playerGroup.bottomPosY, alpha:1, delay:_delay}, 10);
			}
			if(!_global.playerGroup.leftDeath){
				_global.playerGroup.leftUnit.visible = true;
				_global.playerGroup.leftUnit.x = 0;
				_global.playerGroup.leftUnit.y = 0;
				Tween.to(_global.playerGroup.leftUnit, {x:_global.playerGroup.leftPosX, y:_global.playerGroup.leftPosY, alpha:1, delay:_delay}, 10, null, handleIdle, true);
			}
		}
		private function handleIdle(_idle:Boolean):void{
			gameOverlay.idle = _idle;
		}
		public function playExitAnimation():void{
			gameOverlay.idle = false;
			if(!_global.playerGroup.topDeath /*&& _global.playerGroup.topUnit.alpha == 1*/){
				_global.playerGroup.topUnit.x = _global.playerGroup.topPosX;
				_global.playerGroup.topUnit.y = _global.playerGroup.topPosY;
				Tween.to(_global.playerGroup.topUnit, {x:0, y:0,alpha:0}, 10);
			}
			if(!_global.playerGroup.rightDeath /*&& _global.playerGroup.rightUnit.alpha == 1*/){
				_global.playerGroup.rightUnit.x = _global.playerGroup.rightPosX;
				_global.playerGroup.rightUnit.y = _global.playerGroup.rightPosY;
				Tween.to(_global.playerGroup.rightUnit, {x:0, y:0,alpha:0}, 10);
			}
			if(!_global.playerGroup.bottomDeath /*&& _global.playerGroup.bottomUnit.alpha == 1*/){
				_global.playerGroup.bottomUnit.x = _global.playerGroup.bottomPosX;
				_global.playerGroup.bottomUnit.y = _global.playerGroup.bottomPosY;
				Tween.to(_global.playerGroup.bottomUnit, {x:0, y:0,alpha:0}, 10);
			}
			if(!_global.playerGroup.leftDeath /*&& _global.playerGroup.leftUnit.alpha == 1*/){
				_global.playerGroup.leftUnit.x = _global.playerGroup.leftPosX;
				_global.playerGroup.leftUnit.y = _global.playerGroup.leftPosY;
				Tween.to(_global.playerGroup.leftUnit, {x:0, y:0,alpha:0}, 10, null, handleIdle, true);
			}
		}
		public function preOverlayStraight(_loading:Boolean = false):void{
			showOrder();
			_global.game.locked = true;
			//gameOverlay.gotoAndPlay("light");
			SoundEffect.light();
			/*if(!_loading)*/ _global.game.locked = false;
			/*if(!_loading)*/ _global.game.tweenFinished();
			panel.quit_btn.visible = true;
			panel.settings_btn.visible = true;
			panel.hiscores_btn.visible = true;
			panel.card_btn.visible = true;
			
			//addText(commandsText);
			tutorialState = 0;
			_global.game.resetSectors();
			if(knightAction == Action.ATTACK && _global.game.playerGroup.shield.visible) Tween.delay(10*_options.skipFrames, action, UnitType.KNIGHT);
			if(!_loading) cancel();
			//overlayClick();
			panel.overlay.visible = false;
			panel.overlay.buttonMode = false;
			panel.overlay.removeEventListener(MouseEvent.CLICK, overlayClick);
			panel.overlay.gotoAndStop(9);
			if(!_options.intro || _loading) playEntranceAnimation();
			if(_options.tutorial && !_loading) {//trace("Case 2");
				gameOverlay.gotoAndPlay("light");
				blankQuestion(tutorialQuestion, 0);
			} else {//trace("Case 3");
				gameOverlay.gotoAndPlay("light2");
			}
			if(_global.game.playerGroup.alpha<1) Tween.to(_global.game.playerGroup, {alpha:1}, 5*_options.skipFrames);
		}
		public function preOverlayClick(_in:String):void{_global.shell.track("preOverlayClick", tutorialState, _global.game.schedule, _in);
			keyListener.active = false;
			if(_in == "load_btn" || _in == "continue_btn"){
				//(getTimer() - _global.timeStarted)*0.001/60;
				//_global.timeStarted = 
				//_global.timePlayed = 
				//_global.shell.requestGlobalScores("score", "default");
				_global.timeStarted = getTimer();
				_global.game.panel.panel.overlay.globalScoreBrowser.visible = false;
				_global.game.panel.panel.overlay.globalScoreBrowser.entry.visible = false;
				_global.game.loadGame((!Local.vars.slot0&&Local.vars.slot1)?1:0);// can select other slots here
				/*if(!Local.vars.slot0 && Local.vars.slot1){
					Local.vars.slot1 = null;
				}*/
				panel.overlay.gotoAndStop(9);
				if(!_options.intro) playEntranceAnimation();
			} else if(_in == "start_btn"){
				
				_global.game.createDungeon(true);
				
				addText("");
				addText("");
				addText("<font color='#6699dd'>Started a new game.</font>");
				addText("<font color='#808080'>("+(new Date()).toString().substring(0,19)+")</font>");
				if(Local.vars.slot1) Local.vars.slot1 = null;
				if(Local.vars.slot2) Local.vars.slot2 = null;
				_global.timePlayed = 0;
				_global.gamesPlayed ++;
				_global.timeStarted = getTimer();
				if(Base.location == "foumartgames") Tracker.trackEvent("UI", "Start game", _global.gamesPlayed);
				//_global.shell.requestGlobalScores("score", "default");
				_global.game.panel.panel.overlay.globalScoreBrowser.visible = false;
				_global.game.panel.panel.overlay.globalScoreBrowser.entry.visible = false;
				_global.shell.clearCards();
				if(_options.intro){
					//if(_options.clearCards) _global.shell.clearCards();
					gameOverlay.gotoAndPlay("king");
					panel.quit_btn.visible = true;
					panel.settings_btn.visible = true;
					if(!SoundFX.isNowPlaying("FX_tempt")) {
						SoundFX.skipMusic("FX_tempt", 1);
					}
					addText("<font color='#00ff00'>Select a hero from your party to receive starting bonus.</font>");
					//addText("");
				} else if(!_options.tutorial){
					gameOverlay.gotoAndPlay("king");
					Tween.delay(1, gameOverlay.intro.update, ["","top","right","bottom","left"][panel.settings.intr.bonus]);
					Tween.delay(2, preOverlayStraight);
					Tween.delay(3, printWhoGotBonus);
					return;
				}
				//panel.overlay.gotoAndStop(3);
				panel.overlay.gotoAndStop(9);
				if(!_options.intro) playEntranceAnimation();
				if(_options.tutorial) blankQuestion(tutorialQuestion, 0);
				return;
			}
			if(_in == "hiscore_btn"){
				//if(Base.newgroundsAPI){_global.shell.scorePosted();}
				action("hiscores_btn");
			}
			if(_in == "cards_btn"){
				action("card_btn");
			}
			if(_in == "settings_btn"){
				action("settings_btn");
			}
			if(_in == "credits_btn"){
				if(Base.armorgames || BaseSetting.adType == "armorgames" && Base.location != "foumartgames"){
					Base.linkHandler(null);
				} else {
					Base.foumartHandler(null);
				}
			}
		}
		public function overlayClick(evt:Object = null):void{trace("overlayClick", tutorialState, _global.game.schedule, panel.overlay.currentFrame, questions.indexOf(activeQuestion), gameOverlay.currentLabel);
			/*if(gameOverlay.currentLabel == "king"){//bug.. handling
				hideOverlay();
				//trace()
				gameOverlay.intro.doneClick(evt);
				return;
			}*/
			if(_global.game.schedule == "endgame") return;
			if(panel.overlay.currentFrame>4 && panel.overlay.currentFrame<8){
				if(evt) {
					if(evt.target) return;
				}
			}
			if(panel.overlay.currentFrame == 1){
				preOverlayClick(evt.target.name);
				return;
			}
			if(panel.overlay.currentFrame == 3){
				//if(!tutorialState) return;
			}
			if(tutorialState == 5 || tutorialState == 6){//trace("case4");
				//addText(commandsText);
				_global.game.resetSectors();
				if(knightAction == Action.ATTACK && _global.game.playerGroup.shield.visible) Tween.delay(10*_options.skipFrames, action, UnitType.KNIGHT);
				
				if(tutorialState == 5) {//trace("case41");
					finishTutorial(mouseX, mouseY);
					return;
				} else {//trace("case42");
					tutorialState = 0;
					hideOverlay();
					cancel();
					panel.overlay.visible = false;
					panel.overlay.buttonMode = false;
					panel.overlay.removeEventListener(MouseEvent.CLICK, overlayClick);
					return;
				}
			}
			if(tutorialState && tutorialState!=3) {hideOverlay();}
			else if(tutorialState){
				panel.overlay.visible = false;
				panel.overlay.buttonMode = false;
				panel.overlay.removeEventListener(MouseEvent.CLICK, overlayClick);
				removeQuestion("yes");
				Tween.delay(40*_options.skipFrames, gameOverlay.mess3.gotoAndPlay, "show");
				return;
				//Tween.delay(180*_options.skipFrames, hideOverlay);
				//Tween.delay(180*_options.skipFrames, gameOverlay.play);
			}
			panel.overlay.visible = false;
			panel.overlay.buttonMode = false;
			panel.overlay.removeEventListener(MouseEvent.CLICK, overlayClick);
			removeQuestion("yes");
		}
		private function finishTutorial(_xmouse:int = 0, _ymouse:int = 0):void{
			if(!tutorialState && !_xmouse && !_ymouse) return;
			tutorialState = 0;
			hideOverlay();
			cancelTutorial();
			panel.overlay.visible = false;
			panel.overlay.buttonMode = false;
			panel.overlay.removeEventListener(MouseEvent.CLICK, overlayClick);
			//trace(mouseX, mouseY);
			if(!_xmouse && !_ymouse) return;
			Tween.delay(15*_options.skipFrames, function(){
				if(mouseX<-300) {
					if(mouseY<120){
						_global.game.forceMove(_global.game.tweenObj.x+4,_global.game.tweenObj.y+4);
					} else if(mouseY>150 && mouseY<260){
						_global.game.forceMove(_global.game.tweenObj.x+4,_global.game.tweenObj.y);
					} else if(mouseY>290){
						_global.game.forceMove(_global.game.tweenObj.x+4,_global.game.tweenObj.y-4);
					}
				} else if(mouseX>-280&&mouseX<-180) {
					if(mouseX>-240&&mouseX<-220 && mouseY>190&&mouseY<220 ){
						finishTutorialHelper();
					} else if(mouseY<120){
						_global.game.forceMove(_global.game.tweenObj.x,_global.game.tweenObj.y+4);
					} else if(mouseY>290){
						_global.game.forceMove(_global.game.tweenObj.x,_global.game.tweenObj.y-4);
					}
				} else if(mouseX>-140) {
					if(mouseY<120){
						_global.game.forceMove(_global.game.tweenObj.x-4,_global.game.tweenObj.y+4);
					} else if(mouseY>150 && mouseY<260){
						_global.game.forceMove(_global.game.tweenObj.x-4,_global.game.tweenObj.y);
					} else if(mouseY>290){
						finishTutorialHelper();
					}
				}
			});
		}
		
		private function finishTutorialHelper():void{
			SoundEffect.showShop();
			SoundEffect.levelup2();
			if(!SoundFX.isNowPlaying("FX_shop")) {
				SoundFX.skipMusic("FX_shop", 0.6, 30);
			}
			_global.game.hideTavernButton();
			shopShown = true;
			panel.tavern_btn.prev = true;
			
			gameOverlay.alpha = 1;
			gameOverlay.visible = true;
			gameOverlay.gotoAndPlay("show_shop_0");
			gameOverlay.nextFrame();gameOverlay.play();
			
			//shop = gameOverlay.shop0;
			//shop.prev = true;
			//Tween.delay(1, updateShop, -1, true);
			
			gameOverlay.mouseChildren = true;
			Tween.to(_global.game.playerGroup, {alpha:0}, 10*_options.skipFrames, null, updateShop, -1, true);
			panel.overlay.gotoAndStop(9);
			panel.overlay.visible = true;
			panel.overlay.buttonMode = true;
			playExitAnimation();
		}
		private function quitPressed():void{
			removeQuestion();
			_global.game.restartGame();
		}
		private function finishGamePressed():void{
			removeQuestion();_global.shell.track("????");
			//_global.game.endGame(true);
		}
		public function updateShop(_lvl:int = -1, _prev:Boolean = false):void{
			setShop(_lvl, _prev, false);
			if(_lvl>-1){
				setScore(_global.playerGroup);
				_global.game.setHealth();
				shop.setUp();
			}
		}
		public function getCurrentShop(_off:int = 1):MovieClip{
			return gameOverlay["shop"+(_global.game.level+_off)] as MovieClip;
		}
		private function getRand(lvl:int):int{
			//if(lvl < 2 && _global.randomGen.random()<.5) {_rand = 1; return _rand;}
			_rand = 1+int(lvl/2) + int(-1.001+_global.randomGen.random()*(3+lvl*2));
			if(_rand>10 || _rand<=0) _rand=4+int(_global.randomGen.random()*6.9);//9;
			return _rand;
		}
		
		public function setShop(lvl:int = -1, prev:Boolean = false, _sound:Boolean = true):void{_global.shell.track("setShop:", lvl, _global.game.level, prev)
			_global.game.hideTavernButton();
			shopShown = true;
			var _c:int;
			if(_sound){
				SoundEffect.levelup2();
			}
			if(!SoundFX.isNowPlaying("FX_shop")) {
				SoundFX.skipMusic("FX_shop", 0.6, 30);
			}
			/*if(lvl>=4 || _global.game.level>=4) {
				shop = gameOverlay["shop"+((prev)?(_global.game.level):_global.game.level+1)] as MovieClip;
				shop.prev = prev;trace("setShop!", lvl, _global.game.level, prev, shop.prev, shop.shopShown)
				shop.setUp();
			} else*/
			if(lvl>=0 || _global.game.level) {
				shop = gameOverlay["shop"+((prev)?(_global.game.level):_global.game.level+1)] as MovieClip;
				shop.prev = prev;_global.shell.track("setShop", lvl, _global.game.level, prev, shop.prev, shop.shopShown)
				shop.setUp();
				if(prev && _global.game.level>0){
					shop.done_btn.visible = false;
					shop.back_btn.x = 112;
					if(!shop.back_btn.hasEventListener(MouseEvent.CLICK)){
						shop.back_btn.addEventListener(MouseEvent.CLICK, shopBackClick);
					}
					checkWarning(prev);
				} else if(_global.game.level){
					shop.done_btn.visible = true;
					if(!shop.done_btn.hasEventListener(MouseEvent.CLICK)){
						shop.done_btn.addEventListener(MouseEvent.CLICK, shopDoneClick);
					}
					shop.back_btn.x = 12;
					if(!shop.back_btn.hasEventListener(MouseEvent.CLICK)){
						shop.back_btn.addEventListener(MouseEvent.CLICK, shopBackClick);
					}
					checkWarning(prev);
				}
				if(lvl>-1){
					if(lvl>0){
						if(shop.shopShown && (shop.item1.currentFrame>1||(shop.item1.currentFrame==1&&_global.game.level<2&&prices[0].level==lvl-1&&_options.bonus!=1))) _rand = shop.item1.currentFrame else {
							getRand(lvl);
							_c = 0;
							while(prices[_rand-1].have || prices[_rand-1].level>-1 || _rand>10 || _rand <=0 || (_rand >= 9 && lvl<3)){
								_c ++; if(_c>50) {break;}
								getRand(lvl);
							}
						}
						shop.item1.gotoAndStop(_rand);
						if(prices[shop.item1.currentFrame-1].level == -1) prices[shop.item1.currentFrame-1].level = lvl - 1;//(shop.prev)?lvl-1:lvl;
					}
					shop.item1.price_txt.htmlText = ((shop.prev) ? "<font color='#ff9999'>"+prices[shop.item1.currentFrame-1].prev+"</font>" : prices[shop.item1.currentFrame-1].price) + " gp.";
					if(!prices[shop.item1.currentFrame-1].have) shop.item1.purchased.visible = false else shop.item1.purchased.visible = true;
					if(((shop.prev)?prices[shop.item1.currentFrame-1].prev : prices[shop.item1.currentFrame-1].price) > _global.game.score || prices[shop.item1.currentFrame-1].have) {
						if(!prices[shop.item1.currentFrame-1].have || _global.game.playerGroup[prices[shop.item1.currentFrame-1].slot+"Death"]) shop.item1.alpha = .4;
						shop.buy1.filters = [_global.dungeon.adjustColors(0,-95,-75,-75)];
						shop.buy1.enabled = false;
					} else {
						if(_global.game.playerGroup[prices[shop.item1.currentFrame-1].slot+"Death"]) {
							shop.item1.alpha = .4;
							shop.buy1.filters = [_global.dungeon.adjustColors(0,-95,-75,-75)];
							shop.buy1.enabled = false;
						} else {
							shop.item1.alpha = 1;
							shop.buy1.visible = true;
							shop.buy1.addEventListener(MouseEvent.CLICK, shopClick);
							shop.buy1.filters = [];
							shop.buy1.enabled = true;
						}
					}
					if(lvl>0){
						if(shop.shopShown && (shop.item2.currentFrame>1||(shop.item2.currentFrame==1&&_global.game.level<2&&prices[0].level==lvl-1&&_options.bonus!=1))) _rand = shop.item2.currentFrame else {
							getRand(lvl);
							_c = 0;
							while(prices[_rand-1].have || prices[_rand-1].level>-1 || _rand==shop.item1.currentFrame || _rand>10 || _rand<=0 || (_rand == 9 && lvl<3) || (_rand > 6 && !lvl)){
								_c ++; if(_c>50) {break;}
								getRand(lvl);
							}
						}
						shop.item2.gotoAndStop(_rand);
						if(prices[shop.item2.currentFrame-1].level == -1) prices[shop.item2.currentFrame-1].level = lvl - 1;
					}
					shop.item2.price_txt.htmlText = (shop.prev) ? "<font color='#ff9999'>"+prices[shop.item2.currentFrame-1].prev+"</font>" : prices[shop.item2.currentFrame-1].price  + " gp.";
					if(!prices[shop.item2.currentFrame-1].have) shop.item2.purchased.visible = false else shop.item2.purchased.visible = true;
					if(((shop.prev)?prices[shop.item2.currentFrame-1].prev:prices[shop.item2.currentFrame-1].price) > _global.game.score || prices[shop.item2.currentFrame-1].have) {
						if(!prices[shop.item2.currentFrame-1].have || _global.game.playerGroup[prices[shop.item2.currentFrame-1].slot+"Death"]) shop.item2.alpha = .4;
						shop.buy2.filters = [_global.dungeon.adjustColors(0,-95,-75,-75)];
						shop.buy2.enabled = false;
					} else {
						if(_global.game.playerGroup[prices[shop.item2.currentFrame-1].slot+"Death"]) {
							shop.item2.alpha = .4;
							shop.buy2.filters = [_global.dungeon.adjustColors(0,-95,-75,-75)];
							shop.buy2.enabled = false;
						} else {
							shop.item2.alpha = 1;
							shop.buy2.visible = true;
							shop.buy2.addEventListener(MouseEvent.CLICK, shopClick);
							shop.buy2.filters = [];
							shop.buy2.enabled = true;
						}
					}
					if(!shop.done_btn.hasEventListener(MouseEvent.CLICK)){
						shop.done_btn.addEventListener(MouseEvent.CLICK, shopDoneClick);
					}
					if(!shop.back_btn.hasEventListener(MouseEvent.CLICK)){
						shop.back_btn.addEventListener(MouseEvent.CLICK, shopBackClick);
					}
					shop.shopShown = true;
				}
			} else if(lvl){// -1
				//trace("king:"+lvl, _global.game.level);
				//shop = gameOverlay["shop"+lvl] as MovieClip;
				//shop.prev = prev;
			} else if(_global.game.level){// -1
				_global.shell.track("prelevel:"+lvl, _global.game.level);
				//shop = gameOverlay["shop"+lvl] as MovieClip;
				shop.prev = prev;
			}
		}
		private function descendPressed():void{_global.shell.track("descendPressed", activeQuestion)
			if(!gameOverlay.idle) return;
			//trace(gameOverlay.currentLabel);
			/*if(activeQuestion){
				if(_global.game.level==4){
					questions[12].yes();//endgame
				} else questions[_global.game.level+1].yes();
				return;
			}*/
			tutorialState = 0;
			
			gameOverlay.gotoAndStop("show_shop_"+(_global.game.level+1));
			Tween.delay(8, descendHelper);
			Tween.to(_global.game.playerGroup, {alpha:0}, 10*_options.skipFrames);
			//if(!panel.overlay.hasEventListener(MouseEvent.CLICK)) panel.overlay.addEventListener(MouseEvent.CLICK, overlayClick);
			setShop(_global.game.level+1);
			//_global.game.paused = true;
			SoundEffect.showShop();
			playExitAnimation();
			checkWarning(panel.tavern_btn.prev);
		}
		public function checkWarning(prev:Boolean):Boolean{
			if(prev){
				shop.warning_mc.visible = false;
				shop.done_btn.filters = [];
				shop.done_btn.alpha = 1;
				return true;
			}
			if(!activeQuestion && ((shop.item1.purchased.visible||prices[shop.item1.currentFrame-1].price<_global.game.score)&&(shop.item2.purchased.visible||prices[shop.item2.currentFrame-1].price<_global.game.score))
								&&((_global.shell.gameMedals.indexOf("blast")==-1&&!_global.game.level)||
								   (_global.shell.gameMedals.indexOf("vortex")==-1&&_global.game.level==1)||
								   (_global.shell.gameMedals.indexOf("abyss")==-1&&_global.game.level==2)||
								   (_global.shell.gameMedals.indexOf("apocalypse")==-1&&_global.game.level==3))){
				shop.warning_mc.visible = true;
				shop.done_btn.filters = [_global.dungeon.adjustColors(-75, -10, 15, -15)];
				shop.done_btn.alpha = 0.9;
				return false;
			} else {
				shop.warning_mc.visible = false;
				shop.done_btn.filters = [];
				shop.done_btn.alpha = 1;
			}
			return true;
		}
		private function descendHelper():void{
			gameOverlay.alpha = 1;
			gameOverlay.visible = true;
			gameOverlay.play();
			//gameOverlay.mouseEnabled = true;
			gameOverlay.mouseChildren = true;
			panel.overlay.gotoAndStop(9);
			panel.overlay.visible = true;
			panel.overlay.buttonMode = true;
			if(panel.overlay.globalScoreBrowser.visible) panel.overlay.globalScoreBrowser.visible = false;
		}
		public function descendQuestion(_prev:Boolean = false):void{//addText("<font color='#00ff00'>Descend: "+_prev+","+_global.game.level+","+gameOverlay.idle+","+gameOverlay.currentLabel+","+gameOverlay.currentFrame+"</font>");//trace("descendQuestion", _prev, _global.game.level, gameOverlay.idle, gameOverlay.currentLabel, gameOverlay.currentFrame)
			_global.shell.track("descendQuestion", _global.game.level, gameOverlay.idle);
			if(_global.game.level==4 /*&& !_global.playerGroup.leftDeath*/){
				//_global.shell.track("unexpected event 09");
removeQuestion();
_global.game.endGame(true);
//questions[12].yes();//endgame
			}
			if(!gameOverlay.idle) return;
			if(_prev){
				tutorialState = 0;
				//updateTooltip(ItemType.NAMES[32+_global.game.level]+" - "+ItemType.DESCRIPTIONS[32+_global.game.level]);
				if(!_global.game.level){
					addText("<font color='#6699dd'>"+ItemType.NAMES[32+_global.game.level]+".</font>");
				} else {
					addText("<font color='#6699dd'>Entered "+ItemType.NAMES[32+_global.game.level]+".</font>");
				}
				gameOverlay.gotoAndStop("show_shop_"+(_global.game.level));
				Tween.delay(8, descendHelper);
				setShop(_global.game.level-1, true);
				
				Tween.to(_global.game.playerGroup, {alpha:0}, 10*_options.skipFrames);
				SoundEffect.showShop();
				playExitAnimation();
				return;
			} else {
				addText("<font color='#6699dd'>Entered "+ItemType.NAMES[32+_global.game.level+1]+".</font>");
			}
			if(_global.game.level<4) questions[_global.game.level+1].yes();
		}
		private function shopBackHelper():void{
			gameOverlay.alpha = 0;
			gameOverlay.visible = false;
			_global.game.paused = false;
		}
		public function shopBackClick(evt:MouseEvent = null):void{
			if(texts[texts.length-1].substr(0,3) == "Gam"){
				addText("");
				addText("");
				addText("");
			}
			addText("<font color='#6699dd'>Returned to "+_global.game.levels[_global.game.level].name+".</font>");
			_global.game.showTavernButton();
			shopShown = false;
			SoundEffect.move();
			if(!SoundFX.isNowPlaying("FX_main")) {
				SoundFX.skipMusic("FX_main", 0.8, 30, 29);
			}
			if(shop.done_btn) shop.done_btn.removeEventListener(MouseEvent.CLICK, shopDoneClick);
			if(shop.back_btn) shop.back_btn.removeEventListener(MouseEvent.CLICK, shopBackClick);
			removeQuestion();
			gameOverlay.gotoAndPlay("hide_shop_"+((panel.tavern_btn.prev)?(_global.game.level):_global.game.level+1));
			Tween.to(_global.game.playerGroup, {alpha:1}, 10*_options.skipFrames, null, shopBackHelper);
			playEntranceAnimation(false, 1);
			panel.overlay.globalScoreBrowser.enter.visible = false;
		}
		public function tavernBackClick():void{
			if(texts[texts.length-1].substr(0,3) == "Gam"){
				addText("");
				addText("");
				addText("");
			}
			addText("<font color='#6699dd'>Returned to "+_global.game.levels[_global.game.level].name+".</font>");
			_global.game.showTavernButton();
			if(!gameOverlay.idle) return;
			shopShown = false;
			if(!SoundFX.isNowPlaying("FX_main")) {
				SoundFX.skipMusic("FX_main", 0.8, 30, 29);
			}
			gameOverlay.gotoAndPlay("hide_shop_"+((panel.tavern_btn.prev)?(_global.game.level):_global.game.level+1));
			Tween.to(_global.game.playerGroup, {alpha:1}, 10*_options.skipFrames, null, shopBackHelper);
			playEntranceAnimation(false, 1);
			panel.overlay.globalScoreBrowser.enter.visible = false;
		}
		
		
		private function tutTooltip(str:String = ""):void{
			if(str == ""){
				panel.tooltip_txt.htmlText = "";
				panel.tooltip_bgr.visible = false;
				panel.tooltip_txt.visible = false;
				panel.tooltip_bgr.forced = false;
			} else {
				panel.tooltip_txt.htmlText = str;
				panel.tooltip_bgr.forced = true;
				if(!panel.tooltip_txt.visible) {
					panel.tooltip_bgr.visible = true;
					panel.tooltip_txt.visible = true;
					panel.tooltip_bgr.alpha = 0;
					panel.tooltip_txt.alpha = 0;
				}
				Tween.to(panel.tooltip_bgr, {alpha:1}, 5*_options.skipFrames);
				Tween.to(panel.tooltip_txt, {alpha:1}, 5*_options.skipFrames);
			}
		}
		
		public function updateTooltip(str:String = "", _timeout:int = 100):void{
			if(panel.tooltip_bgr.forced) return;
			if(!panel.order_1.visible /*|| tutorialState*/){
				if(tooltiptimeout) {
					clearTimeout(tooltiptimeout);
					tooltiptimeout = 0;
				}
				panel.tooltip_bgr.visible = false;
				panel.tooltip_txt.htmlText = "";
				panel.tooltip_txt.visible = false;
			} else {
				if(str == ""){
					if(tooltiptimeout) {
						clearTimeout(tooltiptimeout);
						tooltiptimeout = 0;
					}
					panel.tooltip_txt.htmlText = "";//"<font color='#b8b8b8'>Stage "+(_global.game.level+1)+" - "+_global.game.levels[_global.game.level].name+"</font>";
					panel.tooltip_bgr.visible = false;
					panel.tooltip_txt.visible = false;
				} else {
					if(!tooltiptimeout){
						tooltiptimeout = setTimeout(
							function(){
								if(_global.game.nextDelay <= 0){
									panel.tooltip_txt.htmlText = str;
									if(!panel.tooltip_txt.visible) {
										panel.tooltip_bgr.visible = true;
										panel.tooltip_txt.visible = true;
										panel.tooltip_bgr.alpha = 0;
										panel.tooltip_txt.alpha = 0;
									}
									Tween.to(panel.tooltip_bgr, {alpha:1}, 5*_options.skipFrames);
									Tween.to(panel.tooltip_txt, {alpha:1}, 5*_options.skipFrames);
								}
							}, _timeout
						);
					}
				}
			}
		}
		
		public function isGameIdle():Boolean{
			return gameOverlay.idle;
		}
		public function shopDoneClick(evt:* = null):void{_global.shell.track("shopDoneClick", _global.game.level, (!evt || evt is MouseEvent))
			if(!evt || evt is MouseEvent) _global.game.saveGame();
			_global.game.showTavernButton();
			if(!gameOverlay.idle) return;
			shopShown = false;
			//shop.shopShown = false;
			shop.done_btn.removeEventListener(MouseEvent.CLICK, shopDoneClick);
			removeQuestion();
			_global.game.nextLevel();
			//addText("Descended to"+_global.game.levels[_global.game.level].name+".");
			//gameOverlay.alpha = 0;
			//gameOverlay.visible = false;
			var tt:int = (evt && !(evt is MouseEvent)) ? 1 : 0;
			_global.shell.track("tt:"+tt, _global.game.level, panel.tavern_btn.prev)
			gameOverlay.gotoAndPlay("hide_shop_"+((panel.tavern_btn.prev)?(_global.game.level):_global.game.level+1));
			Tween.to(_global.game.playerGroup, {alpha:1}, 10*_options.skipFrames, null, shopBackHelper);
			playEntranceAnimation(false, 1);
		}
		private function shopClick(evt:MouseEvent):void{
			forceShop(evt.target);
		}
			
		private function forceShop(_target:*):void{
			if(!gameOverlay.idle) return;
			_target.visible = false;
			shop.buy1.removeEventListener(MouseEvent.CLICK, shopClick);
			shop.buy2.removeEventListener(MouseEvent.CLICK, shopClick);
			var index:int = _target.name.substr(3,1);//trace("shopClick:"+index, evt.target.name, evt.target.name.substr(3,1), shop["item"+index].currentFrame, _global.game.level, shop.prev)
			shop["item"+index].purchased.visible = true;
			SoundEffect.buyItem();
			SoundEffect.dropCoin(0.2, 10);
			SoundEffect.dropCoins(0.1, 20);
			switch(shop["item"+index].currentFrame){
				case 1:
					_global.playerGroup.gloves.visible = true;
					Tracker.trackEvent("Game", "Bought Battle Gloves", _global.game.getOverallScore());
					if(texts[texts.length-1].length>1) addText("");
					addText("<font color='#ffffff'><b>"+_global.game.getName("Knight",0x66ff66)+"<font color='#cccccc'> bought </font>Battle Gloves! +250 exp.</b></font>");
					addText("<font color='#ffffff'>  ^ +<b>25%</b> to Critical Hit</font>");
					addText("");
					_global.game.topExp += 250; _global.playerGroup.topUnit.gainExperience(250); _global.game.loot.push(ItemType.GLOVES);
					_global.game.score -= ((shop.prev)?prices[0].prev:prices[0].price);
					prices[0].have = true;
					setShop(_global.game.level, shop.prev, false);
					setScore(_global.playerGroup);
					_global.game.setHealth();
					shop.setUp();
					if(knightAction == Action.ATTACK){
						if(_global.playerGroup.topAction){
							_global.playerGroup.topAttack = knightFullAttack();
							_global.game.setHealth();
						} else {
							_global.playerGroup.topAttack = knightHalfAttack();
							_global.game.setHealth();
						}
					}
					Tween.delay(10, action,UnitType.KNIGHT);
					Tween.delay(20, action,UnitType.KNIGHT);
					break;
				case 2:
					_global.playerGroup.cloak.visible = true;
					Tracker.trackEvent("Game", "Bought Shadow Cloak", _global.game.getOverallScore());
					if(texts[texts.length-1].length>1) addText("");
					addText("<font color='#ffffff'><b>"+_global.game.getName("Ranger",0x66ff66)+"<font color='#cccccc'> bought a </font>Shadow Cloak! +750 exp.</b></font>");
					addText("<font color='#ffffff'>  ^ +<b>40%</b> to Dodge ranged attack ability</font>");
					addText("");
					_global.game.rightExp += 750; _global.playerGroup.rightUnit.gainExperience(750); _global.game.loot.push(ItemType.CLOAK);
					_global.game.score -= ((shop.prev)?prices[1].prev:prices[1].price);
					prices[1].have = true;
					setShop(_global.game.level, shop.prev, false);
					setScore(_global.playerGroup);
					_global.game.setHealth();
					shop.setUp();
					break;
				case 3:
					_global.playerGroup.bottomAttack+=1;
					_global.playerGroup.staff.visible = true;
					Tracker.trackEvent("Game", "Bought Magic Wand", _global.game.getOverallScore());
					if(texts[texts.length-1].length>1) addText("");
					addText("<font color='#ffffff'><b>"+_global.game.getName("Wizard",0x66ff66)+"<font color='#cccccc'> bought </font>Magic Wand! +500 exp.</b></font>");
					if(_global.playerGroup.bottomAttack==2) addText("<font color='#ffffff'>  | * Ranged Attack (Magic Missle)</font>") else addText("<font color='#ffffff'>  | * Stronger Spell (Ice Bolt)</font>")
					addText("<font color='#ffffff'>  ^ +<b>1</b> to Attack</font>");
					addText("");
					_global.game.bottomExp += 500; _global.playerGroup.bottomUnit.gainExperience(500); _global.game.loot.push(ItemType.STAFF);
					_global.game.score -= ((shop.prev)?prices[2].prev:prices[2].price);
					prices[2].have = true;
					setShop(_global.game.level, shop.prev, false);
					setScore(_global.playerGroup);
					_global.game.setHealth();
					shop.setUp();
					break;
				case 4:
					_global.playerGroup.ankh.visible = true;
					Tracker.trackEvent("Game", "Bought Holy Necklace", _global.game.getOverallScore());
					if(texts[texts.length-1].length>1) addText("");
					addText("<font color='#ffffff'><b>"+_global.game.getName("Cleric",0x66ff66)+"<font color='#cccccc'> bought a </font>Holy Necklace! +400 exp.</b></font>");
					addText("<font color='#ffffff'>  | +<b>1</b> to Resistance</font>");
					addText("<font color='#ffffff'>  ^ +<b>1</b> to Power</font>");
					addText("");
					if(_global.playerGroup.leftDeath){
						panel.addText("<font color='#cccccc'>The Holy Necklace interfered... Cleric was Revived!</font>");
						if(_global.shell.postMedal("Phoenix")) _global.game.acquireCard("Phoenix", "<font color='#ffffff'>Acquired a Phoenix Card!</font>") else if(Base.location == "foumartgames") Tracker.trackEvent("Game", "Reincarnate", _global.game.getOverallScore());
						_global.game.enemyAutoAttack = false;
						_global.playerGroup.leftDeath = false;
						_global.playerGroup.leftHealth = _global.playerGroup.leftHealthMax;
						_global.playerGroup.leftUnit.hurt = 10; _global.playerGroup.leftUnit.heal = 1; _global.game.ankh.alpha = 0.1;
						_global.game.leftExp += 100; _global.playerGroup.leftUnit.gainExperience(100);
					}
					_global.game.leftExp += 400; _global.playerGroup.leftUnit.gainExperience(400); _global.game.loot.push(ItemType.ANKH);
					_global.game.score -= ((shop.prev)?prices[3].prev:prices[3].price);
					prices[3].have = true;
					setShop(_global.game.level, shop.prev, false);
					setScore(_global.playerGroup);
					_global.game.setHealth();
					shop.setUp();
					break;
				case 5:
					_global.playerGroup.leftAttack+=1;
					_global.playerGroup.sling.visible = true;
					Tracker.trackEvent("Game", "Bought Titan Sling", _global.game.getOverallScore());
					if(texts[texts.length-1].length>1) addText("");
					addText("<font color='#ffffff'><b>"+_global.game.getName("Cleric",0x66ff66)+"<font color='#cccccc'> bought </font>Titan Sling! +750 exp.</b></font>");
					addText("<font color='#ffffff'>  ^ +<b>1</b> to Attack</font>");
					addText("");
					_global.game.leftExp += 750; _global.playerGroup.leftUnit.gainExperience(750); _global.game.loot.push(ItemType.SLING);
					_global.game.score -= ((shop.prev)?prices[4].prev:prices[4].price);
					prices[4].have = true;
					setShop(_global.game.level, shop.prev, false);
					setScore(_global.playerGroup);
					_global.game.setHealth();
					shop.setUp();
					break;
				case 6:
					Tracker.trackEvent("Game", "Bought Shadow Blade", _global.game.getOverallScore());
					if(texts[texts.length-1].length>1) addText("");
					addText("<font color='#ffffff'><b>"+_global.game.getName("Ranger",0x66ff66)+"<font color='#cccccc'> bought the </font>Shadow Blade! +1250 exp.</b></font>");
					addText("<font color='#ffffff'>  | +<b>1</b> to Attack</font>");
					addText("<font color='#ffffff'>  | +<b>15%</b> to Critical Hit chance</font>");
					addText("<font color='#ffffff'>  ^ +<b>10%</b> to Dodge ranged attack</font>");
					addText("");
					_global.game.rightExp += 1250; _global.playerGroup.rightUnit.gainExperience(1250); _global.game.loot.push(ItemType.SWORD_6);
					_global.game.score -= ((shop.prev)?prices[5].prev:prices[5].price);
					prices[5].have = true;
					setShop(_global.game.level, shop.prev, false);
					setScore(_global.playerGroup);
					_global.game.setHealth();
					shop.setUp();
					if(rangerAction == Action.BOW){
						if(_global.playerGroup.rightAction){
							_global.playerGroup.rightAttack = rangerFullAttack();
							_global.game.setHealth();
						} else {
							_global.playerGroup.rightAttack = rangerHalfAttack();
							_global.game.setHealth();
						}
					}
					Tween.delay(10, action,UnitType.RANGER);
					Tween.delay(20, action,UnitType.RANGER);
					break;
				case 7:
					_global.playerGroup.sword.visible = true;//playerGroup.sword.alpha = 0.8;
					_global.playerGroup.sword.gotoAndStop(4);
					Tracker.trackEvent("Game", "Bought Crystal Sword", _global.game.getOverallScore());
					if(texts[texts.length-1].length>1) addText("");
					addText("<font color='#ffffff'><b>"+_global.game.getName("Knight",0x66ff66)+"<font color='#cccccc'> bought the </font>Crystal Sword! +1500 exp.</b></font>");
					addText("<font color='#ffffff'>  | Critical hit Warlord, Valkarie and Dread Knight</font>");
					addText("<font color='#ffffff'>  | +<b>15%</b> to Critical Hit chance</font>");
					addText("<font color='#ffffff'>  ^ +<b>1</b> to Attack</font>");
					addText("");
					_global.game.topExp += 1500; _global.playerGroup.topUnit.gainExperience(1500); _global.game.loot.push(ItemType.SWORD_4);
					//if(playerGroup.topDefense < 3) playerGroup.topDefense += 1;
					_global.game.score -= ((shop.prev)?prices[6].prev:prices[6].price);
					prices[6].have = true;
					setShop(_global.game.level, shop.prev, false);
					setScore(_global.playerGroup);
					_global.game.setHealth();
					shop.setUp();
					if(knightAction == Action.ATTACK){
						if(_global.playerGroup.topAction){
							_global.playerGroup.topAttack = knightFullAttack();
							_global.game.setHealth();
						} else {
							_global.playerGroup.topAttack = knightHalfAttack();
							_global.game.setHealth();
						}
					}
					Tween.delay(10, action,UnitType.KNIGHT);
					Tween.delay(20, action,UnitType.KNIGHT);
					break;
				case 8:
					_global.playerGroup.shield.visible = true;//playerGroup.sword.alpha = 0.8;
					Tracker.trackEvent("Game", "Bought Diamond Shield", _global.game.getOverallScore());
					if(texts[texts.length-1].length>1) addText("");
					addText("<font color='#ffffff'><b>"+_global.game.getName("Knight",0x66ff66)+"<font color='#cccccc'> bought the </font>Diamond Shield! +1000 exp.</b></font>");
					if(_global.playerGroup.shield.currentFrame==1) addText("<font color='#ffffff'>  | + <b>Protection</b> from critical hits</font>");
					if(_global.playerGroup.shield.currentFrame<3) addText("<font color='#ffffff'>  | + <b>Protection</b> from headshots</font>");
					addText("<font color='#ffffff'>  | +<b>1</b> to Resistance</font>");
					addText("<font color='#ffffff'>  ^ +<b>1</b> to Shield Bash damage</font>");
					addText("");
					_global.playerGroup.shield.gotoAndStop(4);
					_global.game.topExp += 1000; _global.playerGroup.topUnit.gainExperience(1000); _global.game.loot.push(ItemType.SHIELD_4);
					_global.game.score -= ((shop.prev)?prices[7].prev:prices[7].price);
					prices[7].have = true;
					setShop(_global.game.level, shop.prev, false);
					setScore(_global.playerGroup);
					_global.game.setHealth();
					shop.setUp();
					if(knightAction == Action.ATTACK){
						if(_global.playerGroup.topAction){
							_global.playerGroup.topAttack = knightFullAttack();
							_global.game.setHealth();
						} else {
							_global.playerGroup.topAttack = knightHalfAttack();
							_global.game.setHealth();
						}
					}
					Tween.delay(10, action,UnitType.KNIGHT);
					Tween.delay(20, action,UnitType.KNIGHT);
					break;
				case 9:
					_global.playerGroup.ring.visible = true;
					Tracker.trackEvent("Game", "Bought Dragon Ring", _global.game.getOverallScore());
					if(texts[texts.length-1].length>1) addText("");
					addText("<font color='#ffffff'><b>"+_global.game.getName("Wizard",0x66ff66)+"<font color='#cccccc'> bought a </font>Dragon Ring! +5000 exp.</b></font>");
					addText("<font color='#ffffff'>  ^ Ingore magic resistance (except Dragon, Mage & Dungeon Lord)</font>");
					addText("");
					_global.game.rightExp += 5000; _global.playerGroup.rightUnit.gainExperience(5000); _global.game.loot.push(ItemType.RING);
					_global.game.score -= ((shop.prev)?prices[8].prev:prices[8].price);
					prices[8].have = true;
					setShop(_global.game.level, shop.prev, false);
					setScore(_global.playerGroup);
					_global.game.setHealth();
					shop.setUp();
					break;
				case 10:
					_global.playerGroup.crown.visible = true;
					Tracker.trackEvent("Game", "Divine Crown", _global.game.getOverallScore());
					if(texts[texts.length-1].length>1) addText("");
					addText("<font color='#ffffff'><b>"+_global.game.getName("Wizard",0x66ff66)+"<font color='#cccccc'> bought a </font>Divine Crown! +2500 exp.</b></font>");
					addText("<font color='#ffffff'>  | + <b>Auto Protection</b></font>");
					addText("<font color='#ffffff'>  ^ +<b>1</b> to Resistance</font>");
					addText("");
					_global.game.leftExp += 2500; _global.playerGroup.leftUnit.gainExperience(2500); _global.game.loot.push(ItemType.DIVINE_CROWN);
					_global.game.score -= ((shop.prev)?prices[9].prev:prices[9].price);
					prices[9].have = true;
					setShop(_global.game.level, shop.prev, false);
					setScore(_global.playerGroup);
					_global.game.setHealth();
					shop.setUp();
					Tween.delay(20, castProtection, true, false, true, false, false);
					break;
			}
			checkWarning(panel.tavern_btn.prev);
		}
		
		public function fullScreenHandler(evt:MouseEvent = null):void{
			if(_global._stage.displayState == StageDisplayState.NORMAL || !_global._stage.displayState){
				try{
					_global._stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				} catch(err:Error){
					_global._stage.displayState = StageDisplayState.FULL_SCREEN;
				}
				scan = Local.vars.scanLines;
				//Local.vars.scanLines = false;
				_global.game.clearScanLines();
			} else {
				_global._stage.displayState = StageDisplayState.NORMAL;
				panel.fullscreenDumb_mc.visible = false;
				//Local.vars.scanLines = scan;
				if(scan) _global.game.drawScanLines() else _global.game.clearScanLines();
			}
		}
		public function welcomeText():void{
			//addText("");addText("");//addText("");
			//addText("<font color='#555555'>© 2015 by <a href='event:foumartHandler'><b>FoumartGames</b></a></font>");
			for(var _i:int = 0; _i < 38; _i++){addText("");}
			//addText("<font color='#555555'>      Copyright © 2015 by       </font>"+((Base.armorgames)?"<font color='#666666'>Like Us!</font><font color='#555555'>      Brought to you by</font>":""));
			//addText("<font color='#666666'>     <b>   <a href='event:foumartHandler'>Foumart Games</a>"+((Base.armorgames)?"                          <a href='event:playMoreGamesClicked'>Armor Games</a>":"")+"</b></font>");
			if(Base.armorgames || (BaseSetting.adType == "armorgames" && Base.location != "foumartgames" && !Base.local)){
				addText("<font color='#555555'>      Copyright © 2016 by       </font><font color='#666666'>Like<font size='4'> </font>Us!</font><font color='#555555'>     Brought to you by</font>");
				addText("<font color='#666666'>     <b>   <a href='event:foumartHandler'>Foumart<font size='6'> </font>Games</a>                          <a href='event:playMoreGamesClicked'>Armor<font size='6'> </font>Games</a></b></font>");
				addText("");
			} else {
				
				addText("                       <font color='#555555'>Copyright © 2014-2016 by <b><a href='event:foumartHandler'>Foumart Games</a>.</b></font>");
				addText("");
				addText("");
			}
			addText("<font color='#555555'>Created by <b>Noncho Savov. </b>Music composed by <b>Niilo<font size='2'> </font>Takalainen.</b></font>");
			
			//addText("<font color='#555555'>Music by <b>Niilo Takalainen</b> (boss track by <b>Noncho Savov</b>)</font>");
			//addText("<font color='#555555'>Thanks to <b>Flash</b> Technology              & <b>Noncho Savov</b>(boss track)</font>");
			///addText("");
			//addText(" <font color='#555555'>Developed by <b>Noncho Savov</b>          Music by <b>Niilo Takalainen</b></font>");
			
			//addText(commandsText);
			panel.dusc_mc.gotoAndStop(1);
			panel.dusc_mc.score_mc.visible = false;
			panel.dusc_mc.gold_txt.visible = false;
			panel.dusc_mc.score_mc.text = "0";
			panel.dusc_mc.gold_txt.text = "0";
		}
		private function foumartHandler(evt:Event = null):void{
			foumartGamesClicked(null);
		}
		private function playMoreGamesClicked(evt:MouseEvent):void{
			Base.linkHandler(null);
		}
		private function foumartGamesClicked(evt:MouseEvent):void{
			Base.foumartHandler(null);
		}
		
		public function showScore(_setScore:Boolean = true):void{
			panel.dusc_mc.gotoAndPlay(2);
			panel.dusc_mc.score_mc.visible = true;
			panel.dusc_mc.gold_txt.visible = true;
			if(_setScore) setScore(_global.playerGroup);
		}
		private function dontStartNewGame():void{_global.shell.track("dontStartNewGame");
			_global.game.schedule = "endgame";
			if(_global.shell.scoreOverlay) {
				_global.shell.scoreOverlay.visible = true;
				if(!_global.shell.scoreOverlay.numChildren) {
					_global.shell.scorePosted();
					//_global.shell.postScore();
				}
			} else {
				//_global.shell.postScore();
			}
			cancel();
			consoleClick();
		}
		private function startGameHelper():void{
			_global.game.schedule = null;
			removeQuestion();
			consoleReset(new MouseEvent(MouseEvent.CLICK));
		}
		private function startNewGame():void{
			Tween.delay(1, startGameHelper);
		}
		public function consoleReset(evt:MouseEvent):void{_global.shell.track("consoleReset",_global.game.schedule, panel.overlay.globalScoreBrowser.enter.visible, panel.overlay.globalScoreBrowser.posted);
			if(_global.game.schedule == "endgame"){
				if(!panel.overlay.globalScoreBrowser.posted){ // need better check if score posted or not
					hideScroll();
					removeQuestion("no");
					consoleClick(evt);
					
					SoundEffect.uiClick(1, .25);
					panel.console.y = _global._stage.stageHeight - 58 - ((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?-20:0);
					panel.console.bgr.height = 47 - ((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?20:0);
					consoleText.y = -2;
					questionText.y = questionDown;
					updateText();
					
					return;
				}
				removeQuestion("no");
				consoleClick(evt);
				if(_global.shell.scoreOverlay) _global.shell.scoreOverlay.visible = false;
				activeQuestion = questions[11];
				addQuestion(activeQuestion.question);
				panel.info.items_mc.visible = false;
				return;
			}
			if(activeQuestion) {
				_global.game.overlay.alpha = 1;
				activeQuestion = null;
				_global.game.overlay.alpha = 1;
			} else {_global.shell.track("consoleReset????");
				//return;
			}
			panel.console.bgr.removeEventListener(MouseEvent.CLICK, consoleReset);
			panel.console.bgr.addEventListener(MouseEvent.CLICK, consoleClick);
			questionText.addEventListener(MouseEvent.CLICK, consoleClick);
			_global.game.restartGame();
			if(evt){
				if(evt.target) consoleClick(evt);
			}
		}
		
		public function consoleClick(evt:MouseEvent = null):void{_global.shell.track("consoleClick", panel.overlay.globalScoreBrowser.visible, panel.overlay.globalScoreBrowser.enter.visible, panel.overlay.globalScoreBrowser.posted,_global.game.schedule)
			if(tutorialState || gameOverlay.currentLabel == "king") {SoundEffect.negative();return;}
			if(_global.game.schedule == "endgame"){//_global.shell.scoreOverlay
				if(panel.overlay.globalScoreBrowser.visible){
					if(!panel.overlay.globalScoreBrowser.posted){
						if(panel.overlay.globalScoreBrowser.enter.visible) {
							panel.overlay.globalScoreBrowser.enter.visible = false;
							//return;//
						} else {
							panel.overlay.globalScoreBrowser.enter.visible = true;
							//return;
						}
					}
				} else {
					if(activeQuestion && panel.overlay.visible && _global.game.schedule != "endgame"){
						if(questions.indexOf(activeQuestion)==5 && tutorialState < 1 && gameOverlay.currentLabel != "king" && gameOverlay.currentLabel != "show_0"){// the only case to be here - when restarting from an endgame
							_global.shell.track("restartGame ?", tutorialState, gameOverlay.currentLabel);
							_global.game.restartGame();
							return;
						} else if(gameOverlay.currentLabel == "king" || gameOverlay.currentLabel == "show_0"){
							return;
						}
						overlayClick();
						return;
					}
				}
			} else if(_global.shell.scoreOverlay) return;
			if(!evt) {
				_global.shell.track("here?");
				panel.console.bgr.removeEventListener(MouseEvent.CLICK, consoleClick);
				if(_global.game.schedule == "endgame") panel.console.bgr.addEventListener(MouseEvent.CLICK, consoleReset);
				questionText.removeEventListener(MouseEvent.CLICK, consoleClick);
			}
			if(panel.console.height<100){
				SoundEffect.uiClick(2, .25);
				_global.game.paused = true;
				Tween.paused = true;
				panel.console.y = 0;
				panel.console.bgr.height = _global._stage.stageHeight-12+((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?1:0);
				consoleText.y = 2;
				questionText.y = questionUp;
				updateWholeText();
				if(texts.length>getConsoleLines() && !panel.overlay.globalScoreBrowser.visible && !_global.shell.scoreOverlay) showScroll();
				panel.console.yes_btn.y = _global._stage.stageHeight - 58-((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?1:0);
				panel.console.no_btn.y = _global._stage.stageHeight - 58-((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?1:0);
				//trace(consoleText.height, consoleText.textHeight)
			} else {
				SoundEffect.uiClick(1, .25);
				//if(_global.game.schedule != "endgame"){
					_global.game.paused = false;
					Tween.paused = false;
				//}
				/*if(_global.game.schedule != "endgame" || (!_global.game.locked && _global.game.schedule == "endgame")) {
					_global.game.enemyAutoAttack = false;
				}*/
				panel.console.y = _global._stage.stageHeight - 58 - ((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?-20:0);
				panel.console.bgr.height = 47 - ((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?20:0);
				consoleText.y = -2;
				questionText.y = questionDown;
				updateText();
				/*if(texts.length>getConsoleLines())*/ hideScroll();
				panel.console.yes_btn.y = 0 - ((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?20:0);
				panel.console.no_btn.y = 0 - ((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?20:0);
			}
		}
		
		private function showScroll():void{
			_global.shell.track(Base.armorgames, BaseSetting.adType, Base.location, Base.local, panel.overlay.currentFrame , _global.game.schedule , panel.overlay.globalScoreBrowser.visible);
			if(((Base.armorgames || BaseSetting.adType == "armorgames") && Base.location != "foumartgames" && !Base.local) && panel.overlay.currentFrame>1 && _global.game.schedule!="endgame" && !panel.overlay.globalScoreBrowser.visible){
				panel.ag_logo_big.visible = true;
			}
			panel.console.ag_logo.visible = false;
			panel.console.scroller_mc.scaleY = 1;
			panel.console.scroller_mc.visible = true;
			panel.console.bar_mc.visible = true;
			panel.console.scroller_mc.y = 42;
			panel.console.bar_mc.y = panel.console.scroller_mc.y + panel.console.scroller_mc.height - panel.console.bar_mc.height;
			panel.console.scroller_mc.addEventListener(MouseEvent.MOUSE_DOWN, consoleScrollerClick);
			panel.console.addEventListener(MouseEvent.MOUSE_WHEEL, consoleScrollerWheel);
		}
		public function hideScroll():void{
			if(((Base.armorgames || BaseSetting.adType == "armorgames") && Base.location != "foumartgames" && !Base.local) && panel.overlay.currentFrame>1 && _global.game.schedule!="endgame" && !panel.overlay.globalScoreBrowser.visible){
				panel.console.ag_logo.visible = true;
			}
			panel.ag_logo_big.visible = false;
			panel.console.scroller_mc.scaleY = 0.1;
			panel.console.scroller_mc.visible = false;
			panel.console.bar_mc.visible = false;
			panel.console.scroller_mc.y = 0;
			panel.console.bar_mc.y = 0;
			panel.console.scroller_mc.removeEventListener(MouseEvent.MOUSE_DOWN, consoleScrollerClick);
			panel.console.removeEventListener(MouseEvent.MOUSE_WHEEL, consoleScrollerWheel);
		}
		private function consoleScrollerWheel(evt:MouseEvent):void{
			var index:Number = (panel.console.scroller_mc.height-panel.console.scroller_mc.y-panel.console.bar_mc.height) / (texts.length-getConsoleLines());
			consoleScrollerUpdate(panel.console.bar_mc.y+evt.delta/3*-index);
		}
		private function consoleScrollerClick(evt:MouseEvent):void{
			panel.console.scroller_mc.removeEventListener(MouseEvent.MOUSE_DOWN, consoleScrollerClick);
			panel.console.removeEventListener(MouseEvent.MOUSE_WHEEL, consoleScrollerWheel);
			_global._stage.addEventListener(MouseEvent.MOUSE_UP, consoleScrollerRelease);
			panel.addEventListener(MouseEvent.MOUSE_MOVE, consoleScrollerMove);
			consoleScrollerUpdate(mouseY-12);
		}
		private function consoleScrollerRelease(evt:MouseEvent):void{
			_global._stage.removeEventListener(MouseEvent.MOUSE_UP, consoleScrollerRelease);
			panel.removeEventListener(MouseEvent.MOUSE_MOVE, consoleScrollerMove);
			panel.console.scroller_mc.addEventListener(MouseEvent.MOUSE_DOWN, consoleScrollerClick);
			panel.console.addEventListener(MouseEvent.MOUSE_WHEEL, consoleScrollerWheel);
		}
		private function consoleScrollerMove(evt:MouseEvent):void{
			consoleScrollerUpdate(mouseY-12);
		}
		private function consoleScrollerUpdate(_y:Number):void{
			panel.console.bar_mc.y = _y;
			if(panel.console.bar_mc.y>panel.console.scroller_mc.y+panel.console.scroller_mc.height-panel.console.bar_mc.height)
				panel.console.bar_mc.y = panel.console.scroller_mc.y+panel.console.scroller_mc.height-panel.console.bar_mc.height;
			else if(panel.console.bar_mc.y<panel.console.scroller_mc.y)
				panel.console.bar_mc.y = panel.console.scroller_mc.y;
			updateWholeText((panel.console.bar_mc.y-panel.console.scroller_mc.y)/(panel.console.scroller_mc.height-panel.console.bar_mc.height)*100);
		}
		private function getConsoleLines():int{
			return ((questionText.visible) ? 36-((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?5:0) : 42-((Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75)?5:0));
		}
		
		public function updateWholeText(percent:Number = 100):void{//if(percent!=100){trace("percent:"+percent);return;}
			var lines:int = getConsoleLines();
			var consoleStr:String = "";
			if(texts.length>lines){
				var index:Number = ((texts.length-lines)/100)*(100-percent);
				if(index<0) index = 0;
				if(index>texts.length-lines) index = texts.length-lines;
				for(var i:uint = texts.length-lines-index; i < texts.length-index; i++){
					/*if(texts[i].length<3&&i==texts.length-index-1){
						// dont add the last empty line
					} else {
						if(texts[i]) consoleStr+=(texts[i]+"\r") else consoleStr+="\r";
					}*/
					/*if(texts[i]) {
						if(texts[i].length>2||i<texts.length-index-2) consoleStr+=(texts[i]+"\r");// else consoleStr+="\r";//i+"."+Math.round(index)+":"+
					} else consoleStr+="\r";*/
					if(texts[i]) consoleStr+=(texts[i]+"\r") else consoleStr+="\r";
				}
			} else {
				for(i = 0; i < lines-texts.length; i++){
					consoleStr+="\r";
				}
				for(i = lines-texts.length; i < lines; i++){
					if(texts[i-(lines-texts.length)]) consoleStr+=texts[i-(lines-texts.length)]+"\r" else consoleStr+="\r";
				}
			}
			consoleText.htmlText = consoleStr;
		}
		public function getLineField():LineTxt{
			var memberText:TextField;
			var lineTxt:LineTxt = new LineTxt();
			memberText = lineTxt.line_txt;
			memberText.autoSize = TextFieldAutoSize.LEFT;
			return lineTxt;
		}
		public function getTextField(str:String, w:uint = 0, defaultSize:uint = 13, defaultColor:uint = 0xffffff, rightAligned:Boolean = false):TextField{
			var memberText:TextField = new TextField();
			var memberFormat:TextFormat = new TextFormat();
			memberText.type = TextFieldType.DYNAMIC;
			memberText.autoSize = TextFieldAutoSize.LEFT;
			memberText.embedFonts = false;
			memberText.background = false;
			memberText.antiAliasType = AntiAliasType.ADVANCED;
			memberText.gridFitType = GridFitType.PIXEL;
			memberText.selectable = false;
			memberText.mouseWheelEnabled = false;
			if(w) memberText.wordWrap = true;
			if(w) memberText.width = w;
			memberFormat.font = "Lucida Console";
			memberFormat.size = defaultSize;
			memberFormat.bold = false;
			memberFormat.letterSpacing = 0;
			memberFormat.color = defaultColor;
			memberFormat.leading = 1;
			memberFormat.align = (rightAligned) ? TextFormatAlign.RIGHT : TextFormatAlign.LEFT;
			memberText.defaultTextFormat = memberFormat;
			memberText.setTextFormat(memberFormat);
			memberText.htmlText = str;
			return memberText;
		}
		private function addTextHelper(_str:String):void{
			texts.push(_str);
			if(panel.console.height<100) updateText() else updateWholeText();
		}
		public function addText(str:String, delay:int = 0):void{
			if(delay){
				Tween.delay(delay, addTextHelper, str);
			} else {
				texts.push(str);
				if(panel.console.height<100) updateText() else updateWholeText();
			}
		}
		public function addQuestion(str:String):void{
			if(str.length){
				SoundEffect.drawBow();
				questionText.visible = true;
				panel.console.no_btn.visible = true;
				panel.console.yes_btn.visible = true;
				if(tutorialState>1 && tutorialState < 5){
					panel.console.yes_btn.alpha = 0.95;
					panel.console.yes_btn.filters = [_global.dungeon.adjustColors(0,-95,-75,-75)];
				} else {
					panel.console.yes_btn.alpha = 1;
					panel.console.yes_btn.filters = [];
				}
				questionTxt.htmlText = str;//+"<a href='event:tutorialPressed'><font color='#cccccc'><b>Y</b></font>es</a>/<a href='event:cancel'><font color='#cccccc'><b>N</b></font>o</a> ?";
				questionTxt.addEventListener(TextEvent.LINK, txtClick);
			} else {
				questionText.visible = false;
			}
			if(panel.console.height<100) questionText.y = questionDown else questionText.y = questionUp;
		}
		public function removeQuestion(callBack:String = null):void{
			if(!callBack){
				if(panel.console.height>100){
					panel.console.bgr.removeEventListener(MouseEvent.CLICK, consoleReset);
					panel.console.bgr.addEventListener(MouseEvent.CLICK, consoleClick);
					questionText.addEventListener(MouseEvent.CLICK, consoleClick);
					consoleClick(new MouseEvent(MouseEvent.CLICK));
				}
			}
			panel.console.no_btn.visible = false;
			panel.console.yes_btn.visible = false;
			var callBackFunction:Function;
			questionText.visible = false;
			questionTxt.htmlText = "";
			questionTxt.removeEventListener(TextEvent.LINK, txtClick);
			if(callBack && activeQuestion) {
				if(activeQuestion[callBack] != null) callBackFunction = activeQuestion[callBack];
			}
			activeQuestion = null;
			if(callBackFunction != null) callBackFunction();
		}
		public function updateText():void{
			if(Base.mobile&&_global._stage.stageHeight/_global._stage.stageWidth<0.75){
				if(texts.length>1){
					consoleText.htmlText = texts[texts.length-2]+"\r"+texts[texts.length-1]+"\r";
				} else if(texts.length){
					consoleText.htmlText = texts[texts.length-1]+"\r";
				}
			} else {
				if(texts.length>3){
					consoleText.htmlText = texts[texts.length-4]+"\r"+texts[texts.length-3]+"\r"+texts[texts.length-2]+"\r"+texts[texts.length-1]+"\r";
				} else if(texts.length>2){
					consoleText.htmlText = texts[texts.length-3]+"\r"+texts[texts.length-2]+"\r"+texts[texts.length-1]+"\r";
				} else if(texts.length>1){
					consoleText.htmlText = texts[texts.length-2]+"\r"+texts[texts.length-1]+"\r";
				} else if(texts.length){
					consoleText.htmlText = texts[texts.length-1]+"\r";
				}
			}
		}
		
		public function setHealth(group:UnitGroup, slot:String, type:String):void{
			var h:int = group[slot+"Health"];
			var hm:int = group[slot+"HealthMax"];
			var a:int = group[slot+"Attack"];
			var s:int = group[slot+"Action"];
			var d:int = group[slot+"Defense"];
			if(group[slot+"Protection"]){
				panel[type+"Health"].filters = [new GlowFilter(((group[slot+"Protection"]==1)?0x334477:0x882233), 1, 3, 3, 5), new GlowFilter(((group[slot+"Protection"]==1)?0x6688bb:0xcc4455), 1, 2, 2, 4)];
			} else {
				panel[type+"Health"].filters = [];
			}
			if(type==UnitType.KNIGHT) {panel[type+"Special"].a1.visible = (slot==Slot.TOP && _global.game.topExp>=25000)?true:false;}
			for(var i:uint = 1; i < 9; i++){
				panel[type+"Health"]["h"+i].visible = ((i-1<hm) ? true : false);
				if(i-1<h){
					panel[type+"Health"]["h"+i].filters = [];
				} else {
					panel[type+"Health"]["h"+i].filters = [_global.dungeon.adjustColors(-12,-64,-32,16)];
				}
				if(h == 1) panel[type+"Health"].h1.gotoAndPlay("re") else panel[type+"Health"].h1.gotoAndStop(1);
				//panel[type+"Health"]["h"+i].alpha = ((i-1<h) ? 1 : 0.25);
				if(group.topAttack>6) panel.at_txt.text = ""+group.topAttack else if(gameOverlay.currentLabel == "king"){
					var cr:int = ((_global.game.loot.indexOf(ItemType.SWORD_4)>-1)?((!_global.game.gloves.visible)?15:((_global.game.loot[0]==ItemType.GLOVES)?43:40)):((!_global.game.gloves.visible)?0:((_global.game.loot[0]==ItemType.GLOVES)?30:25)));
					cr += _global.playerGroup.topUnit.level*2+((_global.playerGroup.topUnit.level>=8)?((_global.playerGroup.topUnit.level>8)?9:4):0);
					panel.at_txt.text = cr+"%";
				} else panel.at_txt.text = "";
				if(i<=6) {
					if(slot==Slot.TOP){
						panel[type+"Attack"]["a"+i].gotoAndStop(group.sword.currentFrame);
						if(group.shield.visible){//((_global.game.shield.currentFrame<3)?1:_global.game.shield.currentFrame-1);
							panel[type+"Attack"]["a"+i].visible = ((i-1<knightFullAttack()) ? true : false);
							panel[type+"Attack"]["a"+i].alpha = ((i-1<knightHalfAttack()) ? 1 : 0.25);
						} else {
							panel[type+"Attack"]["a"+i].visible = ((i-1<knightFullAttack()) ? true : false);
							panel[type+"Attack"]["a"+i].alpha = 1;
						}
						if(i<=3) {
							panel[type+"Action"]["m"+i].gotoAndStop(group.shield.currentFrame);
							panel[type+"Action"]["m"+i].visible = ((i-1<s) ? true : false);
							panel[type+"Action"]["m"+i].alpha = ((i-1<((slot==Slot.TOP&&d)?d:s)) ? 1 : 0.25);
							panel[type+"Action"]["d"+i].visible = ((i-1<d) ? true : false);
						}
						panel[type+"Action"].d1.visible = true;
						panel.shield.gotoAndStop(group.shield.currentFrame);
					} else if(slot==Slot.RIGHT){
						//if(!group.rightActionMax) panel.arrows_txt.text = "";
						//else panel.arrows_txt.text = (s<4) ? "∞":s+"";
						if(!group.rightAction) panel.arrows_txt.htmlText = "<font color='#333333'>"+s+"/"+((s>3)?"∞":"3")+"</font>"
						else if(!group.rightActionMax) panel.arrows_txt.text = s+"/"+3
						else panel.arrows_txt.text = (s<4) ? s+"/∞":""+s;
						panel.bow.gotoAndStop(group.bow.currentFrame);
						if(i<=3) {
							panel[type+"Special"]["s"+i].visible = ([0, 1000, 25000, 100000][i]<_global.game.rightExp)?true:false;
							panel[type+"Action"]["m"+i].gotoAndStop(group.bow.currentFrame);
							panel[type+"Action"]["m"+i].visible = ((i-1<s) ? true : false);
						}
						if(group.bow.visible){
							panel[type+"Attack"]["a"+i].visible = ((i-1<rangerFullAttack()) ? true : false);
							panel[type+"Attack"]["a"+i].alpha = ((_global.playerGroup.rightDeath)?0.5:1);
						} else {
							panel[type+"Attack"]["a"+i].visible = ((i-1<rangerFullAttack()) ? true : false);
							panel[type+"Attack"]["a"+i].alpha = ((i-1<rangerHalfAttack()) ? ((_global.playerGroup.rightDeath)?0.5:1) : 0.25);
						}
					} else if(slot==Slot.LEFT){
						panel[type+"Attack"].gotoAndStop((_global.playerGroup.sling.visible)?2:1);
						panel.heal.gotoAndStop(group.cure.currentFrame);
						panel.healPower_txt.htmlText = /*(s)?*/""+((_global.playerGroup.leftDeath)?"<font color='#118811'>"+(_global.game.cure.currentFrame+1)+"</font>":(((_options.bonus==4)?2:0)+3+(_global.game.cure.currentFrame + _global.playerGroup.leftUnit.skill) + ((_global.game.loot.indexOf(ItemType.ANKH)>-1)?1:0) + ((_global.game.loot.indexOf(ItemType.DIVINE_CROWN)>-1)?1:0)))/*:"";*/
						if(i<=5) {
							if(i<=3) {
								panel[type+"Special"]["s"+i].visible = ([-1, -1, 10000, 50000][i]<_global.game.leftExp/*&&s*/||((i==2&&group.cure.currentFrame>=2)||(i==3&&group.cure.currentFrame>=3)))?true:false;
								if(i==1){
									if(_global.game.leftExp<2500) panel[type+"Special"]["s"+i].alpha = 0.5 else panel[type+"Special"]["s"+i].alpha = 1;
								} else if(i==2){
									if(group.cure.currentFrame==1) panel[type+"Special"]["s"+i].alpha = 0.5 else panel[type+"Special"]["s"+i].alpha = 1;
								} else if(i==3){
									if(group.cure.currentFrame<3) panel[type+"Special"]["s"+i].alpha = 0.5 else panel[type+"Special"]["s"+i].alpha = 1;
								}
							}
							panel[type+"Attack"]["a"+i].visible = ((i-1<a) ? true : false);
							panel[type+"Action"]["m"+i].gotoAndStop(group.cure.currentFrame);
							panel[type+"Action"]["m"+i].visible = ((i-1<s) ? true : false);
							panel[type+"Action"]["d"+i].visible = ((i-1<3+group.leftActionMax) ? true : false);
							if(!group.leftAction) panel.scrolls_txt.htmlText = "<font color='#333333'>"+s+"/"+(3+group.leftActionMax)+"</font>" else panel.scrolls_txt.htmlText = s+"/"+(3+group.leftActionMax);
						} else panel[type+"Attack"]["a"+i].visible = false;
					} else if(slot==Slot.BOTTOM){
						panel[type+"Attack"].gotoAndStop((_global.playerGroup.staff.visible)?((_global.game.loot.indexOf(ItemType.ROD)>-1)?3:2):1);
						if(!group.bottomAction) panel.spells_txt.htmlText = "<font color='#333333'>"+s+"/"+(3+group.bottomActionMax)+"</font>" else panel.spells_txt.htmlText = s+"/"+(3+group.bottomActionMax);
						panel.spell.gotoAndStop(group.spell.currentFrame);
						panel.spellPower_txt.htmlText = /*(s)?*/((_global.playerGroup.bottomDeath)?"<font color='#116688'>"+_global.game.spell.currentFrame+"</font>":((_global.game.spell.currentFrame + _global.playerGroup.bottomUnit.skill>1)?((_global.game.spell.currentFrame==1)?"<font color='#33AADD'>"+(_global.game.spell.currentFrame + _global.playerGroup.bottomUnit.skill)+"</font>":"<font color='#cc9933'>"+(_global.game.spell.currentFrame + _global.playerGroup.bottomUnit.skill)+"</font>"):""+(_global.game.spell.currentFrame + _global.playerGroup.bottomUnit.skill)))/*:""*/;
						if(i<=3) {
							panel[type+"Special"]["m"+i].visible = ([-1, -1, 25000, 100000][i]<_global.game.bottomExp/*&&s*/||((i==2&&group.spell.currentFrame>=2)||(i==3&&group.spell.currentFrame>=3)))?true:false;
							if(i==1){
								if(_global.playerGroup.bottomUnit.skill<1&&_global.game.bottomExp<5000) panel[type+"Special"]["m"+i].alpha = 0.5 else panel[type+"Special"]["m"+i].alpha = 1;
							} else if(i==2){
								if(group.spell.currentFrame==1) panel[type+"Special"]["m"+i].alpha = 0.5 else panel[type+"Special"]["m"+i].alpha = 1;
							} else if(i==3){
								if(group.spell.currentFrame<3) panel[type+"Special"]["m"+i].alpha = 0.5 else panel[type+"Special"]["m"+i].alpha = 1;
							}
							panel[type+"Action"]["m"+i].gotoAndStop(group.spell.currentFrame);
							panel[type+"Action"]["m"+i].visible = ((i-1<s) ? true : false);
						}
						panel[type+"Attack"]["a"+i].visible = ((i-1<a) ? true : false);
					}
				}
				if(_global.game.score>=10000 && !treasureWon){
					//_global.game.score-=10000;
					//addText("<font color='#999999'>The excess gold was traded for a card.</font>");
					treasureWon = true;
					if(_global.shell.postMedal("Treasure")) _global.game.acquireCard("Treasure", "<font color='#ffffff'>Acquired the Treasure Card!</font>");
				}
				if(_global.game.score+_global.game.spentGold+_global.game.paid>=25000 && !dragonsTreasureWon){
					dragonsTreasureWon = true;
					if(_global.shell.postMedal("Dragons Treasure")) _global.game.acquireCard("Dragons Treasure", "<font color='#ffffff'>Acquired the Dragons Treasure Card!</font>");
				}
				if(_global.game.killed.length>=1000 && !cataclysmWon){
					cataclysmWon = true;
					if(_global.shell.postMedal("Cataclysm")) _global.game.acquireCard("Cataclysm", "<font color='#ffffff'><b>Acquired the Cataclysm Spell Card!</b></font>");
				}
			}
			
			var turnOrder:Array = [];
			if(!group.bottomDeath && group.spell.visible) turnOrder.push(3);
			if(!group.rightDeath && group.bow.visible) turnOrder.push(2);
			if(!group.topDeath && !group.shield.visible) turnOrder.push(1);
			if(!group.rightDeath && !group.bow.visible) turnOrder.push(2);
			if(!group.bottomDeath && !group.spell.visible) turnOrder.push(3);
			if(!group.leftDeath) turnOrder.push(4);
			if(!group.topDeath && group.shield.visible) turnOrder.push(1);
			for(i = 1; i <= turnOrder.length; i++){
				panel["order_"+turnOrder[i-1]].gotoAndStop(i);
			}
		}
		public function setScore(group:UnitGroup):void{
			var scr:int = _global.game.getOverallScore() || 0;
			var t:int;
			var overallHiScore:int = (_global.shell.overallHiScore1||100000);
			if(panel.dusc_mc.currentFrame > 1){
				if(_global.game.score>=10000) {
					panel.dusc_mc.gold_txt.htmlText = "<b>"+int(_global.game.score/1000)+"K</b>";
				} else {
					panel.dusc_mc.gold_txt.htmlText = "<b>"+_global.game.score+"</b>";
				}
				panel.dusc_mc.score_mc.score_txt.htmlText = ((resurrects)?"  ":"")+"<b>"+scr+((resurrects)?"<font size='12' color='#888888'>/"+(resurrects+1)+"</font>":"")+"</b>";
				panel.dusc_mc.score_mc.hiscore_txt.htmlText = ""+((scr<(_global.shell.dailyHiScore || overallHiScore*0.05)) ? /*int(_global.shell.dailyHiScore/1000)+"K-"+*/int(overallHiScore/1000)+"K-":
					((scr<(_global.shell.weeklyHiScore || overallHiScore*0.1))?/*int(_global.shell.weeklyHiScore/1000)+"K-"+*/int(overallHiScore/1000)+"K-":
						((scr<(_global.shell.monthlyHiScore || overallHiScore*0.25))?/*int(_global.shell.monthlyHiScore/1000)+"K-"+*/int(overallHiScore/1000)+"K-":
							((scr<(_global.shell.overallHiScore3 || overallHiScore*0.5))?/*int(_global.shell.overallHiScore3/1000)+"K-"+*/int(overallHiScore/1000)+"K-":
								((scr<(_global.shell.overallHiScore2 || overallHiScore*0.75))?/*int(_global.shell.overallHiScore2/1000)+"K-"+*/int(overallHiScore/1000)+"K-":
									((scr<overallHiScore)?overallHiScore+"!": 
										"-MASTER LEADER-"
									)
								)
							)
						)
					)
				);
				panel.dusc_mc.level_mc.gotoAndStop(_global.game.level+1);
				_global.shell.overallHiScore1;
				_global.shell.overallHiScore2;
				_global.shell.overallHiScore3;
				_global.shell.monthlyHiScore;
				_global.shell.weeklyHiScore;
				if(scr>_global.shell.overallHiScore1){
					panel.dusc_mc.score_mc.dots.scaleX = 2;
					panel.dusc_mc.score_mc.dots.alpha = 0.5;
				} else {
					panel.dusc_mc.score_mc.dots.scaleX = 1 + ((scr/_global.shell.overallHiScore1)*2.5);
					panel.dusc_mc.score_mc.dots.alpha = 0.4 + ((scr/_global.shell.overallHiScore1)/2);
				}
				if(scr<((_global.shell.dailyHiScore)?_global.shell.dailyHiScore : overallHiScore*0.05)) {
					panel.dusc_mc.score_mc.green_flag.scaleX = 1;
					t = 25 + (panel.dusc_mc.score_mc.black_flag.x-20)* ((((_global.shell.dailyHiScore)?_global.shell.dailyHiScore : overallHiScore*0.05)-scr)/(overallHiScore-scr));
					if(t < panel.dusc_mc.score_mc.black_flag.x*0.65) t *= 0.70;
					Tween.to(panel.dusc_mc.score_mc.green_flag, {x:t}, 5*_options.skipFrames);
					if(panel.dusc_mc.score_mc.man.x != 1) Tween.to(panel.dusc_mc.score_mc.man, {x:1});
					//panel.dusc_mc.score_mc.beat.beat_txt.htmlText = "";
				} else {
					if(panel.dusc_mc.score_mc.green_flag.scaleX>0){
						SoundEffect.congrats();
						_global.playerGroup.topUnit.critical("<font color='#99cc99'>Daily Hi-Score!</font>");
					}
					Tween.to(panel.dusc_mc.score_mc.green_flag, {scaleX:-1, x:12}, 5*_options.skipFrames);
					if(panel.dusc_mc.score_mc.man.x < 18) Tween.to(panel.dusc_mc.score_mc.man, {x:18})// else panel.dusc_mc.score_mc.man.x=18;
					//if(scr<(_global.shell.weeklyHiScore || overallHiScore*0.1)) Tween.to(panel.dusc_mc.score_mc.man, {x:18});
					//panel.dusc_mc.score_mc.beat.beat_txt.htmlText = "Daily Hi-score!";
				}
				panel.dusc_mc.score_mc.man.gotoAndStop((panel.dusc_mc.score_mc.man.currentFrame==1)?2:1);//trace(panel.dusc_mc.score_mc.man.currentFrame)
				if(scr<((_global.shell.weeklyHiScore)?_global.shell.weeklyHiScore : overallHiScore*0.1)) {
					panel.dusc_mc.score_mc.blue_flag.scaleX = 1;
					t = 35 + (panel.dusc_mc.score_mc.black_flag.x-30)* ((((_global.shell.weeklyHiScore)?_global.shell.weeklyHiScore : overallHiScore*0.1)-scr)/(overallHiScore-scr));
					if(t < panel.dusc_mc.score_mc.black_flag.x*0.65) t *= 0.70;
					Tween.to(panel.dusc_mc.score_mc.blue_flag, {x:t}, 5*_options.skipFrames);
				} else {
					if(panel.dusc_mc.score_mc.blue_flag.scaleX>0){
						SoundEffect.congrats();
						_global.playerGroup.topUnit.critical("<font color='#99cc99'>Weekly Hi-Score!</font>");
					}
					Tween.to(panel.dusc_mc.score_mc.blue_flag, {scaleX:-1, x:22}, 5*_options.skipFrames);
					if(panel.dusc_mc.score_mc.man.x < 28 && scr<(_global.shell.monthlyHiScore||overallHiScore*0.25)) Tween.to(panel.dusc_mc.score_mc.man, {x:28});
					//if(scr<(_global.shell.monthlyHiScore || overallHiScore*0.25)) Tween.to(panel.dusc_mc.score_mc.man, {x:28});
					//panel.dusc_mc.score_mc.beat.beat_txt.htmlText = " Weekly Hi-score!";
				}
				
				if(scr<((_global.shell.monthlyHiScore)?_global.shell.monthlyHiScore : overallHiScore*0.25)) {
					panel.dusc_mc.score_mc.yellow_flag.scaleX = 1;
					t = 45 + (panel.dusc_mc.score_mc.black_flag.x-40)* ((((_global.shell.monthlyHiScore)?_global.shell.monthlyHiScore : overallHiScore*0.25)-scr)/(overallHiScore-scr));
					if(t < panel.dusc_mc.score_mc.black_flag.x*0.65) t *= 0.70;
					Tween.to(panel.dusc_mc.score_mc.yellow_flag, {x:t}, 5*_options.skipFrames);
				} else {
					if(panel.dusc_mc.score_mc.yellow_flag.scaleX>0){
						SoundEffect.congrats();
						_global.playerGroup.topUnit.critical("<font color='#99cc99'>Monthly Hi-Score!</font>");
					}
					Tween.to(panel.dusc_mc.score_mc.yellow_flag, {scaleX:-1, x:32}, 5*_options.skipFrames);
					if(panel.dusc_mc.score_mc.man.x < 38 && scr<(_global.shell.overallHiScore3||overallHiScore*0.5)) Tween.to(panel.dusc_mc.score_mc.man, {x:38});
					//if(scr<(_global.shell.overallHiScore3 || overallHiScore*0.5)) Tween.to(panel.dusc_mc.score_mc.man, {x:38});
					//panel.dusc_mc.score_mc.beat.beat_txt.htmlText = "  Monthly Hi-score!";
				}
				
				if(scr<((_global.shell.overallHiScore3)?_global.shell.overallHiScore3 : overallHiScore*0.5)) {
					panel.dusc_mc.score_mc.red_flag.scaleX = 1;
					t = 55 + (panel.dusc_mc.score_mc.black_flag.x-50)* ((((_global.shell.overallHiScore3)?_global.shell.overallHiScore3 : overallHiScore*0.5)-scr)/(overallHiScore-scr));
					if(t < panel.dusc_mc.score_mc.black_flag.x*0.65) t *= 0.70;
					Tween.to(panel.dusc_mc.score_mc.red_flag, {x:t}, 5*_options.skipFrames);
				} else {
					if(panel.dusc_mc.score_mc.red_flag.scaleX>0){
						SoundEffect.congrats();
						_global.playerGroup.topUnit.critical("<font color='#99cc99'>Third Place!</font>");
					}
					Tween.to(panel.dusc_mc.score_mc.red_flag, {scaleX:-1, x:42}, 5*_options.skipFrames);
					if(panel.dusc_mc.score_mc.man.x < 48 && scr<(_global.shell.overallHiScore2||overallHiScore*0.75)) Tween.to(panel.dusc_mc.score_mc.man, {x:48});
					//if(scr<(_global.shell.overallHiScore2 || overallHiScore*0.75))Tween.to(panel.dusc_mc.score_mc.man, {x:48});
					//panel.dusc_mc.score_mc.beat.beat_txt.htmlText = "   Backup Support Leader!";
				}
				
				if(scr<((_global.shell.overallHiScore2)?_global.shell.overallHiScore2 : overallHiScore*0.75)) {
					panel.dusc_mc.score_mc.dark_flag.scaleX = 1;
					t = 65 + (panel.dusc_mc.score_mc.black_flag.x-60)* ((((_global.shell.overallHiScore2)?_global.shell.overallHiScore2 : overallHiScore*0.75)-scr)/(overallHiScore-scr));
					if(t < panel.dusc_mc.score_mc.black_flag.x*0.65) t *= 0.70;
					Tween.to(panel.dusc_mc.score_mc.dark_flag, {x:t}, 5*_options.skipFrames);
				} else {
					if(panel.dusc_mc.score_mc.dark_flag.scaleX>0){
						SoundEffect.congrats();
						_global.playerGroup.topUnit.critical("<font color='#99cc99'>Second Place!</font>");
					}
					Tween.to(panel.dusc_mc.score_mc.dark_flag, {scaleX:-1, x:52}, 5*_options.skipFrames);
					if(panel.dusc_mc.score_mc.man.x < 58 && scr<overallHiScore) Tween.to(panel.dusc_mc.score_mc.man, {x:58});
					//if(scr<overallHiScore) Tween.to(panel.dusc_mc.score_mc.man, {x:58});
					//panel.dusc_mc.score_mc.beat.beat_txt.htmlText = "    Minor Leader!!";
				}
				
				if(scr<overallHiScore) {
					Tween.to(panel.dusc_mc.score_mc.black_flag, {scaleX:1, x:256}, 10*_options.skipFrames);
					if(scr>(_global.shell.overallHiScore2||overallHiScore*0.75)) Tween.to(panel.dusc_mc.score_mc.man, {x:64+180*((scr-((_global.shell.overallHiScore2)?_global.shell.overallHiScore2 : overallHiScore*0.75))/(overallHiScore-(_global.shell.overallHiScore2||overallHiScore*0.75)))}, 5*_options.skipFrames);
					//else panel.dusc_mc.score_mc.man.x = 1;
				} else {
					if(panel.dusc_mc.score_mc.black_flag.scaleX>0){
						SoundEffect.congrats();
						_global.playerGroup.topUnit.critical("<font color='#99cc99'>First Place!</font>");
					}
					Tween.to(panel.dusc_mc.score_mc.black_flag, {scaleX:-1, x:62}, 10*_options.skipFrames);
					Tween.to(panel.dusc_mc.score_mc.man, {x:250});
					//panel.dusc_mc.score_mc.beat.beat_txt.htmlText = "     Primary Leader!!!";
				}
			}
			var tmpSpc:String = "      ";
			var tmpSpc2:String = "     ";
			var tmpStr:String = "000000";
			var tmpStr2:String = "0000";
			if(_global.game){
				panel.topExp_txt.text = (_global.playerGroup.topUnit.strength+1)+((_global.playerGroup.topUnit.strength+1<10)?" ":"")+tmpSpc+tmpStr2.substr(_global.game.topKilled.length.toString().length) + _global.game.topKilled.length.toString()+tmpSpc2+tmpStr.substr(_global.game.topExp.toString().length) + _global.game.topExp.toString();
				panel.rightExp_txt.text = (_global.playerGroup.rightUnit.strength+1)+((_global.playerGroup.rightUnit.strength+1<10)?" ":"")+tmpSpc+tmpStr2.substr(_global.game.rightKilled.length.toString().length) + _global.game.rightKilled.length.toString()+tmpSpc2+tmpStr.substr(_global.game.rightExp.toString().length) + _global.game.rightExp.toString();
				panel.bottomExp_txt.text = (_global.playerGroup.bottomUnit.strength+1)+((_global.playerGroup.bottomUnit.strength+1<10)?" ":"")+tmpSpc+tmpStr2.substr(_global.game.bottomKilled.length.toString().length) + _global.game.bottomKilled.length.toString()+tmpSpc2+tmpStr.substr(_global.game.bottomExp.toString().length) + _global.game.bottomExp.toString();
				panel.leftExp_txt.text = (_global.playerGroup.leftUnit.strength+1)+((_global.playerGroup.leftUnit.strength+1<10)?" ":"")+tmpSpc+tmpStr2.substr(_global.game.leftKilled.length.toString().length) + _global.game.leftKilled.length.toString()+tmpSpc2+tmpStr.substr(_global.game.leftExp.toString().length) + _global.game.leftExp.toString();
				panel.exp_txt.text = tmpStr2.substr(_global.game.killed.length.toString().length) + _global.game.killed.length.toString()+tmpSpc2+tmpStr.substr(_global.game.exp.toString().length) + _global.game.exp.toString();
				panel.crit_txt.text = ((_global.game.crits<10)?"00":((_global.game.crits<100)?"0":""))+_global.game.crits;
				panel.loot_txt.text = ((_global.game.loot.length<10)?"0":"")+_global.game.loot.length;
			} else {
				panel.topExp_txt.text = "1 "+tmpSpc+tmpStr2+tmpSpc2+tmpStr;
				panel.rightExp_txt.text = "1 "+tmpSpc+tmpStr2+tmpSpc2+tmpStr;
				panel.bottomExp_txt.text = "1 "+tmpSpc+tmpStr2+tmpSpc2+tmpStr;
				panel.leftExp_txt.text = "1 "+tmpSpc+tmpStr2+tmpSpc2+tmpStr;
				panel.exp_txt.text = tmpStr2+tmpSpc2+tmpStr;
			}
			topKey.gotoAndStop(keyArray[_global.game.level][0]);
			rightKey.gotoAndStop(keyArray[_global.game.level][1]);
			leftKey.gotoAndStop(keyArray[_global.game.level][2]);
			bottomKey.gotoAndStop(keyArray[_global.game.level][3]);
			if(_global.game.level==3){
				topKey.scaleX = 1;
				topKey.scaleY = 1;
				leftKey.scaleX = 1;
				leftKey.scaleY = 1;
				rightKey.scaleX = 1;
				rightKey.scaleY = 1;
				bottomKey.scaleX = 1;
				bottomKey.scaleY = 1;
			} else {
				topKey.scaleX = 0.75;
				topKey.scaleY = 0.75;
				leftKey.scaleX = 0.75;
				leftKey.scaleY = 0.75;
				rightKey.scaleX = 0.75;
				rightKey.scaleY = 0.75;
				bottomKey.scaleX = 0.75;
				bottomKey.scaleY = 0.75;
			}
			if(group.topKey) {
				//topKey.filters = [];
				topKey.alpha = 1;
			} else {
				//topKey.filters = [_global.dungeon.adjustColors(0,-75,50,-50)];
				topKey.alpha = 0.3;
			}
			if(group.rightKey) {
				//rightKey.filters = [];
				rightKey.alpha = 1;
			} else {
				//rightKey.filters = [_global.dungeon.adjustColors(0,-75,50,-50)];
				rightKey.alpha = 0.3;
			}
			if(group.leftKey) {
				//leftKey.filters = [];
				leftKey.alpha = 1;
			} else {
				//leftKey.filters = [_global.dungeon.adjustColors(0,-75,50,-50)];
				leftKey.alpha = 0.3;
			}
			if(group.bottomKey) {
				//bottomKey.filters = [];
				bottomKey.alpha = 1;
			} else {
				//bottomKey.filters = [_global.dungeon.adjustColors(0,-75,50,-50)];
				bottomKey.alpha = 0.3;
			}
		}
		
		
		public function clicked(evt:MouseEvent):void{
			action(evt.currentTarget.name, (((gameOverlay.currentLabel!="show_2"&&gameOverlay.currentLabel!="prep_2") || !tutorialState) && !SoundFX.isNowPlaying("FX_boss")));//@@
		}
		
		private function showCard(_n:String, _active:Boolean = true, _desc:Boolean = false):void{_global.shell.track("showCard:"+_n);
			currentCard = _n;
			var bmp:BitmapData;
			var bitmap:Bitmap;
			var def:Class;
			var thumb:Sprite;
			function getCard(_nm:String):Sprite {
				var i:int = _global.shell.cards.indexOf(_nm);
				//if(i<0){trace(_nm);}
				thumb = new Sprite();
				if(_active) thumb.alpha = 1;
					else thumb.alpha = .5;
					SoundEffect.drawSpell(0.5);
					SoundEffect.uiClick(2,.25);//
				if(i>-1){
					SoundEffect.drawSpell(0.25);
					SoundEffect.uiClick(1,.1);//
					thumb.name = _global.shell.cards[i];
					def = getDefinitionByName("Card_"+_global.shell.cards[i]) as Class;
					bmp = new def() as BitmapData;
					bitmap = new Bitmap(bmp);
					thumb.addChild(bitmap);
					bitmap.scaleX = 2;
					bitmap.scaleY = 2;
					bitmap.x = 10;
					bitmap.y = -2;
					thumb.x = 0;
					thumb.y = 16;//trace(_global.shell.cards[_n], _n)
					var label:TextField = getTextField("<b><u>"+_global.game.getName(_n,0,true)+"</u><font size='10'"+((!Local.vars.cards[_global.shell.cards[_global.shell.cards.indexOf(_n)]])?" color='#555555'":"")+"></b>\r\ramount: <font size='12'>"+Local.vars.cards[_global.shell.cards[_global.shell.cards.indexOf(_n)]]+"</font>\r\r  score: <b>"+((_active)?UnitStat[_n].exp:"?")+"</b>"+((!Local.vars.cards[_global.shell.cards[_global.shell.cards.indexOf(_n)]])?"</font><font size='10'>":"") + ("\r\r"+((_active)?Shell.CARDS_RANK[Shell.CARDS_RANG.indexOf(Shell.CARDS_COST[_global.shell.cards.indexOf(_n)])]:"<font color='#3e3e3e'>???</font>")+"</font></b>"), 0, 15, 0xffffff, true);
					thumb.addChild(label);
					label.x = 0;
					label.y = 4;
					label.width = 188;
					label.multiline = true;
					label.wordWrap = true;
					label.autoSize = TextFieldAutoSize.RIGHT;
					label.filters=[new GlowFilter(0x111111, 1, 5, 5, 5)];
					var description:TextField = getTextField("<b>"+Shell.CARDS_DESCRIPTION[Shell.CARDS_INDEX[_global.shell.cards.indexOf(_n)]]+"</b>", 0, 12, 0x999999);
					description.width = 200;
					description.multiline = true;
					description.wordWrap = true;
					if(_desc) thumb.addChild(description);
					description.x = 6;
					description.y = 104;
				} else {//trace("WARNING:"+_nm);
					def = getDefinitionByName("Card_") as Class;
					bmp = new def() as BitmapData;
					bitmap = new Bitmap(bmp);
					bitmap.alpha = .5;
					thumb.addChild(bitmap);
					bitmap.scaleX = 2;
					bitmap.scaleY = 2;
					bitmap.x = 10;
					bitmap.y = -2;
					thumb.x = 0;
					thumb.y = 16;
					
					var tmp:TextField = getTextField("<b>"+_nm+"</b>", 0, 15, 0xffffff, true);
					thumb.addChild(tmp);
					tmp.x = 0;
					tmp.y = 4;
					tmp.width = 188;
					tmp.multiline = true;
					tmp.wordWrap = true;
					tmp.autoSize = TextFieldAutoSize.RIGHT;
					tmp.filters=[new GlowFilter(0x111111, 1, 5, 5, 5)];
				}
				return thumb;
			}
			removeCards();
			panel.card.addChild(getCard(_n));
			var cardClose:CloseSmallButton = new CloseSmallButton();
			panel.card.addChild(cardClose);
			cardClose.x = 182; cardClose.y = -2;
			cardClose.addEventListener(MouseEvent.CLICK, cardCloseClick);
			function cardCloseClick(evt:MouseEvent){
				evt.target.removeEventListener(MouseEvent.CLICK, cardCloseClick);
				removeCard();
				SoundFX.playSound("FX_select", 0.1, true);
				action("card_btn");
				currentCard = null;
			}
		}
		public function removeCards():void{
			while(panel.card.numChildren>1){
				panel.card.removeChildAt(1);
			}
		}
		public function removeCard():void{
			removeCards();
			//panel.card.addChild(getCard(_global.shell.cards.indexOf(_n)));
			panel.card.visible = false;
		}
		public function knightFullAttack():int{
			var att:int = UnitStat.knight.attack;
			for(var ii:int = 0; ii < _global.game.loot.length; ii++){
				if(_global.game.loot[ii] == 8) att ++;
				if(_global.game.loot[ii] == 13) att ++;
				if(_global.game.loot[ii] == 18) att ++;
			}
			return att + ((_global.game.topExp>=5000)?((_global.game.topExp>=100000)?3:2):((_global.game.topExp>=1000)?1:0));
		}
		public function knightHalfAttack():int{
			return knightFullAttack() + ((_global.game.topExp>=200000)?1:0) - ((_global.game.shield.currentFrame==1||_global.game.shield.currentFrame==4)?1:((_global.game.shield.currentFrame==5)?2:_global.game.shield.currentFrame));//+int(_global.game.shield.currentFrame/4)
		}
		public function rangerFullAttack():int{
			return 2 + _global.game.bow.currentFrame + ((_global.game.rightExp>=50000 /*|| _global.game.loot.indexOf(ItemType.SWORD_5)>-1*/)?1:0) + ((_global.game.rightExp>=200000)?1:0);
		}
		public function rangerHalfAttack():int{
			return 1 + ((_global.game.loot.indexOf(ItemType.SWORD_5)>-1)?1:0) + ((_global.game.rightExp>=200000)?1:0) + ((_global.game.loot.indexOf(ItemType.SWORD)>-1)?1:0) + ((_global.game.loot.indexOf(ItemType.SWORD_6)>-1)?1:0) + ((_global.game.rightExp>=50000)?1:0) + ((_global.game.rightExp>=2500)?1:0);
		}
		public function action(_name:String, _force:Boolean = false):Boolean{//trace(_force, _global.game.flippedShield, _global.game.isInteractionAllowed());
			switch(_name){
				case UnitType.KNIGHT://trace(panel.overlay.visible , tutorialState , gameOverlay.currentLabel)
					if(_global.game.playerGroup.alpha<1 || panel.console.height>100 || (!_global.game.isInteractionAllowed() /*&& !_options.revive*/ && _global.game.flippedShield && _force)){profileUpdate(Slot.TOP);return false;}//@@
					_global.game.flippedShield = true;
					if(!_global.playerGroup.topDeath) {//trace(panel.overlay.visible, tutorialState, activeQuestion)
						if((panel.overlay.visible && !tutorialState && gameOverlay.currentLabel == "king") || gameOverlay.currentLabel.substr(0,6)=="shown_"){
							profileUpdate(Slot.TOP);
							return false;
						}
						if(tutorialState==2){//trace("GG", activeQuestion);//activeQuestion && 
							if(activeQuestion){
								Tween.to(gameOverlay, {alpha:1}, 15*_options.skipFrames);
								gameOverlay.gotoAndPlay("prep_"+tutorialState);
								_global.game.locked = true;
								activeQuestion = null;
							} else {
								freeFragsPressed();
							}
						} else
						if(activeQuestion && !panel.overlay.visible && tutorialState < 2){
							SoundEffect.negative();
							return false;
						} else if(activeQuestion && (panel.overlay.visible || tutorialState==5)){
							if(!tutorialState){
								overlayClick();
								return false;
							} else if(tutorialState==5){
								overlayClick();
								cancel();
								return false;
							}
						}
						if(knightAction == Action.ATTACK){//SoundEffect
							if(_global.playerGroup.topAction){
								SoundEffect.drawShield();
								knightAction = Action.DEFEND;
								panel.shield.visible = true;
								_global.game.shield.visible = true;
								_global.playerGroup.topAttack = knightHalfAttack();
								_global.game.setHealth();
								//profileUpdate(Slot.TOP);
							} else SoundEffect.negative();
							if(panel.profile.visible) profileUpdate(Slot.TOP, true);
						} else {
							knightAction = Action.ATTACK;
							panel.shield.visible = false;
							_global.game.shield.visible = false;
							_global.playerGroup.topAttack = knightFullAttack();
							_global.game.setHealth();
							SoundEffect.hide();
							if(panel.profile.visible) profileUpdate(Slot.TOP, true);
							//profileUpdate(Slot.TOP);
						}
					} else {
						SoundEffect.negative();
						return true;
					}
					break;
				case UnitType.RANGER:
					if(_global.game.playerGroup.alpha<1 || panel.console.height>100){profileUpdate(Slot.RIGHT);return false;}
					if(!_global.playerGroup.rightDeath || (_global.playerGroup.rightDeath&&_global.playerGroup.rightUnit.playing)) {// && !activeQuestion
						if((panel.overlay.visible && !tutorialState && gameOverlay.currentLabel == "king") || gameOverlay.currentLabel.substr(0,6)=="shown_"){
							profileUpdate(Slot.RIGHT);
							return false;
						}
						if(tutorialState==4){
							if(activeQuestion){
								Tween.to(gameOverlay, {alpha:1}, 15*_options.skipFrames);
								gameOverlay.gotoAndPlay("prep_"+tutorialState);
								_global.game.locked = true;
								activeQuestion = null;
							} else {
								evenFragsPressed();
							}
						} else
						if(activeQuestion && !panel.overlay.visible && tutorialState < 4){
							SoundEffect.negative();
							return false;
						} else if(activeQuestion && (panel.overlay.visible || tutorialState==5)){
							if(!tutorialState){
								overlayClick();
								return false;
							} else if(tutorialState==5){
								overlayClick();
								cancel();
								return false;
							}
						}
						if(rangerAction == Action.ATTACK){
							if(_global.playerGroup.rightAction){
								SoundEffect.drawBow();
								rangerAction = Action.BOW;
								panel.bow.visible = true;
								_global.game.bow.visible = true;
								_global.playerGroup.rightAttack = rangerFullAttack();
								_global.game.setHealth();
								if(panel.profile.visible) profileUpdate(Slot.RIGHT, true);
							} else SoundEffect.negative();
						} else {
							rangerAction = Action.ATTACK;
							panel.bow.visible = false;
							_global.game.bow.visible = false;
							_global.playerGroup.rightAttack = rangerHalfAttack();
							_global.game.setHealth();
							SoundEffect.hide();
							if(panel.profile.visible) profileUpdate(Slot.RIGHT, true);
						}
						//profileUpdate(Slot.RIGHT);
					} else {SoundEffect.negative();return true;}
					//} else {SoundEffect.negative();return true;}
					break;
				case UnitType.WIZARD:
					if(_global.game.playerGroup.alpha<1 || panel.console.height>100){profileUpdate(Slot.BOTTOM);return false;}
					if(!_global.playerGroup.bottomDeath  || (_global.playerGroup.bottomDeath&&_global.playerGroup.bottomUnit.playing)) {
						if((panel.overlay.visible && !tutorialState && gameOverlay.currentLabel == "king") || gameOverlay.currentLabel.substr(0,6)=="shown_"){
							profileUpdate(Slot.BOTTOM);
							return false;
						}
						if(tutorialState==3){
							if(activeQuestion){
								Tween.to(gameOverlay, {alpha:1}, 15*_options.skipFrames);
								gameOverlay.gotoAndPlay("prep_"+tutorialState);
								_global.game.locked = true;
								activeQuestion = null;
							} else {
								moreFragsPressed();
							}
						} else
						if(activeQuestion && !panel.overlay.visible && tutorialState < 2){
							SoundEffect.negative();
							return false;
						} else if(activeQuestion && (panel.overlay.visible || tutorialState==5)){
							if(!tutorialState){
								overlayClick();
								return false;
							} else if(tutorialState==5){
								overlayClick();
								cancel();
								return false;
							}
						}
						if(wizardAction == Action.ATTACK){
							if(_global.playerGroup.bottomAction){
								SoundEffect.drawSpell();
								wizardAction = Action.SPELL;
								panel.spell.visible = true;
								_global.game.spell.visible = true;
								_global.game.setHealth();
								if(panel.profile.visible) profileUpdate(Slot.BOTTOM, true);
							} else SoundEffect.negative();
						} else {
							SoundEffect.hide();
							wizardAction = Action.ATTACK;
							panel.spell.visible = false;
							_global.game.spell.visible = false;
							_global.game.setHealth();
							if(panel.profile.visible) profileUpdate(Slot.BOTTOM, true);
						}
						//profileUpdate(Slot.BOTTOM);
						break;
					} else {SoundEffect.negative();return true;}
				case UnitType.CLERIC:
					if(_global.game.playerGroup.alpha<1 || panel.console.height>100){profileUpdate(Slot.LEFT);return false;}
					if(!_global.playerGroup.leftDeath  || (_global.playerGroup.leftDeath&&_global.playerGroup.leftUnit.playing)) {
						if((panel.overlay.visible && !tutorialState && gameOverlay.currentLabel == "king") || gameOverlay.currentLabel.substr(0,6)=="shown_"){
							profileUpdate(Slot.LEFT);
							return false;
						}
						if((!panel.overlay.visible && tutorialState < 4 && tutorialState > 0) || _global.game.schedule == "endgame"){//activeQuestion && 
							SoundEffect.negative();
							return cureReally;
						} else if(tutorialState==5){//activeQuestion && 
							if(gameOverlay.mess5.currentFrame == 1) {//trace("case1");
								//Tween.delay(360, finishTutorial);
								gameOverlay.gotoAndPlay("prep_5_1");
								gameOverlay.mess5.gotoAndPlay("show");
								//_global.game.showTavernButton();
								//showOverlay(-1);
								panel.overlay.gotoAndStop(tutorialState+3);
								panel.overlay.visible = true;
								panel.overlay.buttonMode = true;
								if(!panel.overlay.hasEventListener(MouseEvent.CLICK)) panel.overlay.addEventListener(MouseEvent.CLICK, overlayClick);
								SoundEffect.hide();
								castProtection(true, true, false, false, false);
								castProtection();
								tutTooltip();
								_global.playerGroup.leftAction-=1;
								_global.game.setHealth();
								return cureReally;
							} else {//trace("case11");
								tutorialState = 6;
								if(knightAction == Action.ATTACK && _global.game.playerGroup.shield.visible) Tween.delay(5*_options.skipFrames, action, UnitType.KNIGHT);
								Tween.delay(10*_options.skipFrames, function(){
									gameOverlay.mess5.gotoAndPlay("hide");
									gameOverlay.gotoAndPlay("show_55");
								});
								Tween.delay(15*_options.skipFrames, overlayClick);
								return cureReally;
							}
						} else if(tutorialState==6){//trace("case2");
							panel.overlay.visible = false;
							panel.overlay.buttonMode = false;
							panel.overlay.removeEventListener(MouseEvent.CLICK, overlayClick);
							SoundEffect.hide();
							overlayClick();
							hideOverlay();
							cancel();
						}
						if(panel.overlay.visible){//activeQuestion && 
							if(!tutorialState){//trace("case3");
								overlayClick();
								return cureReally;
							}
						}
						if(_global.playerGroup.leftAction && !_global.game.paused){
							var tmp:int = 0;
							var tmp2:int = 0;
							var limit:int = (_global.playerGroup.leftDeath) ? _global.game.cure.currentFrame+_global.playerGroup.leftUnit.skill : ((_options.bonus==4)?2:0)+3+(_global.game.cure.currentFrame + _global.playerGroup.leftUnit.skill) + ((_global.game.loot.indexOf(ItemType.ANKH)>-1)?1:0) + ((_global.game.loot.indexOf(ItemType.DIVINE_CROWN)>-1)?1:0);
							if((_global.playerGroup.topHealth < _global.playerGroup.topHealthMax && !_global.playerGroup.topDeath)/* || (_options.revive&&_global.playerGroup.topDeath)*/) tmp+=_global.playerGroup.topHealthMax-_global.playerGroup.topHealth;
							if((_global.playerGroup.rightHealth < _global.playerGroup.rightHealthMax && !_global.playerGroup.rightDeath)/* || (_options.revive&&_global.playerGroup.rightDeath)*/) tmp+=_global.playerGroup.rightHealthMax-_global.playerGroup.rightHealth;
							if((_global.playerGroup.leftHealth < _global.playerGroup.leftHealthMax && !_global.playerGroup.leftDeath)/* || (_options.revive&&_global.playerGroup.leftDeath)*/) tmp+=_global.playerGroup.leftHealthMax-_global.playerGroup.leftHealth;
							if((_global.playerGroup.bottomHealth < _global.playerGroup.bottomHealthMax && !_global.playerGroup.bottomDeath)/* || (_options.revive&&_global.playerGroup.bottomDeath)*/) tmp+=_global.playerGroup.bottomHealthMax-_global.playerGroup.bottomHealth;
							if(_global.playerGroup.topDeath && _options.revive) tmp+=_global.playerGroup.topHealthMax;
							if(_global.playerGroup.rightDeath && _options.revive) tmp+=_global.playerGroup.rightHealthMax;
							if(_global.playerGroup.bottomDeath && _options.revive) tmp+=_global.playerGroup.bottomHealthMax;
							if(!tmp) {
								if(cureReally && tmp){
									cureReally = false;
									castProtection();
									tmp2 = Math.round(_global.randomGen.random()*4);
									//castProtection(true, ((_global.randomGen.random()*limit>6||tmp2==1)?true:false), ((_global.randomGen.random()*limit>6||tmp2==2)?true:false), ((_global.randomGen.random()*limit>6||tmp2==3)?true:false), ((_global.randomGen.random()*limit>6||tmp2==4)?true:false));
									castProtection(true, ((_global.randomGen.random()*limit>4||tmp2==1)?true:false), ((_global.randomGen.random()*limit>4||tmp2==2)?true:false), ((_global.randomGen.random()*limit>4||tmp2==3)?true:false), ((_global.randomGen.random()*limit>4||tmp2==4)?true:false));
									_global.playerGroup.leftUnit.critical("<font color='#9966cc'>Protect!</font>");
									addText(_global.game.getName(_global.playerGroup.leftUnit.type,0x99ff99)+" cast Protection.");
									_global.playerGroup.leftAction-=1;
									_global.game.setHealth();
									return cureReally;
								} else {
									if(cureReally) {
										castProtection();
										tmp2 = Math.round(_global.randomGen.random()*4);
										castProtection(true, ((_global.randomGen.random()*limit>4||tmp2==1)?true:false), ((_global.randomGen.random()*limit>4||tmp2==2)?true:false), ((_global.randomGen.random()*limit>4||tmp2==3)?true:false), ((_global.randomGen.random()*limit>4||tmp2==4)?true:false));
										_global.playerGroup.leftUnit.critical("<font color='#bb6699'>Protect!</font>");
										addText(_global.game.getName(_global.playerGroup.leftUnit.type,0x99ff99)+" cast Protection.");
										_global.playerGroup.leftAction-=1;
										_global.game.setHealth();
										cureReally = false;
										return cureReally;
									} else {
										//(_global.game.getName(_global.playerGroup.leftUnit.type,0x99ff99)+" memorized a spell.");
										//_global.playerGroup.leftUnit.critical("<font color='#999999'>...</font>");
										SoundEffect.negative(); cureReally = true; return cureReally;
									}
								}
							} else _global.playerGroup.leftUnit.critical("<font color='#66dd66'>"+((_global.game.cure.currentFrame==1)?"  Cure!":((_global.game.cure.currentFrame==3)?"Restore!":"  Heal!"))+"!</font>");
							tmp2=0;
							SoundEffect.heal();
							panel.heal.visible = true;
							panel.heal.alpha = 1;
							panel.heal.scaleX = 1;
							panel.heal.scaleY = 1;
							panel.heal.x = panel.cleric.x + 19;
							panel.heal.y = panel.cleric.y + 21;
							Tween.to(panel.heal, {scaleX:4, scaleY:4, alpha:0}, 12*_options.skipFrames);
							_global.playerGroup.leftAction-=1;//trace("??",_options.revive)
							tmp = 0;
							var currentSlot:String = Slot.TOP;
							var revivedHealth:int = 0;
							var limitTries:int = 0;
							while(tmp<limit){
								limitTries++; if(limitTries>40) tmp = limit;
								if ((_global.playerGroup.topHealth >= _global.playerGroup.topHealthMax || (_global.playerGroup.topDeath&&!_options.revive)) &&
									(_global.playerGroup.leftHealth >= _global.playerGroup.leftHealthMax || (_global.playerGroup.leftDeath&&!_options.revive)) &&
									(_global.playerGroup.rightHealth >= _global.playerGroup.rightHealthMax || (_global.playerGroup.rightDeath&&!_options.revive)) &&
									(_global.playerGroup.bottomHealth >= _global.playerGroup.bottomHealthMax || (_global.playerGroup.bottomDeath&&!_options.revive))){
										tmp2 = limit-tmp; tmp = limit;
								} else if(currentSlot == Slot.TOP && _options.revive && _global.playerGroup.leftDeath){
									tmp += healUnit(Slot.LEFT, 1, true);
								} else if(currentSlot == Slot.TOP) {
									if(_global.playerGroup.topHealth < _global.playerGroup.topHealthMax || (_options.revive&&_global.playerGroup.topDeath)) tmp += healUnit(currentSlot, 1);
									currentSlot = Slot.LEFT;
								} else if(currentSlot == Slot.LEFT) {
									if(_global.playerGroup.leftHealth < _global.playerGroup.leftHealthMax || (_options.revive&&_global.playerGroup.leftDeath)) tmp += healUnit(currentSlot, 1);
									currentSlot = Slot.BOTTOM;
								} else if(currentSlot == Slot.BOTTOM) {
									if(_global.playerGroup.bottomHealth < _global.playerGroup.bottomHealthMax || (_options.revive&&_global.playerGroup.bottomDeath)) tmp += healUnit(currentSlot, 1);
									currentSlot = Slot.RIGHT;
								} else if(currentSlot == Slot.RIGHT) {
									if(_global.playerGroup.rightHealth < _global.playerGroup.rightHealthMax || (_options.revive&&_global.playerGroup.rightDeath)) tmp += healUnit(currentSlot, 1);
									currentSlot = Slot.TOP;
								}
							}
							if(tmp - revivedHealth > 0) addText(_global.game.getName(_global.playerGroup.leftUnit.type,0x99ff99)+" recovers "+(tmp-revivedHealth)+" health points total.");
							if(tmp2>=1){
								tmp = Math.round(_global.randomGen.random()*4);
								castProtection(true, true, ((_global.randomGen.random()*limit>4||tmp==2)?true:false), ((_global.randomGen.random()*limit>4||tmp==3)?true:false), ((_global.randomGen.random()*limit>4||tmp==4)?true:false));
								if(!tmp) castProtection(true, ((_global.randomGen.random()*tmp2>2)?true:false), ((_global.randomGen.random()*tmp2>3)?true:false), ((_global.randomGen.random()*tmp2>3)?true:false), ((_global.randomGen.random()*tmp2>3)?true:false))
								if(int(_global.randomGen.random()*(tmp2/2))) castProtection();
								if(tmp2>=4) castProtection();
							}
							_global.game.setHealth();
							
							function healUnit(_slot:String, _type:int, _f:Boolean = false):int{//trace("healUnit?",_slot, _type)
								if(_global.playerGroup[_slot+"Death"] && (!_global.playerGroup.leftDeath||_f)){//trace("Death?",_options.revive)
									if(!_options.revive) return 0;
									resurrects ++;
									SoundEffect.revive();
									_global.playerGroup.leftUnit.critical("<font color='#88ff88'>Revive!</font>");
									addText(_global.game.getName(_global.playerGroup[_slot+"Unit"].type,0x99ff99)+" was brought back to life!");
									revivedHealth += _global.playerGroup[_slot+"HealthMax"];
									_global.playerGroup[_slot+"Health"] = 1;
									_global.playerGroup[_slot+"Death"] = false;
									_global.game.resurrect(_global.playerGroup[_slot+"Unit"]);
									_global.game.enemyAutoAttack = false;
									_global.playerGroup[_slot+"Protection"] = 0;
									//_global.playerGroup[_slot+"Unit"].updateFilters();
									_global.playerGroup.updateStatus();
									if(_global.playerGroup.gloves.visible && _global.playerGroup[_slot+"Unit"].type == UnitType.KNIGHT){_global.playerGroup.gloves.alpha = 1;}
									if(_global.playerGroup.cloak.visible && _global.playerGroup[_slot+"Unit"].type == UnitType.RANGER){_global.playerGroup.cloak.alpha = 1;}
									if(_global.playerGroup.ring.visible && _global.playerGroup[_slot+"Unit"].type == UnitType.WIZARD){_global.playerGroup.ring.alpha = 1;}
									if(_global.playerGroup.staff.visible && _global.playerGroup[_slot+"Unit"].type == UnitType.WIZARD){_global.playerGroup.staff.alpha = 1;}
									if(_global.playerGroup.sling.visible && _global.playerGroup[_slot+"Unit"].type == UnitType.CLERIC){_global.playerGroup.sling.alpha = 1;}
									if(_global.playerGroup.crown.visible && _global.playerGroup[_slot+"Unit"].type == UnitType.CLERIC){_global.playerGroup.crown.alpha = 1;}
									if(_slot == Slot.TOP) {
										if(_global.playerGroup.topAction < 2 && _global.playerGroup.topDefense) _global.playerGroup.topAction = 1;
										if(knightAction == Action.ATTACK) action(UnitType.KNIGHT);
									} else if(_slot == Slot.RIGHT) {
										if(rangerAction == Action.BOW) action(UnitType.RANGER);
									} else if(_slot == Slot.LEFT && _global.playerGroup.ankh.visible){
										if(_global.playerGroup.ankh.alpha == 0.25) _global.playerGroup.ankh.alpha = 1;
									}
									return _global.playerGroup[_slot+"HealthMax"];
								}
								if(_global.playerGroup[_slot+"Health"] < _global.playerGroup[_slot+"HealthMax"] && !_global.playerGroup[_slot+"Death"]){
									_global.playerGroup[_slot+"Health"] += _type;
									if(_global.playerGroup[_slot+"Health"] > _global.playerGroup[_slot+"HealthMax"]) {
										_type -= _global.playerGroup[_slot+"Health"] - _global.playerGroup[_slot+"HealthMax"];
										_global.playerGroup[_slot+"Health"] = _global.playerGroup[_slot+"HealthMax"];
									}
									//tmpNum+=_type;
									//addText(_global.game.getName(_global.playerGroup.leftUnit.type)+" restores "+_type+"hp to "+_global.game.getName(_global.playerGroup[_slot+"Unit"].type)+".");
									_global.playerGroup[_slot+"Unit"].heal = 1;
									return _type;
								}
								return 0;
							}
							/*function healUnits(_index:int = 0):void{
								var tmpFrame:int = _index || _global.game.cure.currentFrame + _global.playerGroup.leftUnit.skill;
								tmp += healUnit(Slot.TOP, tmpFrame);
								tmp += healUnit(Slot.LEFT, tmpFrame);
								tmp += healUnit(Slot.RIGHT, tmpFrame);
								tmp += healUnit(Slot.BOTTOM, tmpFrame);
							}*/
						} else SoundEffect.negative();
					} else {SoundEffect.negative();return cureReally;}
					break;
				case "sound":
					if(soundMuted == true){
						if(Base.location == "foumartgames") Tracker.trackEvent("UI", "Sound ON", _global.game.getTime());
						soundMuted = false;
						panel.sound.alpha = 1;
						panel.sound.gotoAndStop(1);
						SoundFX.soundMute = false;
						_options.soundVolume = panel.settings.mutedSound;
						Local.vars.sound = soundMuted;
						Local.save();
						SoundFX.playSound("FX_select", 0.1, true);
						panel.settings.update();
					} else {
						if(Base.location == "foumartgames") Tracker.trackEvent("UI", "Sound OFF", _global.game.getTime());
						panel.settings.mutedSound = _options.soundVolume;
						soundMuted = true;
						panel.sound.alpha = 0.5;
						panel.sound.gotoAndStop(2);
						SoundFX.soundMute = true;
						Local.vars.sound = soundMuted;
						Local.save();
						panel.settings.update();
					}
					break;
				case "music":
					if(musicMuted == true){
						if(Base.location == "foumartgames") Tracker.trackEvent("UI", "Music ON", _global.game.getTime());
						musicMuted = false;
						_options.musicVolume = panel.settings.mutedMusic;
						panel.music.alpha = 1;
						panel.music.gotoAndStop(1);
						SoundFX.musicMute = false;
						Local.vars.music = musicMuted;
						Local.save();
						panel.settings.update();
					} else {
						if(Base.location == "foumartgames") Tracker.trackEvent("UI", "Music OFF", _global.game.getTime());
						panel.settings.mutedMusic = _options.musicVolume;
						musicMuted = true;
						panel.music.alpha = 0.5;
						panel.music.gotoAndStop(2);
						SoundFX.musicMute = true;
						Local.vars.music = musicMuted;
						Local.save();
						panel.settings.update();
					}
					break;
				case "info_btn":
					if(Base.location == "foumartgames") Tracker.trackEvent("UI", "View Info", _global.game.getTime());
					if(panel.info_btn.rect.visible){
						if(panel.info_btn.rect.currentFrame == 2){
							panel.info_btn.gotoAndStop(1);
							//SoundFX.playSound("FX_select", 0.1, true);
						} else {
							panel.info_btn.rect.visible = false;
							infoCloseClick();
							infoBars = false;
							panel.info.items_mc.visible = false;
							return false;
						}
					}
					infoBars = false;
					hideOrder();
					panel.info.visible = true;
					updateInfo();
					SoundEffect.uiClick();
					//trace(panel.overlay.currentFrame,panel.overlay.visible,questions.indexOf(activeQuestion))
					if((panel.overlay.currentFrame==1||panel.overlay.visible||(!panel.overlay.visible&&panel.overlay.currentFrame>1))&&(questions.indexOf(activeQuestion)==-1||questions.indexOf(activeQuestion)==5)) panel.info.items_mc.visible = true else panel.info.items_mc.visible = false;
					
					for(var u:int = 0; u < panel.info.items_mc.numChildren; u++){
						if(panel.info.items_mc.getChildAt(u) is MovieClip){//TYPE
							if(_global.game.loot.indexOf(ItemType.TYPE_INDEX.indexOf(ItemType.TYPE.indexOf(panel.info.items_mc.getChildAt(u).name)))>-1){//ItemType.TYPE[ItemType.TYPE_INDEX.indexOf(panel.info.items_mc.getChildAt(u).name))]>-1){
								panel.info.items_mc.getChildAt(u).filters = [];
								panel.info.items_mc.getChildAt(u).alpha = 1;
							} else {
								panel.info.items_mc.getChildAt(u).filters = [_global.dungeon.adjustColors(0,-100,-100,-100)];
								panel.info.items_mc.getChildAt(u).alpha = 0.75;
							}
						}
					}
					
					panel.info_btn.rect.visible = false;
					_global.game.updateEnemiesHealthBar();
					//if(texts[texts.length-1] != commandsText && texts[texts.length-1].indexOf("Knight:")==-1) addText(commandsText);
					break;
				/*case "achievements_btn":
					if(_global.gamersafe) _global.gamersafe.showAchievements({x:7, y:6, componentWidth:417,componentHeight:466});
					break;*/
				case "settings_btn":
					if(Base.location == "foumartgames") Tracker.trackEvent("UI", "Settings", _global.game.getTime());
					SoundEffect.uiClick();
					panel.settings.visible = true;
					panel.settings.update();
					if(panel.overlay.slot) panel.overlay.slot.delete_btn.visible = true;
					break;
				case "hiscores_btn":
					if(Base.location == "foumartgames") Tracker.trackEvent("UI", "Hi-Scores", _global.game.getTime());
					SoundEffect.uiClick();
					_global.shell.scorePosted();
					_global.game.panel.panel.overlay.globalScoreBrowser.visible = true;
					break;
				case "tavern_btn":
					if(_global.game.schedule != "endgame" && _global.game.isInteractionAllowed() && gameOverlay.idle){//@@
						if(Base.location == "foumartgames") Tracker.trackEvent("UI", "Tavern", _global.game.getTime());
						descendQuestion(panel.tavern_btn.prev);
					}
					break;
				case "card_btn":
					if(!discard && Base.location == "foumartgames") Tracker.trackEvent("UI", "Cards", _global.game.getTime());
					SoundEffect.uiClick();
					updateThumbs();
					if(_global.shell.mustSave){
						_global.shell.mustSave = false;
						Tween.delay(1, Local.save);
					}
					panel.cards.visible = true;
					panel.card.visible = true;
					panel.card_btn.rect.visible = false;
					if(Shell.CARDS.indexOf(_global.shell.getMostPowerfulCard(panel.overlay.currentFrame==1))<1) panel.cards.best_txt.htmlText = "Current Deck Rank is 0"; else
					panel.cards.best_txt.htmlText = "Current Deck Rank is <b>"+((Shell.CARDS.indexOf(_global.shell.getMostPowerfulCard(panel.overlay.currentFrame==1))<3)?"0":(Shell.CARDS_RANG.indexOf(Shell.CARDS_COST[Shell.CARDS.indexOf(_global.shell.getMostPowerfulCard(Boolean(panel.overlay.currentFrame==1)))]))+"</b> ("+int(UnitStat[_global.shell.getMostPowerfulCard(Boolean(panel.overlay.currentFrame==1))].exp/100)/10+"K"+((int(UnitStat[_global.shell.getMostPowerfulCard(Boolean(panel.overlay.currentFrame==1))].exp/100)/10>2)?"!":"")+")"+((_global.shell.trackedMedals.length>0)?"; Best Card: <b>"+_global.game.getName(_global.shell.getMostPowerfulCard(Boolean(panel.overlay.currentFrame==1)))+"</b>":""));
					//((_global.game.overallScore<1000)?"0":(Shell.CARDS_RANG.indexOf(Shell.CARDS_COST[Shell.CARDS.indexOf(_global.shell.getMostPowerfulCard())])))+" ("+int(UnitStat[_global.shell.getMostPowerfulCard()].exp/100)/10+"K);
					updateMiniCard();
					
					var unitThumb:Sprite;
					for(var i:uint = 0; i < Shell.CARDS.length-5; i++){
						unitThumb = panel.cards.getChildByName(_global.shell.cards[i]) as Sprite;
						unitThumb.addEventListener(MouseEvent.CLICK, clicked);unitThumb.buttonMode = true;
						if(Local.vars.cards[_global.shell.cards[i]]){
							unitThumb.filters = [new GlowFilter((_global.shell.gameMedalsNum[i]>=15)?0x336644:0, (_global.shell.gameMedalsNum[i]>=15)?1:0.5)];// && panel.overlay.currentFrame == 1) || _global.shell.gameMedals[_global.shell.cards[i]]
							unitThumb.alpha = (panel.overlay.currentFrame==1 || _global.shell.gameMedalsNum[i])?1:0.25;
						} else if((i>=30&&i<=35)||i>=44){
							unitThumb.filters = [_global.dungeon.adjustColors(0,-100,-100,-100)];
							unitThumb.alpha = .25;
						} else {
							unitThumb.filters = [_global.dungeon.adjustColors(0,-90,-50,-50)];
							unitThumb.alpha = .5;
						}
					}
					/*var worth:int = 0;trace(_global.shell.trackedMedals.length)
					for(var ii:int = 0; i < _global.shell.trackedMedals.length; i++){trace(worth, _global.shell.trackedMedals[i], Shell.CARDS.indexOf(_global.shell.trackedMedals[i]))
						worth += Shell.CARDS_COST[Shell.CARDS_INDEX[Shell.CARDS.indexOf(_global.shell.trackedMedals[i])]]
					}*/
					/// all  (_global.shell.cards.length-4)
					var intro:TextField = getTextField("<b><font size='10'>opened | this game | all\r<font size='10'>-------|-----------|-----\r  "+((_global.shell.trackedMedals.length>9)?"":" ")+_global.shell.trackedMedals.length+"   |  "+((_global.shell.gameMedals.length>9)?"  ":"   ")+_global.shell.gameMedals.length +"     | "+(Shell.CARDS.length-5)+"</font>\r-------'-----------'-----"+
													   "<font size='10'>\rtotal collected: " + _global.shell.trackedCards + ((panel.overlay.currentFrame==1)?"":"\rearned this game: </font>"+_global.shell.gameCards) + "<font size='20'> </font>"+
													   "<font size='9' color='#888888'>\r\r← pick a card to view details</b></font>", 0, 16, 0xaaaaaa);
					panel.card.addChild(intro);
					intro.x = 12;
					intro.y = 20;
					
					var style:StyleSheet = new StyleSheet();
					var hover:Object = new Object();
					hover.color = "#FF9966";
					hover.textDecoration= "underline";
					var link:Object = new Object();
					link.fontWeight = "bold";
					link.color = "#dd6666"; //green
					style.setStyle("a:link", link);
					style.setStyle("a:hover", hover);
					
					if(!discard) discard = getTextField("<font size='13'> </font><a href='event:discardPressed'>DISCARD<font size='6'> </font>COLLECTION</a><font size='13'> </font>", 0, 10, 0xff9999);
					discard.addEventListener(TextEvent.LINK, txtClick);
					discard.styleSheet = style;
					discard.border = true;
					discard.borderColor = 0x444444;
					discard.background = true;
					discard.backgroundColor = 0x111111;
					panel.card.addChild(discard);
					discard.x = 12;
					discard.y = 132;
					if(panel.overlay.currentFrame == 1 && !Local.vars.slot0 && _global.shell.trackedMedals.length>0) discard.visible = true else discard.visible = false;
					break;
				case "quit_btn"://trace(activeQuestion , questions.indexOf(activeQuestion), tutorialState, _global.game.schedule, gameOverlay.currentLabel)
					if(panel.overlay.globalScoreBrowser.enterFunction != null) {
						panel.overlay.globalScoreBrowser.cancelFunction(null);
					}
					if(!gameOverlay.idle) {SoundEffect.negative();break;}
					SoundEffect.uiClick();
					if(Base.location == "foumartgames") Tracker.trackEvent("UI", "Quit Click", _global.game.getTime());
					if(gameOverlay.currentLabel == "king" || gameOverlay.currentLabel == "show_0"){
						removeQuestion();
						Tween.delay(1, _global.game.restartGame);
					} else
					if(tutorialState && questions.indexOf(activeQuestion)==-1 && gameOverlay.currentLabel.substr(0,4)!="prep"){
						SoundEffect.negative();
					} else 
					if(_global.game.schedule == "endgame"){
						removeQuestion();
						Tween.delay(1, _global.game.restartGame);
					} else if(!activeQuestion){
						if(tutorialState){
							tutorialState = 0;
							removeQuestion();
							//addText(commandsText);
							_global.game.resetSectors();
							if(knightAction == Action.ATTACK && _global.game.playerGroup.shield.visible) Tween.delay(10*_options.skipFrames, action, UnitType.KNIGHT);
							cancel();
								//overlayClick();
								//panel.overlay.visible = false;
								//panel.overlay.buttonMode = false;
								//panel.overlay.removeEventListener(MouseEvent.CLICK, overlayClick);
						} else {//trace("GGG")
							//trace("GGG", gameOverlay.currentLabel)
							activeQuestion = questions[0];
							addQuestion((Local.vars.slot0)?activeQuestion.question:activeQuestion.question2);
							panel.info.items_mc.visible = false;
						}
					} else if(activeQuestion == questions[6]||activeQuestion == questions[7]||activeQuestion == questions[8]||activeQuestion == questions[9]
							|| (activeQuestion && tutorialState)){
						removeQuestion();
						Tween.delay(1, _global.game.restartGame);
					} else SoundEffect.negative();
					break;
				case "top_btn":
					profileUpdate(Slot.TOP);
					break;
				case "left_btn":
					profileUpdate(Slot.LEFT);
					break;
				case "right_btn":
					profileUpdate(Slot.RIGHT);
					break;
				case "bottom_btn":
					profileUpdate(Slot.BOTTOM);
					break;
				default:
					//trace("default case:"+_name);
					if(currentCard == _name){
						while(panel.card.numChildren>1){
							if(panel.card.getChildAt(1).hasEventListener(TextEvent.LINK)) panel.card.getChildAt(1).removeEventListener(TextEvent.LINK, txtClick);
							if(panel.card.getChildAt(1).hasEventListener(MouseEvent.CLICK)) panel.card.getChildAt(1).removeEventListener(MouseEvent.CLICK, clicked);
							panel.card.removeChildAt(1);
						}
						SoundFX.playSound("FX_select", 0.1, true);
						action("card_btn");
						currentCard = null;
					} else {
						if(Local.vars.cards[_name]) showCard(_name, true, true) else 
						if((Shell.CARDS.indexOf(_name)>-1&&Shell.CARDS.indexOf(_name)<30)||(Shell.CARDS.indexOf(_name)>=36&&Shell.CARDS.indexOf(_name)<44)) showCard(_name, false, true) else 
						if(_name == "dungeon_lord" || _name == "dragon" || _name == "dread_knight" || _name == "mage" ||
							(Shell.CARDS.indexOf(_name)>=36 && Shell.CARDS.indexOf(_name)<48)
						) showCard("Unknown enemy card.", false);
						else if(_name == "restoration" || _name == "cataclysm" || _name == "apocalypse" || _name == "nuke" || _name == "theia_collapse") showCard("Unknown spell card.", false)
						else if(_name == "master") showCard("Unknown special card.", false)
						else showCard(_name, false);
					}
					break;
			}
			return false;
		}
		public function updateMiniCard():void{
			var def:Class = getDefinitionByName("Card_"+_global.shell.getMostPowerfulCard()) as Class;
			var bmp:BitmapData = new def() as BitmapData;
			(panel.card_btn.gr.getChildAt(0) as Bitmap).bitmapData = bmp; 
		}
		public function castProtection(_force:Boolean = false, _top:Boolean = true, _left:Boolean = true, _right:Boolean = true, _bottom:Boolean = true):void{
			if(_force){
				SoundEffect.protection();
				if(_top && !_global.playerGroup.topDeath){
					if(_global.playerGroup.topProtection>=1&&_global.playerGroup.topProtection<=2) _global.playerGroup.topProtection = 2 else if(_top) _global.playerGroup.topProtection = 1;
				}
				if(_left && !_global.playerGroup.leftDeath){
					if(_global.playerGroup.leftProtection>=1&&_global.playerGroup.leftProtection<=2) _global.playerGroup.leftProtection = 2 else if(_left) _global.playerGroup.leftProtection = 1;
				}
				if(_right && !_global.playerGroup.rightDeath){
					if(_global.playerGroup.rightProtection>=1&&_global.playerGroup.rightProtection<=2) _global.playerGroup.rightProtection = 2 else if(_right) _global.playerGroup.rightProtection = 1;
				}
				if(_bottom && !_global.playerGroup.bottomDeath){
					if(_global.playerGroup.bottomProtection>=1&&_global.playerGroup.bottomProtection<=2) _global.playerGroup.bottomProtection = 2 else if(_bottom) _global.playerGroup.bottomProtection = 1;
				}
			} else {
				//_global.playerGroup.leftAction-=1; //if(_global.playerGroup.leftAction<0) _global.playerGroup.leftAction = 0;// **
				SoundEffect.protection();
				if(!_global.playerGroup.topDeath && /*_global.randomGen.random()>.25 && */ _top){
					if(_global.playerGroup.topProtection>=1/*&&_global.playerGroup.topProtection<=2*/) _global.playerGroup.topProtection = 2 else _global.playerGroup.topProtection = 1;
				}
				if(!_global.playerGroup.leftDeath && /*_global.randomGen.random()>.25 && */ _left){
					if(_global.playerGroup.leftProtection>=1/*&&_global.playerGroup.leftProtection<=2*/) _global.playerGroup.leftProtection = 2 else _global.playerGroup.leftProtection = 1;
				}
				if(!_global.playerGroup.rightDeath && /*_global.randomGen.random()>.25 && */ _right){
					if(_global.playerGroup.rightProtection>=1/*&&_global.playerGroup.rightProtection<=2*/) _global.playerGroup.rightProtection = 2 else _global.playerGroup.rightProtection = 1;
				}
				if(!_global.playerGroup.bottomDeath && /*_global.randomGen.random()>.25 &&*/ _bottom){
					if(_global.playerGroup.bottomProtection>=1/*&&_global.playerGroup.bottomProtection<=2*/) _global.playerGroup.bottomProtection = 2 else _global.playerGroup.bottomProtection = 1;
				}
				/*if(_top && !_global.playerGroup.topDeath&&!_global.playerGroup.topProtection&&!_global.playerGroup.rightProtection&&!_global.playerGroup.leftProtection&&!_global.playerGroup.bottomProtection){
					_global.playerGroup.topProtection = 1;
					_global.playerGroup.bottomProtection = 1;
				}*/
			}
			_global.playerGroup.updateStatus();
			_global.game.setHealth();
		}
		private function discardPressed():void{
			//for(var i:uint = 0; i < panel.card.numChildren; i++){
				//if(panel.card.getChildAt(i) is TextField) panel.card.removeChildAt(i);
			//}
			if(panel.card.contains(discard)) panel.card.removeChild(discard);
			discardCancelPressed();
			
			var style1:StyleSheet = new StyleSheet();
			var hover1:Object = new Object();
			hover1.color = "#FF9966";
			//hover1.textDecoration= "underline";
			var link1:Object = new Object();
			link1.fontWeight = "bold";
			link1.color = "#dd6666"; //green
			style1.setStyle("a:link", link1);
			style1.setStyle("a:hover", hover1);
			
			var style2:StyleSheet = new StyleSheet();
			var hover2:Object = new Object();
			hover2.color = "#66cc66";
			//hover2.textDecoration= "underline";
			var link2:Object = new Object();
			link2.fontWeight = "bold";
			link2.color = "#55aa55"; //green
			style2.setStyle("a:link", link2);
			style2.setStyle("a:hover", hover2);
					
			var discardConfirm:TextField = getTextField("<font size='13'> </font><a href='event:discardConfirmPressed'> CONFIRM  <font size='13'> </font>", 0, 10, 0xff9999);
			discardConfirm.addEventListener(TextEvent.LINK, txtClick);
			discardConfirm.styleSheet = style1;
			discardConfirm.border = true;
			discardConfirm.borderColor = 0x444444;
			discardConfirm.background = true;
			discardConfirm.backgroundColor = 0x111111;
			panel.card.addChild(discardConfirm);
			discardConfirm.x = 12;
			discardConfirm.y = 132;
			var discardCancel:TextField = getTextField("<font size='13'> </font><a href='event:discardCancelPressed'> CANCEL<font size='13'> </font>", 0, 10, 0x99cc99);
			discardCancel.addEventListener(TextEvent.LINK, txtClick);
			discardCancel.styleSheet = style2;
			discardCancel.border = true;
			discardCancel.borderColor = 0x444444;
			discardCancel.background = true;
			discardCancel.backgroundColor = 0x111111;
			panel.card.addChild(discardCancel);
			discardCancel.x = 90;
			discardCancel.y = 132;
			
			var discardQuestion:TextField = getTextField("<b>Discard collection?</b>", 0, 10, 0x999999);
			panel.card.addChild(discardQuestion);
			discardQuestion.x = 12;
			discardQuestion.y = 116;
		}
		private function discardCancelPressed():void{
			action(null);
			action("card_btn");
		}
		private function discardConfirmPressed():void{
			_global.shell.clearCards(true);
			discardCancelPressed();
		}
		private function profileCloseClick(evt:MouseEvent):void{
			SoundEffect.uiClick(1,.5);
			panel.profile.visible = false;
		}
		private function settingsCloseClick(evt:MouseEvent):void{
			SoundEffect.uiClick(1,.5);//
			Local.vars.scanLines = _options.scanLines;
			Local.vars.tutorial = _options.tutorial;
			Local.vars.intro = _options.intro;
			Local.vars.musicVolume = _options.musicVolume;
			Local.vars.soundVolume = _options.soundVolume;
			Local.vars.skipFrames = _options.skipFrames;
			Local.vars.revive = _options.revive;
			Local.vars.difficulty = _global.game.superInsane;
			Local.vars.bonus = panel.settings.intr.bonus;
			_options.bonus = Local.vars.bonus;
			if(Local.vars.scanLines && (_global._stage.displayState != StageDisplayState.FULL_SCREEN_INTERACTIVE && _global._stage.displayState != StageDisplayState.FULL_SCREEN)) _global.game.drawScanLines() else _global.game.clearScanLines();
			Local.save();
			panel.settings.visible = false;
		}
		public function profileUpdate(which:String, stay:Boolean = false):void{_global.shell.track("profileUpdate:"+which)
			if(panel.profile.visible && panel.profile.currentLabel == which && !stay){
				panel.profile.visible = false;
				return;
			}
			SoundEffect.uiClick();
			panel.profile.dead.visible = _global.game.playerGroup[which+"Death"];
			panel.profile.levels.gotoAndStop(_global.game.playerGroup[which+"Unit"].strength+1);
			panel.profile.visible = true;
			panel.profile.gotoAndStop(which);
			panel.profile.close_btn.visible = true;
			if((!SoundFX.isNowPlaying("FX_tempt")&&!SoundFX.isNowPlaying("FX_intro")) || panel.profile.pics.closed) {
				panel.profile.pics.visible = false;
				panel.profile.up_btn.mouseEnabled = true;
				panel.profile.up_btn.visible = true;
				panel.profile.left_btn.mouseEnabled = false;
				panel.profile.left_btn.visible = false;
				panel.profile.right_btn.mouseEnabled = false;
				panel.profile.right_btn.visible = false;
			} else {
				panel.profile.pics.gotoAndPlay(which);
				panel.profile.pics.visible = true;
				panel.profile.up_btn.mouseEnabled = false;
				panel.profile.up_btn.visible = false;
				panel.profile.left_btn.mouseEnabled = true;
				panel.profile.left_btn.visible = true;
				panel.profile.right_btn.mouseEnabled = true;
				panel.profile.right_btn.visible = true;
			}
			panel.profile.lvl.text = "Level: "+(_global.game.playerGroup[which+"Unit"].strength+1);
			panel.profile.info.text = "Exp: "+_global.game[which+"Exp"]+"\rFrags: "+_global.game[which+"Killed"].length;
			var crit:Number;
			var resist:Number;
			var space:String = "<font size='4'> </font>";
			if(which == Slot.TOP){
				panel.profile.items_rare.gotoAndStop(1);
				if(_global.game.loot.indexOf(ItemType.GLOVES)>-1) {
					panel.profile.items_rare.alpha = 1;
				} else {
					panel.profile.items_rare.alpha = 0.25;
				}
				if(_global.game[which+"Exp"]>=25000) panel.profile.fade.visible = false else panel.profile.fade.visible = true;
				if(_global.game.playerGroup[which+"Action"]) panel.profile.fade2.visible = false else panel.profile.fade2.visible = true;
				panel.profile.sword.gotoAndStop(_global.game.sword.currentFrame);
				panel.profile.shield.gotoAndStop(_global.game.shield.currentFrame);
				crit = ((_global.game.loot.indexOf(ItemType.SWORD_4)>-1)?((!_global.game.gloves.visible)?15:((_global.game.loot[0]==ItemType.GLOVES)?43:40)):((!_global.game.gloves.visible)?0:((_global.game.loot[0]==ItemType.GLOVES)?30:25)));
				crit += _global.playerGroup.topUnit.level*2+((_global.game.topExp>=50000)?((_global.game.topExp>=100000)?((_global.game.topExp>=200000)?19:9):4):0);
				resist = ((_global.game.loot.indexOf(ItemType.SHIELD_3)>-1)?2:((_global.game.loot.indexOf(ItemType.SHIELD_4)>-1)?1:0));
				if(knightFullAttack()!=_global.game.playerGroup.topAttack){
					panel.profile.knight_portrait.visible = false;
					panel.profile.knight_portrait_shield.visible = true;
					panel.profile.stat1.htmlText = "<font color='#555555'>Melee:"+space+knightFullAttack()+"</font>";
					panel.profile.stat2.htmlText = "Sh.Bash:"+space+knightHalfAttack();
					panel.profile.stat3.htmlText = "Guard:"+space+_global.game.playerGroup.topDefense;
					panel.profile.stat4.htmlText = "Defense:"+space+((_global.game.loot.indexOf(ItemType.SHIELD_3)==-1&&_global.game.shield.currentFrame==4)?2:((_global.game.shield.currentFrame==5)?4:_global.game.shield.currentFrame));
					panel.profile.special.htmlText = ((!resist)?"<font color='#555555'>":"")+"Resist:"+space+space+resist+((!resist)?"</font>":"")+"<br/>"+crit+"%"+space+"critical";
				} else {
					panel.profile.knight_portrait.visible = true;
					panel.profile.knight_portrait_shield.visible = false;
					panel.profile.stat1.htmlText = "Melee:"+space+knightFullAttack();
					panel.profile.stat2.htmlText = "<font color='#888888'>Sh.Bash:"+space+knightHalfAttack()+"</font>";
					panel.profile.stat3.htmlText = "<font color='#666666'>Guard:"+space+_global.game.playerGroup.topDefense+"</font>";
					panel.profile.stat4.htmlText = "<font color='#888888'>Defense:"+space+((_global.game.loot.indexOf(ItemType.SHIELD_3)==-1&&_global.game.shield.currentFrame==4)?2:((_global.game.shield.currentFrame==5)?4:_global.game.shield.currentFrame))+"</font>";
					panel.profile.special.htmlText = "<font color='#"+((!resist)?"555555":"888888")+"'>Resist:"+space+space+resist+"</font>"+"<br/>"+crit+"%"+space+"critical";
				}
				panel.profile.knight_portrait_shield.shield.gotoAndStop(_global.game.shield.currentFrame);
			} else if(which == Slot.RIGHT){
				panel.profile.items_rare.gotoAndStop(2);
				if(_global.game.loot.indexOf(ItemType.CLOAK)>-1) {
					panel.profile.items_rare.alpha = 1;
				} else {
					panel.profile.items_rare.alpha = 0.25;
				}
				if(_global.game[which+"Exp"]>=10000) panel.profile.fade.visible = false else panel.profile.fade.visible = true;
				if(_global.game.playerGroup[which+"Action"]) panel.profile.fade2.visible = false else panel.profile.fade2.visible = true;
				panel.profile.bow.gotoAndStop(_global.game.bow.currentFrame);
				crit = ((_global.game.loot.indexOf(ItemType.SWORD)>-1)?25:((_global.game.loot[0] == ItemType.SWORD_5)?10:0)) + ((_global.game.loot.indexOf(ItemType.SWORD_6)>-1)?15:0);
				crit += _global.playerGroup.rightUnit.level*2+((_global.game.rightExp>=100000)?((_global.game.rightExp>=200000)?9:4):0);
				if(rangerHalfAttack()==_global.game.playerGroup.rightAttack){
					panel.profile.stat1.htmlText = "Melee:"+space+rangerHalfAttack();
					panel.profile.stat2.htmlText = "<font color='#888888'>Ranged:"+space+rangerFullAttack()+"</font>";
					panel.profile.stat3.htmlText = "<font color='#"+((!_global.game.playerGroup.rightUnit.skill)?"555555":"888888")+"'>R.Def:"+space+_global.game.playerGroup.rightUnit.skill+"</font>";
					panel.profile.stat4.htmlText = "<font color='#888888'>"+((_global.game[which+"Exp"]<5000)?"Quiver:"+space+"3":"Quiver:"+space+"∞")+"</font>";
					panel.profile.special.htmlText = (((_global.playerGroup.rightUnit.level*4+((_global.game.loot.indexOf(ItemType.SWORD_5)>-1)?5:0)+((_global.game.loot.indexOf(ItemType.SWORD_6)>-1)?10:0)+((_global.playerGroup.rightUnit.level==1)?1:0)+((_global.game.rightExp>200000)?4:0))+((_global.game.cloak.visible)?40:0)))+"%"+space+"dodge<br/>"+crit+"%"+space+"critical";
				} else {
					panel.profile.stat1.htmlText = "<font color='#888888'>Melee:"+space+rangerHalfAttack()+"</font>";
					panel.profile.stat2.htmlText = "Ranged:"+space+rangerFullAttack();
					panel.profile.stat3.htmlText = ((!_global.game.playerGroup.rightUnit.skill)?"<font color='#888888'>":"")+"R.Def:"+space+_global.game.playerGroup.rightUnit.skill+((!_global.game.playerGroup.rightUnit.skill)?"</font>":"");
					panel.profile.stat4.htmlText = (_global.game[which+"Exp"]<5000)?"<font color='#888888'>Quiver:"+space+"3</font>":"Quiver:"+space+"∞";
					panel.profile.special.htmlText = (((_global.playerGroup.rightUnit.level*4+((_global.playerGroup.rightUnit.level==1)?1:0))+((_global.game.loot.indexOf(ItemType.SWORD_5)>-1)?5:0)+((_global.game.loot.indexOf(ItemType.SWORD_6)>-1)?10:0)+((_global.game.cloak.visible)?40:0)))+"%"+space+"dodge<font color='#888888'><br/>"+crit+"%"+space+"critical</font>";
				}
				if(_global.game.loot.indexOf(ItemType.SWORD)>-1||_global.game.loot.indexOf(ItemType.SWORD_5)>-1) panel.profile.sword.gotoAndStop(5) else 
				if(_global.game.loot.indexOf(ItemType.SWORD_6)>-1) panel.profile.sword.gotoAndStop(6) else panel.profile.sword.gotoAndStop(1);
				//panel.profile.special.htmlText = (_global.game[which+"Exp"]<5000)?"<font color='#555555'>Arrows<br/>Quiver:3</font>":"Arrows<br/>Quiver:∞";
			} else if(which == Slot.BOTTOM){
				panel.profile.items_rare.gotoAndStop(5);
				if(_global.game.loot.indexOf(ItemType.RING)>-1) {
					panel.profile.items_rare.alpha = 1;
				} else {
					panel.profile.items_rare.alpha = 0.25;
				}
				if(_global.game[which+"Exp"]>=2500) panel.profile.fade.visible = false else panel.profile.fade.visible = true;
				if(_global.game.playerGroup[which+"Action"]) panel.profile.fade2.visible = false else panel.profile.fade2.visible = true;
				panel.profile.spell.gotoAndStop(_global.game.spell.currentFrame);
				panel.profile.sword.gotoAndStop(1);
				if(_global.game.staff.visible){
					panel.profile.stat1.htmlText = ((panel.spell.visible)?"<font color='#888888'>":"")+"Wand: "+_global.game.playerGroup.bottomAttack+((panel.spell.visible)?"</font>":"");
					if(_global.playerGroup.bottomAttack>4) panel.profile.staff.gotoAndStop(5) else panel.profile.staff.gotoAndStop(4);
				} else {
					panel.profile.stat1.htmlText = ((panel.spell.visible)?"<font color='#888888'>":"")+"Rod: "+_global.game.playerGroup.bottomAttack+((panel.spell.visible)?"</font>":"");
					panel.profile.staff.gotoAndStop(3);
				}
				panel.profile.special.htmlText = (_global.game.ring.visible)?"Ignore<br/>Resistance":"<font color='#555555'>Ignore<br/>Resistance</font>";
				panel.profile.stat2.htmlText = ((!panel.spell.visible)?"<font color='#888888'>":"")+"Power: "+(_global.game.playerGroup.bottomUnit.skill+_global.game.playerGroup.spell.currentFrame)+"<font size='10' color='#999999'>*4</font>"+((!panel.spell.visible)?"</font>":"");
				panel.profile.stat3.htmlText = ((!panel.spell.visible)?"<font color='#888888'>":"")+"Spell: "+((_global.game.playerGroup.bottomUnit.skill+_global.game.playerGroup.spell.currentFrame==6)?"Sunray":((_global.game.playerGroup.bottomUnit.skill+_global.game.playerGroup.spell.currentFrame==5)?"Lightning":((_global.game.playerGroup.bottomUnit.skill+_global.game.playerGroup.spell.currentFrame>2)?"Fireball":((_global.game.playerGroup.bottomAction)?"Ice bolt":"<font color='#555555'>No scrolls</font>"))))+((!panel.spell.visible)?"</font>":"");
				panel.profile.stat4.htmlText = "";
			} else if(which == Slot.LEFT){
				panel.profile.items_rare.gotoAndStop(3);
				if(_global.game.loot.indexOf(ItemType.DIVINE_CROWN)>-1) {
					panel.profile.items_rare.gotoAndStop(4);
					panel.profile.items_rare.alpha = 1;
				} else if(_global.game.loot.indexOf(ItemType.ANKH)>-1) {
					panel.profile.items_rare.alpha = 1;
				} else {
					panel.profile.items_rare.alpha = 0.25;
				}
				if(_global.game[which+"Exp"]>=2500) panel.profile.fade.visible = false else panel.profile.fade.visible = true;
				if(_global.game.playerGroup[which+"Action"]) panel.profile.fade2.visible = false else panel.profile.fade2.visible = true;
				panel.profile.cure.gotoAndStop(_global.game.cure.currentFrame);
				panel.profile.sword.gotoAndStop(1);
				if(_global.game.sling.visible){
					panel.profile.stat1.htmlText = ((panel.spell.visible)?"<font color='#888888'>":"")+"Sling:"+space+_global.game.playerGroup.leftAttack+((panel.spell.visible)?"</font>":"");
					panel.profile.staff.gotoAndStop(2);
				} else {
					panel.profile.stat1.htmlText = ((panel.spell.visible)?"<font color='#888888'>":"")+"Staff:"+space+_global.game.playerGroup.leftAttack+((panel.spell.visible)?"</font>":"");
					panel.profile.staff.gotoAndStop(1);
				}
				var resistance:int = 0;
				if(_global.game.leftExp>=200000) resistance += 1;
				if(_global.game.leftExp>=100000) resistance += 1;
				if(_global.game.ankh.visible) resistance += 1;
				if(_global.game.crown.visible) resistance += 1;
				panel.profile.special.htmlText = "Resist: "+((!resistance)?"<font color='#555555'>":"")+space+space+resistance+((!resistance)?"</font>":"")+"<br/>"+((_global.game.loot.indexOf(ItemType.DIVINE_CROWN)==-1 && _global.game.leftExp<200000)?"<font color='#555555'>Auto-protect</font>":"Auto-protect");
				panel.profile.stat3.htmlText = "Spell: "+((_global.game.playerGroup.leftUnit.skill+_global.game.playerGroup.cure.currentFrame>=5)?"Divine Aid":((_global.game.playerGroup.leftUnit.skill+_global.game.playerGroup.cure.currentFrame>=4)?"Restoration":((_global.game.playerGroup.leftUnit.skill+_global.game.playerGroup.cure.currentFrame>2)?"Heal":((_global.game.playerGroup.leftAction)?"Cure":"<font color='#555555'>No scrolls</font>")))+((_global.game.playerGroup.leftUnit.skill+_global.game.playerGroup.cure.currentFrame<5)?((_global.game.playerGroup.leftAction&&_options.revive)?"":""):""));
				panel.profile.stat2.htmlText = "Power: "+(3+_global.game.playerGroup.leftUnit.skill+_global.game.playerGroup.cure.currentFrame + ((_global.game.loot.indexOf(ItemType.ANKH)>-1)?1:0) + ((_global.game.loot.indexOf(ItemType.DIVINE_CROWN)>-1)?1:0));
				panel.profile.stat4.htmlText = "";
			}
			if(_global.game.getBestMonster(which)){
				panel.profile.enemy.visible = true;
				panel.profile.enemy.gotoAndStop(_global.game.getBestMonster(which))
				panel.profile.exp.htmlText = "Best:\r"+_global.game.getName(_global.game.getBestMonster(which),0,true)+"\r\rExp:\r"+UnitStat[_global.game.getBestMonster(which)].exp;
			} else {
				panel.profile.enemy.stop();
				panel.profile.enemy.visible = false;
				panel.profile.exp.text = "";
			}
		}
	}
}
